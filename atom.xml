<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>fyupeng</title>
  
  
  <link href="http://fyupeng.github.io/atom.xml" rel="self"/>
  
  <link href="http://fyupeng.github.io/"/>
  <updated>2023-02-28T03:11:47.921Z</updated>
  <id>http://fyupeng.github.io/</id>
  
  <author>
    <name>fyupeng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>nacos一键启动、停止、查看状态脚本</title>
    <link href="http://fyupeng.github.io/2023/02/28/nacos%E4%B8%80%E9%94%AE%E5%90%AF%E5%8A%A8%E3%80%81%E5%81%9C%E6%AD%A2%E3%80%81%E6%9F%A5%E7%9C%8B%E7%8A%B6%E6%80%81%E8%84%9A%E6%9C%AC/"/>
    <id>http://fyupeng.github.io/2023/02/28/nacos%E4%B8%80%E9%94%AE%E5%90%AF%E5%8A%A8%E3%80%81%E5%81%9C%E6%AD%A2%E3%80%81%E6%9F%A5%E7%9C%8B%E7%8A%B6%E6%80%81%E8%84%9A%E6%9C%AC/</id>
    <published>2023-02-28T02:17:50.000Z</published>
    <updated>2023-02-28T03:11:47.921Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、直接给代码"><a href="#一、直接给代码" class="headerlink" title="一、直接给代码"></a>一、直接给代码</h1><h2 id="1-start-sh"><a href="#1-start-sh" class="headerlink" title="1. start.sh"></a>1. start.sh</h2><ul><li><strong>使用方法</strong><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="variable">@localhost</span>] <span class="comment">#ls</span></span><br><span class="line">nacos</span><br><span class="line">./start.sh ./nacos -m standalone <span class="comment"># 单机模式</span></span><br><span class="line">./start.sh ./nacos -m cluster <span class="comment"># 集群模式</span></span><br></pre></td></tr></table></figure></li><li><strong>代码</strong><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">function read_dir() &#123;</span><br><span class="line">  <span class="keyword">for</span> file <span class="keyword">in</span> <span class="string">`ls $1`</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> [[ -d <span class="variable">$1</span><span class="string">&quot;/&quot;</span><span class="variable">$file</span> ]];</span><br><span class="line">      <span class="keyword">then</span></span><br><span class="line">        read_dir <span class="variable">$1</span><span class="string">&quot;/&quot;</span><span class="variable">$file</span> <span class="variable">$2</span> <span class="variable">$3</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">if</span> [[ -f <span class="variable">$1</span><span class="string">&quot;/&quot;</span><span class="variable">$file</span> ]] &amp;&amp; [[ <span class="string">&quot;$file&quot;</span> = startup.sh ]];</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">          cd ./<span class="variable">$1</span></span><br><span class="line">          <span class="keyword">if</span> [[ <span class="string">&quot;$2&quot;</span> = <span class="string">&quot;-m&quot;</span> ]];</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">if</span> [[ <span class="string">&quot;$3&quot;</span> = <span class="string">&quot;standalone&quot;</span> ]];</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">          ./startup.sh -m standalone &gt; <span class="regexp">/dev/null</span></span><br><span class="line">          echo $<span class="number">1</span><span class="variable">$file</span> 单机模式启动成功！</span><br><span class="line">  cd - &gt; <span class="regexp">/dev/null</span></span><br><span class="line">      elif [[ <span class="string">&quot;$3&quot;</span> = <span class="string">&quot;cluster&quot;</span> ]];</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">          ./startup.sh -m cluster &gt; <span class="regexp">/dev/null</span></span><br><span class="line">           echo $<span class="number">1</span><span class="variable">$file</span> 集群模式启动成功！</span><br><span class="line">  cd - &gt; <span class="regexp">/dev/null</span></span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        echo <span class="string">&quot;1adUsage: ./startup.sh [Directory] -m [standalone | cluster]&quot;</span></span><br><span class="line">      fi</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    echo <span class="string">&quot;2Usage: ./startup.sh [Directory] -m [standalone | cluster]&quot;</span></span><br><span class="line">    exit -<span class="number">1</span>;</span><br><span class="line">          fi</span><br><span class="line">      fi</span><br><span class="line">    fi</span><br><span class="line">  done</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取第一个参数</span></span><br><span class="line">read_dir <span class="variable">$1</span> <span class="variable">$2</span> <span class="variable">$3</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="2-status-sh"><a href="#2-status-sh" class="headerlink" title="2. status.sh"></a>2. status.sh</h2><ul><li><p><strong>使用方法</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="variable">@localhost</span>] <span class="comment">#ls</span></span><br><span class="line">nacos</span><br><span class="line">./status.sh ./nacos -m standalone <span class="comment"># 单机模式</span></span><br><span class="line">./status.sh ./nacos -m cluster <span class="comment"># 集群模式</span></span><br></pre></td></tr></table></figure></li><li><p><strong>代码</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">target_dir=$1</span><br><span class="line"></span><br><span class="line">if [[ &quot;$target_dir&quot; = &quot;&quot; ]] || [[ ! -d $target_dir ]];</span><br><span class="line">then</span><br><span class="line">  echo &quot;Usage: ./status.sh [Dir]&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">pid=`ps ax | grep -i &#x27;nacos.nacos&#x27; | grep $&#123;target_dir&#125; | grep java | grep -v grep | awk &#x27;&#123;print $1&#125;&#x27;`</span><br><span class="line"></span><br><span class="line">if [[ -z &quot;$pid&quot; ]];</span><br><span class="line">then</span><br><span class="line">  echo &quot;No NacosServer running.&quot;</span><br><span class="line"> exit -1;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">echo &quot;The nacosServer $1&quot;nacos-server.jar&quot;  is running, it&#x27;s pids as follow:&quot;</span><br><span class="line">echo &quot;$pid&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-stop-sh"><a href="#3-stop-sh" class="headerlink" title="3.stop.sh"></a>3.stop.sh</h2></li><li><p><strong>使用方法</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="variable">@localhost</span>] <span class="comment">#ls</span></span><br><span class="line">nacos</span><br><span class="line">./status.sh ./nacos -m standalone <span class="comment"># 单机模式</span></span><br><span class="line">./status.sh ./nacos -m cluster <span class="comment"># 集群模式</span></span><br></pre></td></tr></table></figure></li><li><p><strong>代码</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">target_dir=$1</span><br><span class="line"></span><br><span class="line">pid=`ps ax | grep -i &#x27;nacos.nacos&#x27; | grep $&#123;target_dir&#125; | grep java | grep -v grep | awk &#x27;&#123;print $1&#125;&#x27;`</span><br><span class="line">if [ -z &quot;$pid&quot; ] ; then</span><br><span class="line">        echo &quot;No nacosServer running.&quot;</span><br><span class="line">        exit -1;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">echo &quot;The nacosServer $1&quot;nacos-server.jar&quot;  is running, it&#x27;s pids as follow:&quot;</span><br><span class="line">echo  &quot;$pid&quot;</span><br><span class="line"></span><br><span class="line">kill $&#123;pid&#125;</span><br><span class="line"></span><br><span class="line">echo &quot;Services stop successfully！ which has been killed forcibly!&quot;</span><br><span class="line">echo pid as follow: </span><br><span class="line">echo &quot;$pid&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h1 id="二、结束语"><a href="#二、结束语" class="headerlink" title="二、结束语"></a>二、结束语</h1><p>评论区可留言，可私信，可互相交流学习，共同进步，小生会努力写出优质文章，期待同友多多回访。</p><blockquote><p>专注品质，热爱生活。<br>交流技术，寻求同志。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、直接给代码&quot;&gt;&lt;a href=&quot;#一、直接给代码&quot; class=&quot;headerlink&quot; title=&quot;一、直接给代码&quot;&gt;&lt;/a&gt;一、直接给代码&lt;/h1&gt;&lt;h2 id=&quot;1-start-sh&quot;&gt;&lt;a href=&quot;#1-start-sh&quot; class=&quot;head</summary>
      
    
    
    
    <category term="脚本工具" scheme="http://fyupeng.github.io/categories/%E8%84%9A%E6%9C%AC%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Java工具" scheme="http://fyupeng.github.io/tags/Java%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>vue一键启动、停止、查看状态实用工具</title>
    <link href="http://fyupeng.github.io/2023/02/01/vue%E4%B8%80%E9%94%AE%E5%90%AF%E5%8A%A8%E3%80%81%E5%81%9C%E6%AD%A2%E3%80%81%E6%9F%A5%E7%9C%8B%E7%8A%B6%E6%80%81%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    <id>http://fyupeng.github.io/2023/02/01/vue%E4%B8%80%E9%94%AE%E5%90%AF%E5%8A%A8%E3%80%81%E5%81%9C%E6%AD%A2%E3%80%81%E6%9F%A5%E7%9C%8B%E7%8A%B6%E6%80%81%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/</id>
    <published>2023-02-01T04:07:59.000Z</published>
    <updated>2023-02-01T04:08:28.254Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、直接给代码"><a href="#一、直接给代码" class="headerlink" title="一、直接给代码"></a>一、直接给代码</h1><h2 id="1-start-sh"><a href="#1-start-sh" class="headerlink" title="1. start.sh"></a>1. start.sh</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">function read_dir() &#123;</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -eq <span class="number">0</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">echo <span class="string">&quot;Usage: $0 [DirFile]&quot;</span></span><br><span class="line">exit <span class="number">1</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">echo <span class="string">&quot;Service is starting....&quot;</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cd ./<span class="variable">$1</span></span><br><span class="line">mkdir logs/ &amp;&gt; <span class="regexp">/dev/null</span> &amp;</span><br><span class="line">nohup npm run serve &gt;&amp; logs/catalina-<span class="variable">$(</span>date +%Y-%m-%d).log &amp;</span><br><span class="line"></span><br><span class="line">echo <span class="string">&quot;Service starting succuesful!&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">read_dir <span class="variable">$1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-stop-sh"><a href="#2-stop-sh" class="headerlink" title="2. stop.sh"></a>2. stop.sh</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># !/bin/bash</span></span><br><span class="line"></span><br><span class="line">function read_dir() &#123;</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -eq <span class="number">0</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">echo <span class="string">&quot;Usage: $0 [DirFile]&quot;</span></span><br><span class="line">exit <span class="number">1</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">echo <span class="string">&quot;Service is stop....&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ -f <span class="variable">$1</span> ]]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">echo <span class="string">&quot;$1 is not a DirFile!&quot;</span></span><br><span class="line">exit <span class="number">1</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">pid=<span class="string">`ps -ef | grep $1 | grep -v grep | awk &#x27;&#123;print $2&#125;&#x27;`</span></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="variable">$pid</span> ]; <span class="keyword">then</span></span><br><span class="line">echo <span class="string">&quot;&quot;</span></span><br><span class="line">echo <span class="string">&quot;Service $1 is not running! It&#x27;s not necessary to stop it!&quot;</span></span><br><span class="line">echo <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">kill -<span class="number">9</span> <span class="variable">$pid</span></span><br><span class="line">echo <span class="string">&quot;&quot;</span></span><br><span class="line">echo <span class="string">&quot;Servuce stop successfuly! pid:$&#123;pid&#125; which has been killid forcibly!&quot;</span></span><br><span class="line">echo <span class="string">&quot;&quot;</span></span><br><span class="line">fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">read_dir <span class="variable">$1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-status-sh"><a href="#3-status-sh" class="headerlink" title="3.status.sh"></a>3.status.sh</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># !/bin/bash</span></span><br><span class="line"></span><br><span class="line">function read_dir() &#123;</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -eq <span class="number">0</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">echo <span class="string">&quot;Usage: $0 [DirFile]&quot;</span></span><br><span class="line">exit <span class="number">1</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ -f <span class="variable">$1</span> ]]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">echo <span class="string">&quot;$1 is not a DirFile!&quot;</span></span><br><span class="line">exit <span class="number">1</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">pid=<span class="string">`ps -ef | grep $1 | grep -v grep | awk &#x27;&#123;print $2&#125;&#x27;`</span></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="variable">$pid</span> ]; <span class="keyword">then</span></span><br><span class="line">echo <span class="string">&quot;&quot;</span></span><br><span class="line">echo <span class="string">&quot;Service $1 is not running!&quot;</span></span><br><span class="line">echo <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">echo <span class="string">&quot;&quot;</span></span><br><span class="line">echo <span class="string">&quot;Servuce $1 is running. It&#x27;s pids=$&#123;pid&#125;&quot;</span></span><br><span class="line">echo <span class="string">&quot;&quot;</span></span><br><span class="line">fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">read_dir <span class="variable">$1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="二、结束语"><a href="#二、结束语" class="headerlink" title="二、结束语"></a>二、结束语</h1><p>评论区可留言，可私信，可互相交流学习，共同进步，欢迎各位给出意见或评价，本人致力于做到优质文章，希望能有幸拜读各位的建议！</p><blockquote><p>专注品质，热爱生活。<br>交流技术，寻求同志。<br>—— 嗝屁小孩纸 QQ：1160886967</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、直接给代码&quot;&gt;&lt;a href=&quot;#一、直接给代码&quot; class=&quot;headerlink&quot; title=&quot;一、直接给代码&quot;&gt;&lt;/a&gt;一、直接给代码&lt;/h1&gt;&lt;h2 id=&quot;1-start-sh&quot;&gt;&lt;a href=&quot;#1-start-sh&quot; class=&quot;head</summary>
      
    
    
    
    <category term="脚本工具" scheme="http://fyupeng.github.io/categories/%E8%84%9A%E6%9C%AC%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Java工具" scheme="http://fyupeng.github.io/tags/Java%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>jar包批量启动、查看状态、关闭脚本</title>
    <link href="http://fyupeng.github.io/2023/02/01/jar%E5%8C%85%E6%89%B9%E9%87%8F%E5%90%AF%E5%8A%A8%E3%80%81%E6%9F%A5%E7%9C%8B%E7%8A%B6%E6%80%81%E3%80%81%E5%85%B3%E9%97%AD%E8%84%9A%E6%9C%AC/"/>
    <id>http://fyupeng.github.io/2023/02/01/jar%E5%8C%85%E6%89%B9%E9%87%8F%E5%90%AF%E5%8A%A8%E3%80%81%E6%9F%A5%E7%9C%8B%E7%8A%B6%E6%80%81%E3%80%81%E5%85%B3%E9%97%AD%E8%84%9A%E6%9C%AC/</id>
    <published>2023-02-01T03:55:30.000Z</published>
    <updated>2023-02-01T03:58:10.664Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、直接给代码"><a href="#一、直接给代码" class="headerlink" title="一、直接给代码"></a>一、直接给代码</h1><h2 id="1-start-sh"><a href="#1-start-sh" class="headerlink" title="1. start.sh"></a>1. start.sh</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env bash</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 配置文件名称</span></span><br><span class="line"><span class="comment"># (该配置文件放置在jar包同级目录下并且必须存在已经配置文件名称具备统一性！！！请根据实际的配置文件名称进行修改)</span></span><br><span class="line"><span class="variable constant_">CONFIG_FILE_NAME</span>=<span class="string">&quot;application.properties&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动一个目录下的所有jar包</span></span><br><span class="line">function read_dir()&#123;</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> <span class="string">`ls $1`</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="comment">#如果当前文件是文件夹则递归处理</span></span><br><span class="line">  <span class="keyword">if</span> [ -d <span class="variable">$1</span><span class="string">&quot;/&quot;</span><span class="variable">$file</span> ];</span><br><span class="line">  <span class="keyword">then</span></span><br><span class="line">    read_dir <span class="variable">$1</span><span class="string">&quot;/&quot;</span><span class="variable">$file</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="comment"># 当前文件不是一个文件夹</span></span><br><span class="line">    <span class="keyword">if</span> [[ -f <span class="variable">$1</span><span class="string">&quot;/&quot;</span><span class="variable">$file</span> ]];</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="comment"># 如果当前文件是一个.jar结尾的文件则启动它</span></span><br><span class="line">        <span class="keyword">if</span> [[ <span class="variable">$&#123;</span><span class="symbol">file:</span><span class="number">0</span>-<span class="number">4</span>&#125; == <span class="string">&#x27;.jar&#x27;</span> ]];</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">  echo <span class="variable">$1</span>/<span class="variable">$file</span> 开始启动...</span><br><span class="line">          cd ./<span class="variable">$1</span></span><br><span class="line">          <span class="comment">#nohup java -jar $1&quot;/&quot;$file --spring.config.location=$1&quot;/&quot;$CONFIG_FILE_NAME &gt; /dev/null &amp;</span></span><br><span class="line">   <span class="keyword">if</span> [[ ! -d <span class="string">&quot;./logs/&quot;</span> ]];</span><br><span class="line">  <span class="keyword">then</span>  </span><br><span class="line">          mkdir <span class="string">&quot;./logs&quot;</span> &gt; <span class="regexp">/dev/nul</span></span><br><span class="line">  fi</span><br><span class="line">      nohup java -jar -Dlogging.config=<span class="string">&quot;./config/logback.xml&quot;</span> <span class="string">&quot;./&quot;</span><span class="variable">$file</span> &gt; <span class="string">&quot;./logs/catalina.log&quot;</span> &amp;</span><br><span class="line">     <span class="comment">#nohup java -jar ./$file &gt; ./logs/catalina.log &amp;</span></span><br><span class="line">            echo <span class="variable">$1</span><span class="string">&quot;/&quot;</span><span class="variable">$file</span>  启动成功!</span><br><span class="line">    echo <span class="string">&quot;&quot;</span></span><br><span class="line">            cd - &gt; <span class="regexp">/dev/null</span></span><br><span class="line">        fi</span><br><span class="line">    fi</span><br><span class="line">  fi</span><br><span class="line">done</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#读取第一个参数</span></span><br><span class="line">read_dir <span class="variable">$1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-status-sh"><a href="#2-status-sh" class="headerlink" title="2. status.sh"></a>2. status.sh</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env bash</span></span><br><span class="line"><span class="comment"># 查看某个目录下所有jar程序的状态</span></span><br><span class="line">function read_dir()&#123;</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> <span class="string">`ls $1`</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="comment">#如果当前文件是文件夹则递归处理</span></span><br><span class="line">  <span class="keyword">if</span> [ -d <span class="variable">$1</span><span class="string">&quot;/&quot;</span><span class="variable">$file</span> ]</span><br><span class="line">  <span class="keyword">then</span></span><br><span class="line">    read_dir <span class="variable">$1</span><span class="string">&quot;/&quot;</span><span class="variable">$file</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="comment"># 当前文件不是一个文件夹</span></span><br><span class="line">    <span class="keyword">if</span> [[ -f <span class="variable">$1</span><span class="string">&quot;/&quot;</span><span class="variable">$file</span> ]]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">if</span> [[ <span class="variable">$&#123;</span><span class="symbol">file:</span><span class="number">0</span>-<span class="number">4</span>&#125; == <span class="string">&#x27;.jar&#x27;</span> ]];</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">            <span class="comment"># 获取pid</span></span><br><span class="line">                pid=<span class="string">`ps -ef | grep $file | grep -v grep | awk &#x27;&#123;print $2&#125;&#x27;`</span></span><br><span class="line">            <span class="comment"># -z 表示如果$pid为空时则输出提示</span></span><br><span class="line">                <span class="keyword">if</span> [ -z <span class="variable">$pid</span> ];<span class="keyword">then</span></span><br><span class="line">                        echo <span class="string">&quot;&quot;</span></span><br><span class="line">                echo <span class="string">&quot;Service $file is not running!&quot;</span></span><br><span class="line">                        echo <span class="string">&quot;&quot;</span></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                        echo <span class="string">&quot;&quot;</span></span><br><span class="line">                echo <span class="string">&quot;Service $1&quot;</span>/<span class="string">&quot;$file is running. It&#x27;s pids=$&#123;pid&#125;&quot;</span></span><br><span class="line">                        echo <span class="string">&quot;&quot;</span></span><br><span class="line">                fi</span><br><span class="line">        fi</span><br><span class="line">    fi</span><br><span class="line">  fi</span><br><span class="line">done</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#读取第一个参数</span></span><br><span class="line">read_dir <span class="variable">$1</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-stop-sh"><a href="#3-stop-sh" class="headerlink" title="3.stop.sh"></a>3.stop.sh</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env bash</span></span><br><span class="line"><span class="comment"># 停止一个目录下的所有jar程序</span></span><br><span class="line">function read_dir()&#123;</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> <span class="string">`ls $1`</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="comment">#如果当前文件是文件夹则递归处理</span></span><br><span class="line">  <span class="keyword">if</span> [ -d <span class="variable">$1</span><span class="string">&quot;/&quot;</span><span class="variable">$file</span> ]</span><br><span class="line">  <span class="keyword">then</span></span><br><span class="line">    read_dir <span class="variable">$1</span><span class="string">&quot;/&quot;</span><span class="variable">$file</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="comment"># 当前文件不是一个文件夹</span></span><br><span class="line">    <span class="keyword">if</span> [[ -f <span class="variable">$1</span><span class="string">&quot;/&quot;</span><span class="variable">$file</span> ]]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">if</span> [[ <span class="variable">$&#123;</span><span class="symbol">file:</span><span class="number">0</span>-<span class="number">4</span>&#125; == <span class="string">&#x27;.jar&#x27;</span> ]];</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">            <span class="comment"># 获取pid</span></span><br><span class="line">            <span class="comment"># 模糊匹配 $file 进程| 过滤自身命令进程 | 输出进程表中的进程号</span></span><br><span class="line">                pid=<span class="string">`ps -ef | grep $file | grep -v grep | awk &#x27;&#123;print $2&#125;&#x27;`</span></span><br><span class="line">            <span class="comment"># -z 表示如果$pid为空时则输出提示</span></span><br><span class="line">                <span class="keyword">if</span> [ -z <span class="variable">$pid</span> ]; <span class="keyword">then</span></span><br><span class="line">                echo <span class="string">&quot;Service $file is not running! It&#x27;s not necessary to stop it!&quot;</span></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                <span class="comment"># 杀死进程</span></span><br><span class="line">                        kill -<span class="number">9</span> <span class="variable">$pid</span></span><br><span class="line">                        echo <span class="string">&quot;Service stop successfully！pid:$&#123;pid&#125; which has been killed forcibly!&quot;</span></span><br><span class="line">echo <span class="string">&quot;&quot;</span></span><br><span class="line">                fi</span><br><span class="line">        fi</span><br><span class="line">    fi</span><br><span class="line">  fi</span><br><span class="line">done</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#读取第一个参数</span></span><br><span class="line">read_dir <span class="variable">$1</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="二、结束语"><a href="#二、结束语" class="headerlink" title="二、结束语"></a>二、结束语</h1><p>评论区可留言，可私信，可互相交流学习，共同进步，欢迎各位给出意见或评价，本人致力于做到优质文章，希望能有幸拜读各位的建议！</p><blockquote><p>专注品质，热爱生活。<br>交流技术，寻求同志。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、直接给代码&quot;&gt;&lt;a href=&quot;#一、直接给代码&quot; class=&quot;headerlink&quot; title=&quot;一、直接给代码&quot;&gt;&lt;/a&gt;一、直接给代码&lt;/h1&gt;&lt;h2 id=&quot;1-start-sh&quot;&gt;&lt;a href=&quot;#1-start-sh&quot; class=&quot;head</summary>
      
    
    
    
    <category term="脚本工具" scheme="http://fyupeng.github.io/categories/%E8%84%9A%E6%9C%AC%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Java工具" scheme="http://fyupeng.github.io/tags/Java%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>宕机检测、重启、告警开发工具</title>
    <link href="http://fyupeng.github.io/2023/02/01/%E5%AE%95%E6%9C%BA%E6%A3%80%E6%B5%8B%E3%80%81%E9%87%8D%E5%90%AF%E3%80%81%E5%91%8A%E8%AD%A6%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    <id>http://fyupeng.github.io/2023/02/01/%E5%AE%95%E6%9C%BA%E6%A3%80%E6%B5%8B%E3%80%81%E9%87%8D%E5%90%AF%E3%80%81%E5%91%8A%E8%AD%A6%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/</id>
    <published>2023-02-01T03:55:08.000Z</published>
    <updated>2023-02-01T03:57:29.585Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、直接给代码"><a href="#一、直接给代码" class="headerlink" title="一、直接给代码"></a>一、直接给代码</h1><h2 id="1-keepalived-conf"><a href="#1-keepalived-conf" class="headerlink" title="1. keepalived.conf"></a>1. keepalived.conf</h2><p>安装详见 <a href="https://blog.csdn.net/F15217283411/article/details/120801130">keepalived安装教程</a><br>配置前请备份好原文件，新建文件夹<code>/etc/keepalived</code>并将副本<code>keepalived.conf</code>复制到<code>/etc/keepalived</code>即可。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">!Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line">global_defs &#123;</span><br><span class="line">        router_id master</span><br><span class="line">        notification_email &#123;</span><br><span class="line">          ******<span class="variable">@163</span>.com  </span><br><span class="line">        &#125;</span><br><span class="line">        notification_email_from ******<span class="variable">@126</span>.com</span><br><span class="line">        smtp_server <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">        smtp_connect_timeout <span class="number">30</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_script chk_http_port &#123;</span><br><span class="line">        <span class="comment"># 脚本检测工具，见 3.nginx_check.sh</span></span><br><span class="line">        script <span class="string">&quot;/usr/local/src/nginx_check.sh&quot;</span></span><br><span class="line">        interval <span class="number">2</span> <span class="comment">#（检测脚本执行的间隔）</span></span><br><span class="line">        weight -<span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance <span class="variable constant_">VI_1</span> &#123;</span><br><span class="line">        state <span class="variable constant_">MASTER</span> <span class="comment"># 备份服务器上将 MASTER 改为 BACKUP</span></span><br><span class="line">        <span class="comment">## 具体网卡请 键入命令 ip a 查看有哪些来进行配置</span></span><br><span class="line">        interface eth0 /<span class="regexp">/网卡</span></span><br><span class="line"><span class="regexp">        virtual_router_id 1 # 主、备机的 virtual_router_id 必须相同</span></span><br><span class="line"><span class="regexp">        priority 100 # 主、备机取不同的优先级，主机值较大，备份机值较小</span></span><br><span class="line"><span class="regexp">        advert_int 1</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        authentication &#123;</span></span><br><span class="line"><span class="regexp">                auth_type PASS</span></span><br><span class="line"><span class="regexp">                auth_pass root123</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        track_script&#123; # 这里调用检测脚本执行，一秒检测一次</span></span><br><span class="line"><span class="regexp">               chk_http_port</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        # 根据 内网子网 设置虚拟地址，用于转发，keepalived集群不在此章节</span></span><br><span class="line"><span class="regexp">        virtual_ipaddress &#123;</span></span><br><span class="line"><span class="regexp">                192.168.0.100/</span><span class="number">24</span> dev eth0 label <span class="symbol">eth0:</span><span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#配置keepalived发生故障转移时，触发执行的脚本</span></span><br><span class="line">        notify_master <span class="string">&quot;/etc/keepalived/notify.sh master &quot;</span></span><br><span class="line">        notify_backup <span class="string">&quot;/etc/keepalived/notify.sh backup &quot;</span></span><br><span class="line">        notify_fault  <span class="string">&quot;/etc/keepalived/notify.sh fault &quot;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-notify-sh"><a href="#2-notify-sh" class="headerlink" title="2. notify.sh"></a>2. notify.sh</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#接收者邮箱，多个以空格分隔</span></span><br><span class="line">contact=(******<span class="variable">@163</span>.com ******<span class="variable">@qq</span>.com)</span><br><span class="line"><span class="comment">#本机ip</span></span><br><span class="line"><span class="variable constant_">HOST_IP</span>=<span class="number">192.168</span>.<span class="number">0.100</span>/<span class="number">24</span></span><br><span class="line">notify() &#123;</span><br><span class="line"><span class="comment">#邮件主题</span></span><br><span class="line">    mailsubject=<span class="string">&quot;vip转移,$HOST_IP keepalived to be $1&quot;</span></span><br><span class="line">    <span class="comment">#邮件正文</span></span><br><span class="line">    mailbody=<span class="string">&quot;$(date +&#x27;%F %T&#x27;): 节点切换, $HOST_IP keepalived changed to be $1&quot;</span></span><br><span class="line">    <span class="keyword">for</span> receiver <span class="keyword">in</span> <span class="variable">$&#123;</span>contact[*]&#125;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        <span class="comment">#发送邮件</span></span><br><span class="line">        echo <span class="string">&quot;$mailbody&quot;</span> |<span class="params"> mail -s &quot;$mailsubject&quot; $receiver</span></span><br><span class="line"><span class="params">    done</span></span><br><span class="line"><span class="params">&#125;</span></span><br><span class="line"><span class="params"><span class="keyword">case</span> $1 <span class="keyword">in</span></span></span><br><span class="line"><span class="params">master)</span></span><br><span class="line"><span class="params">    notify master</span></span><br><span class="line"><span class="params">    ;;</span></span><br><span class="line"><span class="params">backup)</span></span><br><span class="line"><span class="params">    notify backup</span></span><br><span class="line"><span class="params">    ;;</span></span><br><span class="line"><span class="params">fault)</span></span><br><span class="line"><span class="params">    notify fault</span></span><br><span class="line"><span class="params">    ;;</span></span><br><span class="line"><span class="params">*)</span></span><br><span class="line"><span class="params">    echo &quot;Usage:&#123;master</span>|backup|<span class="params">fault&#125;&quot;</span></span><br><span class="line"><span class="params">    exit 1</span></span><br><span class="line"><span class="params">    ;;</span></span><br><span class="line"><span class="params">esac</span></span><br></pre></td></tr></table></figure><h2 id="3-nginx-check-sh"><a href="#3-nginx-check-sh" class="headerlink" title="3.nginx_check.sh"></a>3.nginx_check.sh</h2><p>以<code>nginx</code>为例，脚本用于宕机检测和重启</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env bash</span></span><br><span class="line">echo <span class="string">&#x27; a&#x27;</span></span><br><span class="line">A=<span class="string">`ps -C nginx --no-header |wc -l`</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$A</span> -eq <span class="number">0</span> ];<span class="keyword">then</span></span><br><span class="line">        <span class="comment"># 开启nginx服务</span></span><br><span class="line">        /usr/local/nginx/sbin/nginx</span><br><span class="line">        sleep <span class="number">1</span></span><br><span class="line">        <span class="comment"># nginx没有启动成功</span></span><br><span class="line">        <span class="keyword">if</span> [ <span class="string">`ps -C nginx --no-header |wc -l`</span> -eq <span class="number">0</span> ];<span class="keyword">then</span></span><br><span class="line">                <span class="comment"># 杀死keepalived进程</span></span><br><span class="line">                killall keepalived</span><br><span class="line">        fi</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h2 id="4-mail-rc"><a href="#4-mail-rc" class="headerlink" title="4.mail.rc"></a>4.mail.rc</h2><p>告警邮件发送配置，需要安装相关依赖</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install mailx</span><br></pre></td></tr></table></figure><p>配置<code>/etc/mail.rc</code></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This is the configuration file for Heirloom mailx (formerly</span></span><br><span class="line"><span class="comment"># known under the name &quot;nail&quot;.</span></span><br><span class="line"><span class="comment"># See mailx(1) for further options.</span></span><br><span class="line"><span class="comment"># This file is not overwritten when &#x27;make install&#x27; is run in</span></span><br><span class="line"><span class="comment"># the mailx build process again.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Sccsid @(#)nail.rc2.11 (gritter) 8/2/08</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Do not forward to mbox by default since this is likely to be</span></span><br><span class="line"><span class="comment"># irritating for most users today.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 末尾追加6行配置即可</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#发送邮件的邮箱</span></span><br><span class="line">set from=******<span class="variable">@126</span>.com</span><br><span class="line"><span class="comment">#smtp邮件服务器</span></span><br><span class="line">set smtp=smtp.<span class="number">126</span>.com</span><br><span class="line"><span class="comment">#发送邮件的邮箱用户</span></span><br><span class="line">set smtp-auth-user=******<span class="variable">@126</span>.com</span><br><span class="line"><span class="comment">#邮箱授权码</span></span><br><span class="line">set smtp-auth-password=******</span><br><span class="line">set smtp-auth=login</span><br><span class="line">set ssl-verify=ignore</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="二、效果展示"><a href="#二、效果展示" class="headerlink" title="二、效果展示"></a>二、效果展示</h1><blockquote><p><code>keepalived</code> 服务</p></blockquote><ul><li>启动<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start keepalived</span><br></pre></td></tr></table></figure></li><li>查看状态<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status keepalived</span><br></pre></td></tr></table></figure></li><li>关闭<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop keepalived</span><br></pre></td></tr></table></figure></li><li>重启<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart keepalived</span><br></pre></td></tr></table></figure>手动关闭<code>nginx</code>服务，<code>keepalived</code>自动检测并重启<blockquote><p>注意</p></blockquote></li></ul><p>检测周期必须大于<code>notify.sh</code>脚本睡眠时间。</p><blockquote><p>告警邮件</p></blockquote><p><img src="https://img-blog.csdnimg.cn/6fbb9cffe08d44809353e14dd19e2f21.png" alt="在这里插入图片描述"></p><h1 id="三、结束语"><a href="#三、结束语" class="headerlink" title="三、结束语"></a>三、结束语</h1><p>评论区可留言，可私信，可互相交流学习，共同进步，欢迎各位给出意见或评价，本人致力于做到优质文章，希望能有幸拜读各位的建议！</p><blockquote><p>专注品质，热爱生活。<br>交流技术，寻求同志。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、直接给代码&quot;&gt;&lt;a href=&quot;#一、直接给代码&quot; class=&quot;headerlink&quot; title=&quot;一、直接给代码&quot;&gt;&lt;/a&gt;一、直接给代码&lt;/h1&gt;&lt;h2 id=&quot;1-keepalived-conf&quot;&gt;&lt;a href=&quot;#1-keepalived-con</summary>
      
    
    
    
    <category term="脚本工具" scheme="http://fyupeng.github.io/categories/%E8%84%9A%E6%9C%AC%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Java脚本" scheme="http://fyupeng.github.io/tags/Java%E8%84%9A%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>TCP三次握手和四次挥手</title>
    <link href="http://fyupeng.github.io/2023/01/09/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%92%8C%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/"/>
    <id>http://fyupeng.github.io/2023/01/09/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%92%8C%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/</id>
    <published>2023-01-09T09:43:24.000Z</published>
    <updated>2023-01-09T09:44:48.118Z</updated>
    
    <content type="html"><![CDATA[<h2 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h2><ul><li><p>先<code>ping</code>域名为<a href="http://www.baidu.com，便于`DNS`解析。`ping`走的协议就包括`DNS`、`ARP`和`ICMP`。![image-20230109150250842](https://yupeng-tuchuang.oss-cn-shenzhen.aliyuncs.com/image-20230109150250842.png)">www.baidu.com，便于`DNS`解析。`ping`走的协议就包括`DNS`、`ARP`和`ICMP`。![image-20230109150250842](https://yupeng-tuchuang.oss-cn-shenzhen.aliyuncs.com/image-20230109150250842.png)</a></p></li><li><p>接着使用<code>Wireshark</code>去抓包，抓包这里导航栏直接过滤<code>ip</code>就可以了，输入<code>ip.host == 183.232.231.174</code><img src="https://yupeng-tuchuang.oss-cn-shenzhen.aliyuncs.com/image-20230109150551142.png" alt="image-20230109150551142"></p></li><li><p>接着直接在浏览器输入百度域名<a href="http://www.baidu.com访问请求，Wireshark就能抓取包来分析了![image-20230109150841554](https://yupeng-tuchuang.oss-cn-shenzhen.aliyuncs.com/image-20230109150841554.png)">www.baidu.com访问请求，Wireshark就能抓取包来分析了![image-20230109150841554](https://yupeng-tuchuang.oss-cn-shenzhen.aliyuncs.com/image-20230109150841554.png)</a></p></li><li><p>这里我们可以看到，本地通过<code>ipconfig</code>就可以看到<code>source</code>那一列为自己的<code>ip</code>地址，而且是客户端为前后各一次，服务端是第二次。</p><ul><li><p>第一次为<code>SYN</code>标记请求，全英文名我的理解是<code>Synchronized</code>，即为同步，表示同步连接请求；                     <img src="https://yupeng-tuchuang.oss-cn-shenzhen.aliyuncs.com/image-20230109151812384.png" alt="image-20230109151812384"></p></li><li><p>第二次为<code>SYN</code> + <code>ACK</code>组合标记请求，准确来说是两次请求（<code>SYN</code>第一次，<code>ACK</code>第二次），只不过优化对它进行合并了，<code>SYN</code>也表示连接，显而易见，想建立连接两方都要与对方发送同步包请求连接，<code>ACK</code>表示百度接收到了你的同步包，但怎么告知人家？用<code>ACK = SYN(第一次握手的Sequence) + 1</code>，算是一种默契，你收到该包后客户端完成了连接，但百度还未连接成功；   <img src="https://yupeng-tuchuang.oss-cn-shenzhen.aliyuncs.com/image-20230109151909319.png" alt="image-20230109151909319"></p></li><li><p>第三次为<code>ACK</code>标记请求，百度第二次握手发了一个<code>ACK</code>标记，说明这个包是对你前一个包的回应，由前两个图可知。剩下的一个<code>SYN</code>标记，是表明这个包也是一个连接请求包，需要你发回<code>ACK</code>包，即表明我收到了，但得告知你，最后你收到后，你也成功完成连接。                                                                                          <img src="https://yupeng-tuchuang.oss-cn-shenzhen.aliyuncs.com/image-20230109152138802.png" alt="image-20230109152138802"></p></li></ul></li></ul><h2 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h2><ul><li><p>三次挥手需要客户端与服务端断开连接，我这里使用vmware去连接虚拟机centos来演示。跟三次握手一样，你要抓那个网络的包，你就要在这个网络中去连接，比如我的是<code>192.168.10.1</code>这个，用这个通过子网分配给了一台虚拟机<code>192.168.10.100</code><img src="https://yupeng-tuchuang.oss-cn-shenzhen.aliyuncs.com/image-20230109162807968.png" alt="image-20230109162807968"></p></li><li><p>通过<code>xsell</code>连接后，使用命令<code>init 0</code>来断开连接，这会让服务器和客户端都断开连接。分清楚我是虚拟机，服务器是虚拟适配器<code>VMnet8</code>，因为我是在虚拟机里主动命令断开的。抓取信息如下：（将<code>FIN</code>顺带的<code>ACK</code>忽略，就是标准的四次挥手）</p><p><img src="https://yupeng-tuchuang.oss-cn-shenzhen.aliyuncs.com/image-20230109162327318.png" alt="image-20230109162327318"></p><ul><li><p>第一次为<code>FIN</code>标记请求，表示自己要断开连接了，不会再发送消息。<img src="https://yupeng-tuchuang.oss-cn-shenzhen.aliyuncs.com/image-20230109162432906.png" alt="image-20230109162432906"></p></li><li><p>第二次为<code>ACK</code>标记请求，表示服务器收到了，然后服务器不再接收消息，但还是会发送消息，所以这是还未发送<code>FIN</code>包。从这个时候我还是可以接收服务器的消息的，所以我这边还不能断开。   而有些不用接收数据就可以是三次挥手，是将<code>ACK</code>与<code>FIN</code>结合一起，如上图就是，只不过是发<code>FIN</code>请求时带上了<code>ACK</code>，但第一次还是发了<code>ACK</code>，才不会让对方以为没收到导致重发，这样才不会对网络造成阻塞。                                   <img src="https://yupeng-tuchuang.oss-cn-shenzhen.aliyuncs.com/image-20230109162455919.png" alt="image-20230109162455919"></p></li><li><p>第三次为<code>FIN </code>标记请求，这时<code>FIN</code>表示服务器收到我要断开连接的消息，那它也准备断开连接了，不再发送消息，那我也不必再接收了，于是我就完成挥手，原则上是可以断开了，但服务端还不知情，还是不能断开。这里要注意，其实第二次与第三次之间应该还是有很多次请求，这些请求是消息的发送和接收，不算入断开连接中的挥手，而且这些请求都跟第二次挥手以及本次挥手的<code>Acknowledgment number</code>相同。          <img src="https://yupeng-tuchuang.oss-cn-shenzhen.aliyuncs.com/image-20230109162521403.png" alt="image-20230109162521403"></p></li><li><p>第四次是<code>ACK</code>标记请求，就是我要告知<code>VMnet8</code>我已经完成挥手了，你可以断开了。<code>VMnet8</code>收到就可以立即断开，而我等待<code>2MSL</code>时间内没收到服务端重发包就可以断开。因为<code>MSL</code>即为包在网络中的最大生存时间，我发一次和对方未收到超时重发。<img src="https://yupeng-tuchuang.oss-cn-shenzhen.aliyuncs.com/image-20230109162541330.png" alt="image-20230109162541330"></p></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;三次握手&quot;&gt;&lt;a href=&quot;#三次握手&quot; class=&quot;headerlink&quot; title=&quot;三次握手&quot;&gt;&lt;/a&gt;三次握手&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;先&lt;code&gt;ping&lt;/code&gt;域名为&lt;a href=&quot;http://www.baidu.com，便于</summary>
      
    
    
    
    <category term="面经" scheme="http://fyupeng.github.io/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
    <category term="计算机网络面经" scheme="http://fyupeng.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>牛客必会SQL</title>
    <link href="http://fyupeng.github.io/2022/12/06/%E7%89%9B%E5%AE%A2%E5%BF%85%E4%BC%9ASQL/"/>
    <id>http://fyupeng.github.io/2022/12/06/%E7%89%9B%E5%AE%A2%E5%BF%85%E4%BC%9ASQL/</id>
    <published>2022-12-06T01:17:59.000Z</published>
    <updated>2022-12-06T01:19:27.466Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>牛客SQL</p></li><li><p><a href="#1-sql91-%E8%BF%94%E5%9B%9E%E8%B4%AD%E4%B9%B0%E4%BB%B7%E6%A0%BC%E4%B8%BA-10-%E7%BE%8E%E5%85%83%E6%88%96%E4%BB%A5%E4%B8%8A%E4%BA%A7%E5%93%81%E7%9A%84%E9%A1%BE%E5%AE%A2%E5%88%97%E8%A1%A8">1. <strong>SQL91</strong> <strong>返回购买价格为 10 美元或以上产品的顾客列表</strong></a></p><ul><li><a href="#%E6%8F%8F%E8%BF%B0">描述</a></li><li><a href="#%E7%A4%BA%E4%BE%8B1">示例1</a></li><li><a href="#%E8%A7%A3%E6%B3%951---%E5%86%85%E8%81%94">解法1 - 内联</a></li><li><a href="#%E8%A7%A3%E6%B3%952---%E5%AD%90%E6%9F%A5%E8%AF%A2">解法2 - 子查询</a></li></ul></li><li><p><a href="#2-sql92-%E7%A1%AE%E5%AE%9A%E5%93%AA%E4%BA%9B%E8%AE%A2%E5%8D%95%E8%B4%AD%E4%B9%B0%E4%BA%86-prod_id-%E4%B8%BA-br01-%E7%9A%84%E4%BA%A7%E5%93%81%E4%B8%80">2. <strong>SQL92</strong> <strong>确定哪些订单购买了 prod_id 为 BR01 的产品（一）</strong></a></p><ul><li><a href="#%E6%8F%8F%E8%BF%B0-1">描述</a></li><li><a href="#%E7%A4%BA%E4%BE%8B1-1">示例1</a></li><li><a href="#%E8%A7%A3%E6%B3%951---%E5%86%85%E8%81%94-1">解法1 - 内联</a></li><li><a href="#%E8%A7%A3%E6%B3%952---%E5%AD%90%E6%9F%A5%E8%AF%A2-1">解法2 - 子查询</a></li></ul></li><li><p><a href="#3-sql93-%E8%BF%94%E5%9B%9E%E8%B4%AD%E4%B9%B0-prod_id-%E4%B8%BA-br01-%E7%9A%84%E4%BA%A7%E5%93%81%E7%9A%84%E6%89%80%E6%9C%89%E9%A1%BE%E5%AE%A2%E7%9A%84%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6%E4%B8%80">3. <strong>SQL93</strong> <strong>返回购买 prod_id 为 BR01 的产品的所有顾客的电子邮件（一）</strong></a></p><ul><li><a href="#%E6%8F%8F%E8%BF%B0-2">描述</a></li><li><a href="#%E7%A4%BA%E4%BE%8B1-2">示例1</a></li><li><a href="#%E8%A7%A3%E6%B3%951">解法1</a></li><li><a href="#%E8%A7%A3%E6%B3%952">解法2</a></li></ul></li><li><p><a href="#4-sql94-%E8%BF%94%E5%9B%9E%E6%AF%8F%E4%B8%AA%E9%A1%BE%E5%AE%A2%E4%B8%8D%E5%90%8C%E8%AE%A2%E5%8D%95%E7%9A%84%E6%80%BB%E9%87%91%E9%A2%9D">4. <strong>SQL94</strong> <strong>返回每个顾客不同订单的总金额</strong></a></p><ul><li><a href="#%E6%8F%8F%E8%BF%B0-3">描述</a></li><li><a href="#%E7%A4%BA%E4%BE%8B1-3">示例1</a></li></ul></li><li><p><a href="#5-sql100-%E7%A1%AE%E5%AE%9A%E6%9C%80%E4%BD%B3%E9%A1%BE%E5%AE%A2%E7%9A%84%E5%8F%A6%E4%B8%80%E7%A7%8D%E6%96%B9%E5%BC%8F%E4%BA%8C">5. <strong>SQL100</strong> <strong>确定最佳顾客的另一种方式（二）</strong></a></p><ul><li><a href="#%E6%8F%8F%E8%BF%B0-4">描述</a></li><li><a href="#%E7%A4%BA%E4%BE%8B1-4">示例1</a></li><li><a href="#%E8%A7%A3%E6%B3%95">解法</a></li></ul></li><li><p><a href="#6-sql108-%E7%BB%84%E5%90%88-products-%E8%A1%A8%E4%B8%AD%E7%9A%84%E4%BA%A7%E5%93%81%E5%90%8D%E7%A7%B0%E5%92%8C-customers-%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%A1%BE%E5%AE%A2%E5%90%8D%E7%A7%B0">6. SQL108 组合 Products 表中的产品名称和 Customers 表中的顾客名称</a></p><ul><li><a href="#%E6%8F%8F%E8%BF%B0-5">描述</a></li><li><a href="#%E7%A4%BA%E4%BE%8B1-5">示例1</a></li><li><a href="#%E8%A7%A3%E6%B3%95-1">解法</a></li></ul></li></ul><h3 id="1-SQL91-返回购买价格为-10-美元或以上产品的顾客列表"><a href="#1-SQL91-返回购买价格为-10-美元或以上产品的顾客列表" class="headerlink" title="1. SQL91 返回购买价格为 10 美元或以上产品的顾客列表"></a>1. <strong>SQL91</strong> <strong>返回购买价格为 10 美元或以上产品的顾客列表</strong></h3><h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><p><code>OrderItems</code>表示订单商品表，含有字段订单号：<code>order_num</code>、订单价格：<code>item_price</code>；<code>Orders</code>表代表订单信息表，含有顾客<code>id</code>：<code>cust_id</code>和订单号：<code>order_num</code></p><p><code>OrderItems</code>表</p><table><thead><tr><th><code>order_num</code></th><th><code>item_price</code></th></tr></thead><tbody><tr><td><code>a1</code></td><td>10</td></tr><tr><td><code>a2</code></td><td>1</td></tr><tr><td><code>a2</code></td><td>1</td></tr><tr><td><code>a4</code></td><td>2</td></tr><tr><td><code>a5</code></td><td>5</td></tr><tr><td><code>a2</code></td><td>1</td></tr><tr><td><code>a7</code></td><td>7</td></tr></tbody></table><p>Orders表</p><table><thead><tr><th><code>order_num</code></th><th><code>cust_id</code></th></tr></thead><tbody><tr><td><code>a1</code></td><td><code>cust10</code></td></tr><tr><td><code>a2</code></td><td><code>cust1</code></td></tr><tr><td><code>a2</code></td><td><code>cust1</code></td></tr><tr><td><code>a4</code></td><td><code>cust2</code></td></tr><tr><td><code>a5</code></td><td><code>cust5</code></td></tr><tr><td><code>a2</code></td><td><code>cust1</code></td></tr><tr><td><code>a7</code></td><td><code>cust7</code></td></tr></tbody></table><p>【问题】使用子查询，返回购买价格为 10 美元或以上产品的顾客列表，结果无需排序。<br>注意：你需要使用 <code>OrderItems</code> 表查找匹配的订单号（<code>order_num</code>），然后使用Order 表检索这些匹配订单的顾客 ID（<code>cust_id</code>）。</p><p>【示例结果】返回顾客id <code>cust_id</code></p><table><thead><tr><th><code>cust_id</code></th></tr></thead><tbody><tr><td><code>cust10</code></td></tr></tbody></table><p>【示例解析】</p><p><code>cust10</code>顾客下单的订单为<code>a1</code>，<code>a1</code>的售出价格大于等于10</p><h4 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h4><p>输入：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `OrderItems`;</span><br><span class="line">  <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `OrderItems`(</span><br><span class="line">    order_num <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品订单号&#x27;</span>,</span><br><span class="line">    item_price <span class="type">INT</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;售出价格&#x27;</span></span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">INSERT</span> `OrderItems` <span class="keyword">VALUES</span> (<span class="string">&#x27;a1&#x27;</span>,<span class="number">10</span>),(<span class="string">&#x27;a2&#x27;</span>,<span class="number">1</span>),(<span class="string">&#x27;a2&#x27;</span>,<span class="number">1</span>),(<span class="string">&#x27;a4&#x27;</span>,<span class="number">2</span>),(<span class="string">&#x27;a5&#x27;</span>,<span class="number">5</span>),(<span class="string">&#x27;a2&#x27;</span>,<span class="number">1</span>),(<span class="string">&#x27;a7&#x27;</span>,<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `Orders`;</span><br><span class="line">  <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `Orders`(</span><br><span class="line">    order_num <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品订单号&#x27;</span>,</span><br><span class="line">    cust_id <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;顾客id&#x27;</span></span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">INSERT</span> `Orders` <span class="keyword">VALUES</span> (<span class="string">&#x27;a1&#x27;</span>,<span class="string">&#x27;cust10&#x27;</span>),(<span class="string">&#x27;a2&#x27;</span>,<span class="string">&#x27;cust1&#x27;</span>),(<span class="string">&#x27;a2&#x27;</span>,<span class="string">&#x27;cust1&#x27;</span>),(<span class="string">&#x27;a4&#x27;</span>,<span class="string">&#x27;cust2&#x27;</span>),(<span class="string">&#x27;a5&#x27;</span>,<span class="string">&#x27;cust5&#x27;</span>),(<span class="string">&#x27;a2&#x27;</span>,<span class="string">&#x27;cust1&#x27;</span>),(<span class="string">&#x27;a7&#x27;</span>,<span class="string">&#x27;cust7&#x27;</span>);</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cust10</span><br></pre></td></tr></table></figure><h4 id="解法1-内联"><a href="#解法1-内联" class="headerlink" title="解法1 - 内联"></a>解法1 - 内联</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> cust_id</span><br><span class="line"><span class="keyword">from</span> OrderItems oi</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> Orders o</span><br><span class="line"><span class="keyword">on</span> oi.order_num <span class="operator">=</span> o.order_num</span><br><span class="line"><span class="keyword">where</span> item_price <span class="operator">&gt;=</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><h4 id="解法2-子查询"><a href="#解法2-子查询" class="headerlink" title="解法2 - 子查询"></a>解法2 - 子查询</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> cust_id</span><br><span class="line"><span class="keyword">from</span> Orders</span><br><span class="line"><span class="keyword">where</span> order_num <span class="keyword">in</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">select</span> order_num</span><br><span class="line">    <span class="keyword">from</span> OrderItems</span><br><span class="line">    <span class="keyword">where</span> item_price <span class="operator">&gt;=</span> <span class="number">10</span></span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>数据量大的情况下，使用连接查询效率更高，因为子查询相当于for循环，要执行多次子查询，而连接只需要查询一次;</p></li><li><p>数据量小的情况下，子查询更容易控制和操作。</p></li></ul><h3 id="2-SQL92-确定哪些订单购买了-prod-id-为-BR01-的产品（一）"><a href="#2-SQL92-确定哪些订单购买了-prod-id-为-BR01-的产品（一）" class="headerlink" title="2. SQL92 确定哪些订单购买了 prod_id 为 BR01 的产品（一）"></a>2. <strong>SQL92</strong> <strong>确定哪些订单购买了 prod_id 为 BR01 的产品（一）</strong></h3><h4 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h4><p>表<code>OrderItems</code>代表订单商品信息表，<code>prod_id</code>为产品<code>id</code>；<code>Orders</code>表代表订单表有<code>cust_id</code>代表顾客id和订单日期<code>order_date</code></p><p><code>OrderItems</code>表</p><table><thead><tr><th><code>prod_id</code></th><th><code>order_num</code></th></tr></thead><tbody><tr><td><code>BR01</code></td><td><code>a0001</code></td></tr><tr><td><code>BR01</code></td><td><code>a0002</code></td></tr><tr><td><code>BR02</code></td><td><code>a0003</code></td></tr><tr><td>BR02</td><td><code>a0013</code></td></tr></tbody></table><p><code>Orders</code>表</p><table><thead><tr><th><code>order_num</code></th><th><code>cust_id</code></th><th><code>order_date</code></th></tr></thead><tbody><tr><td><code>a0001</code></td><td><code>cust10</code></td><td><code>2022-01-01 00:00:00</code></td></tr><tr><td><code>a0002</code></td><td><code>cust1</code></td><td><code>2022-01-01 00:01:00</code></td></tr><tr><td><code>a0003</code></td><td><code>cust1</code></td><td><code>2022-01-02 00:00:00</code></td></tr><tr><td><code>a0013</code></td><td><code>cust2</code></td><td><code>2022-01-01 00:20:00</code></td></tr></tbody></table><p>【问题】</p><p>编写 <code>SQL</code> 语句，使用子查询来确定哪些订单（在 <code>OrderItems</code> 中）购买了 <code>prod_id</code> 为 “<code>BR01</code>“ 的产品，然后从 <code>Orders</code> 表中返回每个产品对应的顾客 <code>ID</code>（<code>cust_id</code>）和订单日期（<code>order_date</code>），按订购日期对结果进行升序排序。</p><p>【示例结果】返回顾客<code>id</code> <code>cust_id</code>和定单日期<code>order_date</code>。</p><table><thead><tr><th><code>cust_id</code></th><th><code>order_date</code></th></tr></thead><tbody><tr><td><code>cust10</code></td><td><code>2022-01-01 00:00:00</code></td></tr><tr><td><code>cust1</code></td><td><code>2022-01-01 00:01:00</code></td></tr></tbody></table><p>【示例解析】 </p><p>产品id为”<code>BR01</code>“的订单<code>a0001</code>和<code>a002</code>的下单顾客<code>cust10</code>和<code>cust1</code>的下单时间分别为<code>2022-01-01 00:00:00</code>和<code>2022-01-01 00:01:00</code></p><h4 id="示例1-1"><a href="#示例1-1" class="headerlink" title="示例1"></a>示例1</h4><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE IF EXISTS `OrderItems`;</span><br><span class="line">  CREATE TABLE IF NOT EXISTS `OrderItems`(</span><br><span class="line">    prod_id VARCHAR(255) NOT NULL COMMENT &#x27;产品id&#x27;,</span><br><span class="line">    order_num VARCHAR(255) NOT NULL COMMENT &#x27;商品订单号&#x27;</span><br><span class="line">  );</span><br><span class="line">  INSERT `OrderItems` VALUES (&#x27;BR01&#x27;,&#x27;a0001&#x27;),(&#x27;BR01&#x27;,&#x27;a0002&#x27;),(&#x27;BR02&#x27;,&#x27;a0003&#x27;),(&#x27;BR02&#x27;,&#x27;a0013&#x27;);</span><br><span class="line"></span><br><span class="line">  DROP TABLE IF EXISTS `Orders`;</span><br><span class="line">  CREATE TABLE IF NOT EXISTS `Orders`(</span><br><span class="line">    order_num VARCHAR(255) NOT NULL COMMENT &#x27;商品订单号&#x27;,</span><br><span class="line">    cust_id VARCHAR(255) NOT NULL COMMENT &#x27;顾客id&#x27;,</span><br><span class="line">    order_date TIMESTAMP NOT NULL COMMENT &#x27;下单时间&#x27;</span><br><span class="line">  );</span><br><span class="line">  INSERT `Orders` VALUES (&#x27;a0001&#x27;,&#x27;cust10&#x27;,&#x27;2022-01-01 00:00:00&#x27;),(&#x27;a0002&#x27;,&#x27;cust1&#x27;,&#x27;2022-01-01 00:01:00&#x27;),(&#x27;a0003&#x27;,&#x27;cust1&#x27;,&#x27;2022-01-02 00:00:00&#x27;),(&#x27;a0013&#x27;,&#x27;cust2&#x27;,&#x27;2022-01-01 00:20:00&#x27;);</span><br></pre></td></tr></table></figure><p>复制</p><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cust10|2022-01-01 00:00:00</span><br><span class="line">cust1|2022-01-01 00:01:00</span><br></pre></td></tr></table></figure><h4 id="解法1-内联-1"><a href="#解法1-内联-1" class="headerlink" title="解法1 - 内联"></a>解法1 - 内联</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> cust_id, order_date</span><br><span class="line"><span class="keyword">from</span> OrderItems oi</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span></span><br><span class="line">Orders o</span><br><span class="line"><span class="keyword">on</span> oi.order_num <span class="operator">=</span> o.order_num</span><br><span class="line"><span class="keyword">where</span> prod_id <span class="operator">=</span> <span class="string">&#x27;BR01&#x27;</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> order_date</span><br></pre></td></tr></table></figure><h4 id="解法2-子查询-1"><a href="#解法2-子查询-1" class="headerlink" title="解法2 - 子查询"></a>解法2 - 子查询</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> cust_id, order_date</span><br><span class="line"><span class="keyword">from</span> Orders</span><br><span class="line"><span class="keyword">where</span> order_num <span class="keyword">in</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">select</span> order_num</span><br><span class="line">    <span class="keyword">from</span> OrderItems</span><br><span class="line">    <span class="keyword">where</span> prod_id <span class="operator">=</span> <span class="string">&#x27;BR01&#x27;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> order_date</span><br></pre></td></tr></table></figure><h3 id="3-SQL93-返回购买-prod-id-为-BR01-的产品的所有顾客的电子邮件（一）"><a href="#3-SQL93-返回购买-prod-id-为-BR01-的产品的所有顾客的电子邮件（一）" class="headerlink" title="3. SQL93 返回购买 prod_id 为 BR01 的产品的所有顾客的电子邮件（一）"></a>3. <strong>SQL93</strong> <strong>返回购买 prod_id 为 BR01 的产品的所有顾客的电子邮件（一）</strong></h3><h4 id="描述-2"><a href="#描述-2" class="headerlink" title="描述"></a>描述</h4><p>你想知道订购 <code>BR01</code> 产品的日期，有表<code>OrderItems</code>代表订单商品信息表，<code>prod_id</code>为产品<code>id</code>；<code>Orders</code>表代表订单表有<code>cust_id</code>代表顾客<code>id</code>和订单日期<code>order_date</code>；<code>Customers</code>表含有<code>cust_email</code> 顾客邮件和<code>cust_id</code>顾客<code>id</code></p><p><code>OrderItems</code>表</p><table><thead><tr><th><code>prod_id</code></th><th><code>order_num</code></th></tr></thead><tbody><tr><td><code>BR01</code></td><td><code>a0001</code></td></tr><tr><td><code>BR01</code></td><td><code>a0002</code></td></tr><tr><td><code>BR02</code></td><td><code>a0003</code></td></tr><tr><td><code>BR02</code></td><td><code>a0013</code></td></tr></tbody></table><p><code>Orders</code>表</p><table><thead><tr><th><code>order_num</code></th><th><code>cust_id</code></th><th><code>order_date</code></th></tr></thead><tbody><tr><td><code>a0001</code></td><td><code>cust10</code></td><td><code>2022-01-01 00:00:00</code></td></tr><tr><td><code>a0002</code></td><td><code>cust1</code></td><td><code>2022-01-01 00:01:00</code></td></tr><tr><td><code>a0003</code></td><td><code>cust1</code></td><td><code>2022-01-02 00:00:00</code></td></tr><tr><td><code>a0013</code></td><td><code>cust2</code></td><td><code>2022-01-01 00:20:00</code></td></tr></tbody></table><p><code>Customers</code>表代表顾客信息，<code>cust_id</code>为顾客<code>id</code>，<code>cust_email</code>为顾客<code>email</code></p><table><thead><tr><th><code>cust_id</code></th><th><code>cust_email</code></th></tr></thead><tbody><tr><td><code>cust10</code></td><td><code>cust10@cust.com</code></td></tr><tr><td><code>cust1</code></td><td><code>cust1@cust.com</code></td></tr><tr><td><code>cust2</code></td><td><code>cust2@cust.com</code></td></tr></tbody></table><p>【问题】返回购买 <code>prod_id</code> 为<code>BR01</code> 的产品的所有顾客的电子邮件（<code>Customers</code> 表中的 <code>cust_email</code>），结果无需排序。</p><p>提示：这涉及 <code>SELECT</code> 语句，最内层的从 <code>OrderItems</code> 表返回 <code>order_num</code>，中间的从 <code>Customers</code> 表返回 <code>cust_id</code>。</p><p>【示例结果】</p><p>返回顾客<code>email</code> <code>cust_email</code></p><table><thead><tr><th><code>cust_email</code></th></tr></thead><tbody><tr><td><code>cust10@cust.com</code></td></tr><tr><td><code>cust1@cust.com</code></td></tr></tbody></table><p>`【示例解析】 </p><p>产品id为<code>BR01</code>的订单<code>a0001</code>和<code>a002</code>的下单顾客<code>cust10</code>和<code>cust1</code>的顾客<code>email</code> <code>cust_email</code>分别是：<a href="mailto:&#99;&#x75;&#x73;&#x74;&#49;&#48;&#x40;&#99;&#117;&#115;&#x74;&#46;&#x63;&#x6f;&#109;">&#99;&#x75;&#x73;&#x74;&#49;&#48;&#x40;&#99;&#117;&#115;&#x74;&#46;&#x63;&#x6f;&#109;</a> 、<a href="mailto:&#99;&#117;&#115;&#116;&#x31;&#64;&#x63;&#x75;&#115;&#116;&#46;&#x63;&#111;&#109;">&#99;&#117;&#115;&#116;&#x31;&#64;&#x63;&#x75;&#115;&#116;&#46;&#x63;&#111;&#109;</a></p><h4 id="示例1-2"><a href="#示例1-2" class="headerlink" title="示例1"></a>示例1</h4><p>输入：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `OrderItems`;</span><br><span class="line">  <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `OrderItems`(</span><br><span class="line">    prod_id <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;产品id&#x27;</span>,</span><br><span class="line">    order_num <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品订单号&#x27;</span></span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">INSERT</span> `OrderItems` <span class="keyword">VALUES</span> (<span class="string">&#x27;BR01&#x27;</span>,<span class="string">&#x27;a0001&#x27;</span>),(<span class="string">&#x27;BR01&#x27;</span>,<span class="string">&#x27;a0002&#x27;</span>),(<span class="string">&#x27;BR02&#x27;</span>,<span class="string">&#x27;a0003&#x27;</span>),(<span class="string">&#x27;BR02&#x27;</span>,<span class="string">&#x27;a0013&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `Orders`;</span><br><span class="line">  <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `Orders`(</span><br><span class="line">    order_num <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品订单号&#x27;</span>,</span><br><span class="line">    cust_id <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;顾客id&#x27;</span>,</span><br><span class="line">    order_date <span class="type">TIMESTAMP</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;下单时间&#x27;</span></span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">INSERT</span> `Orders` <span class="keyword">VALUES</span> (<span class="string">&#x27;a0001&#x27;</span>,<span class="string">&#x27;cust10&#x27;</span>,<span class="string">&#x27;2022-01-01 00:00:00&#x27;</span>),(<span class="string">&#x27;a0002&#x27;</span>,<span class="string">&#x27;cust1&#x27;</span>,<span class="string">&#x27;2022-01-01 00:01:00&#x27;</span>),(<span class="string">&#x27;a0003&#x27;</span>,<span class="string">&#x27;cust1&#x27;</span>,<span class="string">&#x27;2022-01-02 00:00:00&#x27;</span>),(<span class="string">&#x27;a0013&#x27;</span>,<span class="string">&#x27;cust2&#x27;</span>,<span class="string">&#x27;2022-01-01 00:20:00&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `Customers`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `Customers`(</span><br><span class="line">    cust_id <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;顾客id&#x27;</span>,</span><br><span class="line">    cust_email <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;顾客email&#x27;</span></span><br><span class="line">  );</span><br><span class="line"><span class="keyword">INSERT</span> `Customers` <span class="keyword">VALUES</span> (<span class="string">&#x27;cust10&#x27;</span>,<span class="string">&#x27;cust10@cust.com&#x27;</span>),(<span class="string">&#x27;cust1&#x27;</span>,<span class="string">&#x27;cust1@cust.com&#x27;</span>),(<span class="string">&#x27;cust2&#x27;</span>,<span class="string">&#x27;cust2@cust.com&#x27;</span>);</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cust10<span class="variable">@cust</span>.com</span><br><span class="line">cust1<span class="variable">@cust</span>.com</span><br></pre></td></tr></table></figure><h4 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> cust_email</span><br><span class="line"><span class="keyword">from</span> OrderItems oi</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> Orders o</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> Customers c</span><br><span class="line"><span class="keyword">on</span> oi.order_num <span class="operator">=</span> o.order_num <span class="keyword">and</span></span><br><span class="line">o.cust_id <span class="operator">=</span> c.cust_id</span><br><span class="line"><span class="keyword">where</span> prod_id <span class="operator">=</span> <span class="string">&#x27;BR01&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="解法2"><a href="#解法2" class="headerlink" title="解法2"></a>解法2</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> cust_email</span><br><span class="line"><span class="keyword">from</span> Customers</span><br><span class="line"><span class="keyword">where</span> cust_id <span class="keyword">in</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">select</span> cust_id</span><br><span class="line">    <span class="keyword">from</span> Orders</span><br><span class="line">    <span class="keyword">where</span> order_num <span class="keyword">in</span></span><br><span class="line">    (</span><br><span class="line">        <span class="keyword">select</span> order_num</span><br><span class="line">        <span class="keyword">from</span> OrderItems</span><br><span class="line">        <span class="keyword">where</span> prod_id <span class="operator">=</span> <span class="string">&#x27;BR01&#x27;</span></span><br><span class="line">    )</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="4-SQL94-返回每个顾客不同订单的总金额"><a href="#4-SQL94-返回每个顾客不同订单的总金额" class="headerlink" title="4. SQL94 返回每个顾客不同订单的总金额"></a>4. <strong>SQL94</strong> <strong>返回每个顾客不同订单的总金额</strong></h3><h4 id="描述-3"><a href="#描述-3" class="headerlink" title="描述"></a>描述</h4><p>我们需要一个顾客 <code>ID</code> 列表，其中包含他们已订购的总金额。</p><p><code>OrderItems</code>表代表订单信息，<code>OrderItems</code>表有订单号：<code>order_num</code>和商品售出价格：<code>item_price</code>、商品数量：<code>quantity</code>。</p><table><thead><tr><th><code>order_num</code></th><th><code>item_price</code></th><th><code>quantity</code></th></tr></thead><tbody><tr><td><code>a0001</code></td><td><code>10</code></td><td><code>105</code></td></tr><tr><td><code>a0002</code></td><td><code>1</code></td><td><code>1100</code></td></tr><tr><td><code>a0002</code></td><td><code>1</code></td><td><code>200</code></td></tr><tr><td><code>a0013</code></td><td><code>2</code></td><td><code>1121</code></td></tr><tr><td><code>a0003</code></td><td><code>5</code></td><td><code>10</code></td></tr><tr><td><code>a0003</code></td><td><code>1</code></td><td><code>19</code></td></tr><tr><td><code>a0003</code></td><td><code>7</code></td><td><code>5</code></td></tr></tbody></table><p><code>Orders</code>表订单号：<code>order_num</code>、顾客<code>id</code>：<code>cust_id</code></p><table><thead><tr><th><code>order_num</code></th><th><code>cust_id</code></th></tr></thead><tbody><tr><td><code>a0001</code></td><td><code>cust10</code></td></tr><tr><td><code>a0002</code></td><td><code>cust1</code></td></tr><tr><td><code>a0003</code></td><td><code>cust1</code></td></tr><tr><td><code>a0013</code></td><td><code>cust2</code></td></tr></tbody></table><p>【问题】</p><p>编写 <code>SQL</code>语句，返回顾客 <code>ID</code>（<code>Orders</code> 表中的 <code>cust_id</code>），并使用子查询返回<code>total_ordered</code> 以便返回每个顾客的订单总数，将结果按金额从大到小排序。</p><p>提示：你之前已经使用 <code>SUM()</code>计算订单总数。</p><p>【示例结果】返回顾客<code>id</code> <code>cust_id</code>和<code>total_order</code>下单总额</p><table><thead><tr><th><code>cust_id</code></th><th><code>total_ordered</code></th></tr></thead><tbody><tr><td><code>cust2</code></td><td><code>2242</code></td></tr><tr><td><code>cust1</code></td><td><code>1300</code></td></tr><tr><td><code>cust10</code></td><td><code>1050</code></td></tr><tr><td><code>cust2</code></td><td><code>104</code></td></tr></tbody></table><p>【示例解析】cust2在Orders里面的订单a0013，a0013的售出价格是2售出数量是1121，总额是2242，最后返回cust2的支付总额是2242。</p><h4 id="示例1-3"><a href="#示例1-3" class="headerlink" title="示例1"></a>示例1</h4><p>输入：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `OrderItems`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `OrderItems`(</span><br><span class="line">order_num <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品订单号&#x27;</span>,</span><br><span class="line">item_price <span class="type">INT</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;售出价格&#x27;</span>,</span><br><span class="line">quantity <span class="type">INT</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品数量&#x27;</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> `OrderItems` <span class="keyword">VALUES</span> (<span class="string">&#x27;a0001&#x27;</span>,<span class="number">10</span>,<span class="number">105</span>),(<span class="string">&#x27;a0002&#x27;</span>,<span class="number">1</span>,<span class="number">1100</span>),(<span class="string">&#x27;a0002&#x27;</span>,<span class="number">1</span>,<span class="number">200</span>),(<span class="string">&#x27;a0013&#x27;</span>,<span class="number">2</span>,<span class="number">1121</span>),(<span class="string">&#x27;a0003&#x27;</span>,<span class="number">5</span>,<span class="number">10</span>),(<span class="string">&#x27;a0003&#x27;</span>,<span class="number">1</span>,<span class="number">19</span>),(<span class="string">&#x27;a0003&#x27;</span>,<span class="number">7</span>,<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `Orders`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `Orders`(</span><br><span class="line">  order_num <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品订单号&#x27;</span>,</span><br><span class="line">  cust_id <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;顾客id&#x27;</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> `Orders` <span class="keyword">VALUES</span> (<span class="string">&#x27;a0001&#x27;</span>,<span class="string">&#x27;cust10&#x27;</span>),(<span class="string">&#x27;a0003&#x27;</span>,<span class="string">&#x27;cust1&#x27;</span>),(<span class="string">&#x27;a0013&#x27;</span>,<span class="string">&#x27;cust2&#x27;</span>);</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cust2<span class="operator">|</span><span class="number">2242.000</span></span><br><span class="line">cust10<span class="operator">|</span><span class="number">1050.000</span></span><br><span class="line">cust1<span class="operator">|</span><span class="number">104.000</span></span><br></pre></td></tr></table></figure><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> cust_id, <span class="built_in">sum</span>(item_price <span class="operator">*</span> quantity) <span class="keyword">as</span> total_ordered</span><br><span class="line"><span class="keyword">from</span> OrderItems oi</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> Orders o</span><br><span class="line"><span class="keyword">on</span> oi.order_num <span class="operator">=</span> o.order_num</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> cust_id</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="built_in">sum</span>(item_price <span class="operator">*</span> quantity) <span class="keyword">desc</span></span><br></pre></td></tr></table></figure><h3 id="5-SQL100-确定最佳顾客的另一种方式（二）"><a href="#5-SQL100-确定最佳顾客的另一种方式（二）" class="headerlink" title="5. SQL100 确定最佳顾客的另一种方式（二）"></a>5. <strong>SQL100</strong> <strong>确定最佳顾客的另一种方式（二）</strong></h3><h4 id="描述-4"><a href="#描述-4" class="headerlink" title="描述"></a>描述</h4><p><code>OrderItems</code>表代表订单信息，确定最佳顾客的另一种方式是看他们花了多少钱，<code>OrderItems</code>表有订单号<code>order_num</code>和<code>item_price</code>商品售出价格、<code>quantity</code>商品数量</p><table><thead><tr><th><code>order_num</code></th><th><code>item_price</code></th><th><code>quantity</code></th></tr></thead><tbody><tr><td><code>a1</code></td><td><code>10</code></td><td><code>105</code></td></tr><tr><td><code>a2</code></td><td><code>1</code></td><td><code>1100</code></td></tr><tr><td><code>a2</code></td><td><code>1</code></td><td><code>200</code></td></tr><tr><td><code>a4</code></td><td><code>2</code></td><td><code>1121</code></td></tr><tr><td><code>a5</code></td><td><code>5</code></td><td><code>10</code></td></tr><tr><td><code>a2</code></td><td><code>1</code></td><td><code>19</code></td></tr><tr><td><code>a7</code></td><td><code>7</code></td><td><code>5</code></td></tr></tbody></table><p><code>Orders</code>表含有字段<code>order_num</code> 订单号、<code>cust_id</code>顾客id</p><table><thead><tr><th><code>order_num</code></th><th><code>cust_id</code></th></tr></thead><tbody><tr><td><code>a1</code></td><td><code>cust10</code></td></tr><tr><td><code>a2</code></td><td><code>cust1</code></td></tr><tr><td><code>a3</code></td><td><code>cust2</code></td></tr><tr><td><code>a4</code></td><td><code>cust22</code></td></tr><tr><td><code>a5</code></td><td><code>cust221</code></td></tr><tr><td><code>a7</code></td><td><code>cust2217</code></td></tr></tbody></table><p>顾客表<code>Customers</code>有字段<code>cust_id</code> 客户<code>id</code>、<code>cust_name</code> 客户姓名</p><table><thead><tr><th><code>cust_id</code></th><th><code>cust_name</code></th></tr></thead><tbody><tr><td><code>cust10</code></td><td><code>andy</code></td></tr><tr><td><code>cust1</code></td><td><code>ben</code></td></tr><tr><td><code>cust2</code></td><td><code>tony</code></td></tr><tr><td><code>cust22</code></td><td><code>tom</code></td></tr><tr><td><code>cust221</code></td><td><code>an</code></td></tr><tr><td><code>cust2217</code></td><td><code>hex</code></td></tr></tbody></table><p>【问题】编写 <code>SQL</code> 语句，返回订单总价不小于<code>1000</code> 的客户名称和总额（<code>OrderItems</code> 表中的<code>order_num</code>）。</p><p>提示：需要计算总和（<code>item_price</code> 乘以 <code>quantity</code>）。按总额对结果进行排序，请使用<code>INNER</code> <code>JOIN</code> 语法。</p><p>【示例结果】</p><table><thead><tr><th><code>cust_name</code></th><th><code>total_price</code></th></tr></thead><tbody><tr><td><code>andy</code></td><td><code>1050</code></td></tr><tr><td><code>ben</code></td><td><code>1319</code></td></tr><tr><td><code>tom</code></td><td><code>2242</code></td></tr></tbody></table><p>【示例解析】</p><p>总额（<code>item_price</code> 乘以 <code>quantity</code>）大于等于<code>1000</code>的订单号，例如<code>a2</code>对应的顾客id为<code>cust1</code>，<code>cust1</code>的顾客名称<code>cust_name</code>是<code>ben</code>，最后返回<code>ben</code>作为<code>order_num</code> <code>a2</code>的<code>quantity</code> * <code>item_price</code>总和的结果<code>1319</code>。</p><h4 id="示例1-4"><a href="#示例1-4" class="headerlink" title="示例1"></a>示例1</h4><p>输入：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `OrderItems`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `OrderItems`(</span><br><span class="line">order_num <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品订单号&#x27;</span>,</span><br><span class="line">item_price <span class="type">INT</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;售出价格&#x27;</span>,</span><br><span class="line">quantity <span class="type">INT</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品数量&#x27;</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> `OrderItems` <span class="keyword">VALUES</span> (<span class="string">&#x27;a1&#x27;</span>,<span class="number">10</span>,<span class="number">105</span>),(<span class="string">&#x27;a2&#x27;</span>,<span class="number">1</span>,<span class="number">1100</span>),(<span class="string">&#x27;a2&#x27;</span>,<span class="number">1</span>,<span class="number">200</span>),(<span class="string">&#x27;a4&#x27;</span>,<span class="number">2</span>,<span class="number">1121</span>),(<span class="string">&#x27;a5&#x27;</span>,<span class="number">5</span>,<span class="number">10</span>),(<span class="string">&#x27;a2&#x27;</span>,<span class="number">1</span>,<span class="number">19</span>),(<span class="string">&#x27;a7&#x27;</span>,<span class="number">7</span>,<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `Customers`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `Customers`(</span><br><span class="line">cust_id <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;客户id&#x27;</span>,</span><br><span class="line">cust_name <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;客户姓名&#x27;</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> `Customers` <span class="keyword">VALUES</span> (<span class="string">&#x27;cust10&#x27;</span>,<span class="string">&#x27;andy&#x27;</span>),(<span class="string">&#x27;cust1&#x27;</span>,<span class="string">&#x27;ben&#x27;</span>),(<span class="string">&#x27;cust2&#x27;</span>,<span class="string">&#x27;tony&#x27;</span>),(<span class="string">&#x27;cust22&#x27;</span>,<span class="string">&#x27;tom&#x27;</span>),(<span class="string">&#x27;cust221&#x27;</span>,<span class="string">&#x27;an&#x27;</span>),(<span class="string">&#x27;cust2217&#x27;</span>,<span class="string">&#x27;hex&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `Orders`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `Orders`(</span><br><span class="line">  order_num <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品订单号&#x27;</span>,</span><br><span class="line">  cust_id <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;顾客id&#x27;</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> `Orders` <span class="keyword">VALUES</span> (<span class="string">&#x27;a1&#x27;</span>,<span class="string">&#x27;cust10&#x27;</span>),(<span class="string">&#x27;a2&#x27;</span>,<span class="string">&#x27;cust1&#x27;</span>),(<span class="string">&#x27;a3&#x27;</span>,<span class="string">&#x27;cust2&#x27;</span>),(<span class="string">&#x27;a4&#x27;</span>,<span class="string">&#x27;cust22&#x27;</span>),(<span class="string">&#x27;a5&#x27;</span>,<span class="string">&#x27;cust221&#x27;</span>),(<span class="string">&#x27;a7&#x27;</span>,<span class="string">&#x27;cust2217&#x27;</span>);</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">andy<span class="operator">|</span><span class="number">1050.000</span></span><br><span class="line">ben<span class="operator">|</span><span class="number">1319.000</span></span><br><span class="line">tom<span class="operator">|</span><span class="number">2242.000</span></span><br></pre></td></tr></table></figure><h4 id="解法-1"><a href="#解法-1" class="headerlink" title="解法"></a>解法</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> cust_name, <span class="built_in">sum</span>(item_price <span class="operator">*</span> quantity) <span class="keyword">as</span> total_price</span><br><span class="line"><span class="keyword">from</span> OrderItems oi</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> Orders o</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> Customers c</span><br><span class="line"><span class="keyword">on</span> oi.order_num <span class="operator">=</span> o.order_num</span><br><span class="line"><span class="keyword">and</span> o.cust_id <span class="operator">=</span> c.cust_id</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> cust_name</span><br><span class="line"><span class="keyword">having</span> <span class="built_in">sum</span>(item_price <span class="operator">*</span> quantity) <span class="operator">&gt;=</span> <span class="number">1000</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> total_price</span><br></pre></td></tr></table></figure><h3 id="6-SQL108-组合-Products-表中的产品名称和-Customers-表中的顾客名称"><a href="#6-SQL108-组合-Products-表中的产品名称和-Customers-表中的顾客名称" class="headerlink" title="6. SQL108 组合 Products 表中的产品名称和 Customers 表中的顾客名称"></a>6. SQL108 组合 Products 表中的产品名称和 Customers 表中的顾客名称</h3><h4 id="描述-5"><a href="#描述-5" class="headerlink" title="描述"></a>描述</h4><p><code>Products</code>表含有字段<code>prod_name</code>代表产品名称</p><table><thead><tr><th><code>prod_name</code></th></tr></thead><tbody><tr><td><code>flower</code></td></tr><tr><td><code>rice</code></td></tr><tr><td><code>ring</code></td></tr><tr><td><code>umbrella</code></td></tr></tbody></table><p><code>Customers</code>表代表顾客信息，<code>cust_name</code>代表顾客名称</p><table><thead><tr><th><code>cust_name</code></th></tr></thead><tbody><tr><td><code>andy</code></td></tr><tr><td><code>ben</code></td></tr><tr><td><code>tony</code></td></tr><tr><td><code>tom</code></td></tr><tr><td><code>an</code></td></tr><tr><td><code>lee</code></td></tr><tr><td><code>hex</code></td></tr></tbody></table><p>【问题】</p><p>编写 <code>SQL</code> 语句，组合 <code>Products</code> 表中的产品名称（<code>prod_name</code>）和 <code>Customers</code> 表中的顾客名称（<code>cust_name</code>）并返回，然后按产品名称对结果进行升序排序。</p><p>【示例结果】</p><table><thead><tr><th><code>prod_name</code></th></tr></thead><tbody><tr><td><code>an</code></td></tr><tr><td><code>andy</code></td></tr><tr><td><code>ben</code></td></tr><tr><td><code>flower</code></td></tr><tr><td><code>hex</code></td></tr><tr><td><code>lee</code></td></tr><tr><td><code>rice</code></td></tr><tr><td><code>ring</code></td></tr><tr><td><code>tom</code></td></tr><tr><td><code>tony</code></td></tr><tr><td><code>umbrella</code></td></tr></tbody></table><p>【示例解析】</p><p>拼接<code>cust_name</code>和<code>prod_name</code>并根据结果升序排序</p><h4 id="示例1-5"><a href="#示例1-5" class="headerlink" title="示例1"></a>示例1</h4><p>输入：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `Products`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `Products` (</span><br><span class="line">`prod_name` <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;产品名称&#x27;</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `Products` <span class="keyword">VALUES</span> (<span class="string">&#x27;flower&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;rice&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;ring&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;umbrella&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `Customers`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `Customers`(</span><br><span class="line">cust_name <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;客户姓名&#x27;</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> `Customers` <span class="keyword">VALUES</span> (<span class="string">&#x27;andy&#x27;</span>),(<span class="string">&#x27;ben&#x27;</span>),(<span class="string">&#x27;tony&#x27;</span>),(<span class="string">&#x27;tom&#x27;</span>),(<span class="string">&#x27;an&#x27;</span>),(<span class="string">&#x27;lee&#x27;</span>),(<span class="string">&#x27;hex&#x27;</span>);</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">an</span><br><span class="line">andy</span><br><span class="line">ben</span><br><span class="line">flower</span><br><span class="line">hex</span><br><span class="line">lee</span><br><span class="line">rice</span><br><span class="line">ring</span><br><span class="line">tom</span><br><span class="line">tony</span><br><span class="line">umbrella</span><br></pre></td></tr></table></figure><h4 id="解法-2"><a href="#解法-2" class="headerlink" title="解法"></a>解法</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> prod_name</span><br><span class="line"><span class="keyword">from</span> Products</span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> cust_name <span class="keyword">as</span> prod_name</span><br><span class="line"><span class="keyword">from</span> Customers</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> prod_name</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;牛客SQL&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#1-sql91-%E8%BF%94%E5%9B%9E%E8%B4%AD%E4%B9%B0%E4%BB%B7%E6%A0%BC%E4%B8%BA-10-%E7%BE%8E%E5%85%83%E</summary>
      
    
    
    
    
    <category term="SQL基础" scheme="http://fyupeng.github.io/tags/SQL%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>腾讯一面</title>
    <link href="http://fyupeng.github.io/2022/11/29/%E8%85%BE%E8%AE%AF%E4%B8%80%E9%9D%A2/"/>
    <id>http://fyupeng.github.io/2022/11/29/%E8%85%BE%E8%AE%AF%E4%B8%80%E9%9D%A2/</id>
    <published>2022-11-29T13:08:12.000Z</published>
    <updated>2022-11-29T13:10:20.156Z</updated>
    
    <content type="html"><![CDATA[<p>自我介绍这里一笔带过，给对面介绍自己内在 + 外在 + 校园经历 + 校园项目  + 意向岗位</p><p>腾讯子公司云智研发一面</p><h3 id="1-有了解过C-吗？接受转语言吗？"><a href="#1-有了解过C-吗？接受转语言吗？" class="headerlink" title="1. 有了解过C++吗？接受转语言吗？"></a>1. 有了解过C++吗？接受转语言吗？</h3><h3 id="2-有没有了解过一些框架的底层原理、底层优化、数据库的索引优化"><a href="#2-有没有了解过一些框架的底层原理、底层优化、数据库的索引优化" class="headerlink" title="2. 有没有了解过一些框架的底层原理、底层优化、数据库的索引优化"></a>2. 有没有了解过一些框架的底层原理、底层优化、数据库的索引优化</h3><h3 id="3-了解过哪些Map，可以从底层简单说下嘛？"><a href="#3-了解过哪些Map，可以从底层简单说下嘛？" class="headerlink" title="3. 了解过哪些Map，可以从底层简单说下嘛？"></a>3. 了解过哪些Map，可以从底层简单说下嘛？</h3><p>比如我最常使用的有<code>HashMap</code>、<code>HashTable</code>、<code>CurrentHashMap</code>这三种</p><p><code>HashMap</code>它的底层是采用了数组+链表的数据结构</p><p>从源码中分析，<code>HashMap</code>有一个静态内部类<code>Node</code>，<code>HashMap</code>通过成员变量<code>table</code>（<code>Node</code>数组类型）来采取<code>put</code>和<code>get</code>操作，该成员变量用关键字<code>transient</code>加以修饰，表明禁止序列化。</p><p>而<code>Node</code>是<code>table</code>数组的一个结点，内部成员数据有<code>hash</code>、<code>key</code>、<code>value</code>和指向<code>Node</code>类的<code>next</code></p><blockquote><p>– 初始化阶段 –</p></blockquote><p>在这里，<code>put</code>操作后，<code>table</code>会先调用<code>resize</code>方法进行扩展，扩展后<code>table</code>才从<code>null</code>变为<code>16</code>位的<code>Node</code>数组，初始化后的每一个下标依旧为<code>null</code>，并且初始化阈值<code>threshold</code>，默认为<code>0.75 * size</code>,作用是与成员变量<code>size</code>（成员变量<code>size</code>会在每次<code>put</code>而且要该<code>key</code>值为首次操作即不存在该<code>Map</code>中会自增）进行比较，如果<code>size</code>数即表明<code>put</code>的<code>key-value</code>对的数量超过阈值<code>threshold</code>，进行下一步操作，即<code>resize</code>方法另一作用。</p><blockquote><p>– 扩容阶段 –</p></blockquote><p>扩容阶段更简单，就是将<code>阈值*2</code>来扩容，然后遍历整个<code>table</code>即<code>Node</code>数组，如果发现有<code>Node</code>结点，那么这里就出现了两种情况，第一种为每个结点上是链表结构，另一种则是红黑树结构。</p><p>扩容操作是创建新<code>table</code>来扩容，没有在旧<code>table</code>上直接扩容，遍历旧<code>table</code>进行扩容时，将会对每个<code>table</code>槽位置空，多线程在扩容时会发生一些导致线程安全的问题。</p><p><code>ConcurrentHashMap</code>在<code>JDK7</code>扩容时使用到了<code>ReentrantLock</code>对段加锁，这样该段的旧<code>table</code>也无法操作，<code>JDK</code>则通过一种手段设置标志位，后面操作使用<code>CAS</code>乐观锁来操作，成功则退出，不成功发现扩容标志后则参与扩容。</p><p>扩容成功的结果就是发生链表转移或者是红黑树转移，都是为了将节点分散，以至于发挥出<code>Hash</code>一次命中取出和保存的高性能。</p><p>当然刚开始没有结点数据，<code>oldTable</code>为<code>null</code>，不需要转移结点，然后什么事都没干，接着通过<code>hash</code>与<code>table</code>的长度进行<code>&amp;</code>操作命中槽位，<code>put</code>操作会保存到数组对应下标处即槽位中的结点。</p><blockquote><p>– 结点初始化 –</p></blockquote><p>保存之前很简单，得判断对应<code>Node</code>数组下标结点是否为<code>null</code>，因为这里是懒加载嘛，刚开始没有初始化数组的每一个元素，<code>resize</code>初始化方法也只是<code>new</code>了个<code>Node</code>数组，而且这也一样是懒加载。</p><p>所以在这里会将<code>put</code>中<code>key</code>的<code>hash、key和value</code>值封装到<code>Node</code>结点中并实例化，然后赋值到对应的<code>Node</code>数组下标中。</p><p>如果结点已经实例化了，那么这里有两种方式，一是链表寻址，二是树寻址，然后就是找到就覆盖，找不到就追加。</p><blockquote><p>– 链表寻址 –</p></blockquote><p>寻址前会先判断结点类型，如果<code>instanceof</code>不是<code>TreeNode</code>，那么便是链表，然后就可以开始遍历链表了，如果找到了的话，<code>key-value</code>当然就是要覆盖了，但是这里对<code>key</code>的处理分为了两种：</p><p>分析之前，其实链表中所有结点都位于同一个数组下标，那么应该都必须满足每个结点的<code>hash</code>值相同，即槽位相同，所以会再一次判断<code>hash</code>值，才会用<code>key</code>去比较。</p><ul><li>如果<code>key</code>为基本数据类型，那么是直接通过运算符<code>==</code>来比较的，为<code>true</code>，那么就直接跳出链表遍历了，然后将刚刚在链表访问后命中的<code>Node</code>结点<code>value</code>覆盖</li><li>如果key为复杂类型，那么仅仅通过<code>==</code>运算符比较是错误的，这里就需要我们去主动重写<code>equals</code>方法，让<code>key</code>值怎么比较才能相等，因为默认<code>equals</code>是<code>Object</code>比较，这里涉及到内存指针了，所以创建的对象一般内存都不同，除非浅拷贝。</li><li>只是我们一般都用<code>String</code>类型，而<code>String</code>类型已经帮我们重写过了，虽然<code>String</code>类型也算是复杂类型，它重写了<code>Object</code>的<code>equals</code>方法，使得不同对象可以进行比较，比较的是对应字符串序列的内容是否相同。</li></ul><p>如果没找到，那么将实例化新的<code>Node</code>结点，然后追加到链表末尾，在<code>JDK7</code>中是追加到头结点，后来发现线程安全，即多线程情况下，有几率会导致链表出现死锁。</p><blockquote><p>– 树寻址 –</p></blockquote><p>首先了解下<code>TreeNode</code>，它继承了<code>LinkedHashMap.Entry</code>，而<code>Entry</code>又继承了<code>HashMap.Node</code>，归根结底还是跟链表的<code>Node</code>类似，只不过多了一些成员和方法。</p><p>树寻址是判断结点是否为树节点，一般在链表转变为红黑树之后才会进行，红黑树是一棵平衡的二叉有序树，即由哈希值排序的二叉树，从根节点依次比较哈希值并遍历到叶子节点依旧没有找到，通过哈希值比较的大小直接实例出一个新的树节点给原来叶子节点的左孩子节点或右孩子节点。</p><p>如果找到该节点，与链表一样的方法，则中断遍历并将该节点返回，在外部进行赋值操作。</p><blockquote><p>– 链表转移 –</p></blockquote><p>链表转移前会判断链表是否只有表头，即只有一个元素，那么通过寻找该结点<code>Node</code>的<code>Hash</code>值，与扩容后的<code>lenth</code>长度<code>&amp;</code>操作命中新的槽位</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">e : table即Node数组中的一个下标元素</span></span><br><span class="line"><span class="comment">newCap: 新table的容量</span></span><br><span class="line"><span class="comment">e.hash: 哈希值，常用于与table长度做&amp;操作来命中寻址</span></span><br><span class="line"><span class="comment">newTab: 新table</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br></pre></td></tr></table></figure><p>如果是链表结构，那么按照<code>hash</code>值对链表拆成高位和低位链表，这里的高低位不是字面意思，我是直译源码字面意思，从代码分析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">如果 hash 二进制数中 与 旧table的容量表示的二进制数 所在的 位为1 &amp; 为 真，则表示为高位链表</span></span><br><span class="line"><span class="comment">如果 hash 二进制数中 与 旧table的容量表示的二进制数 所在的 位为1 &amp; 为 假，则表示为低位链表</span></span><br><span class="line"><span class="comment">从随机性角度考虑，这两种散列均匀的话各占一半</span></span><br><span class="line"><span class="comment">hash: 4字节的 int 类型</span></span><br><span class="line"><span class="comment">oldCap: 4字节的 int 类型，默认初始化为 16，二进制表示为 10000</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">e.hash &amp; oldCap) == <span class="number">0</span></span><br></pre></td></tr></table></figure><p>由于新<code>table</code>是旧<code>table</code>的两倍，那么低位链表命中赋值给新<code>table</code>中与旧<code>table</code>相同的下标，而高位从字面上理解，就要比低位更靠右，所以它的下标是<code>原下标+oldCap</code>，<code>oldCap</code>大小也是新<code>table</code>大小的一半，看图</p><p><img src="https://yupeng-tuchuang.oss-cn-shenzhen.aliyuncs.com/image-20221116225644342.png" alt="HashMap扩容图"></p><blockquote><p>– 转化红黑树 –</p></blockquote><p>转化红黑树刚开始是不会触发的，在<code>put</code>操作的时候，在<code>table</code>中某个槽遍历链表时，如果链表长度达到扩展树阈值<code>8</code>，并且<code>table</code>长度要大于<code>64</code>。</p><p>链表满足长度<code>8</code>是树转移的必要条件，在<code>table</code>初始化后且发生转化红黑树前，会先去判断<code>table</code>长度是否达到<code>64</code>，没有则会扩容，扩容前面也详细说了，上面的图就很明确，达到<code>8</code>个节点的链表，扩容后链表拆成两部分，很明显没有必要再次去转化了。</p><p>如果长度满足，这时会先转变为双向链表，用于辅助树节点增加和删除以及维护树根节点。</p><p>转换红黑树是从遍历该链表开始，特殊处理第一个链表节点转成树节点，遍历这棵树，通过哈希值构造一颗排序树，每次构造新节点都是从叶子节点开始，不平衡就利用红黑标记来转为平衡树。</p><blockquote><p>– 树转移 –</p></blockquote><p>树转移发生在<code>resize</code>方法中，触发的事件是当前<code>put</code>成功后的所有元素个数大于<code>table</code>的阈值（容量 * 负载因子），接着会先扩容<code>table</code>的容量，树转移时，在<code>put</code>时<code>hash</code>命中的<code>table</code>中一个插槽发现是树节点，就开始转移，转移不是从树的逻辑转移，跟链表一样，只不过还有考虑前置节点，也就是跟树转移一样构造双向链表，拆成两条待转移成树的双向链表。</p><p>拆成的子双向链表，长度小于<code>6</code>就直接退化为链表，否则才将红黑树转移到新<code>table</code>的高低位上。</p><blockquote><p>– 特殊key –</p></blockquote><p>对于key为<code>null</code>值，<code>JDK7</code>与<code>JDK8</code>做法不同，但结果都是从<code>table</code>的<code>0</code>下标开始遍历。</p><p><code>JDK7</code>的做法是对<code>Null</code>做了单独的<code>put</code>处理，不与非空的<code>key</code>放一起，直接单独在一个方法里面遍历<code>table</code>的<code>0</code>下标。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> putForNullKey(value);</span><br><span class="line">    <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> hash(key);</span><br></pre></td></tr></table></figure><p>所以常常说<code>JDK7</code>版本可读性比<code>JDK8</code>版本要强，这是无须质疑的。</p><p><code>JDK8</code>的做法更绝了，是对<code>Null</code>做了单独的<code>hash</code>处理，因为前面的<code>JDK7</code>版本对<code>key</code>做单独处理，无外乎就是<code>null</code>没法调用本地<code>native</code>方法<code>hashCode</code>取的哈希值，所以干脆就在外面传入<code>hash</code>值，并且将为<code>null</code>的<code>key</code>哈希值处理为<code>0</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><blockquote><p>– 哈希定位 –</p></blockquote><p>在<code>HashMap</code>中其实哈希的影响还是蛮大的，所以版本迭代对哈希也做了一些改进。</p><p><code>JDK7</code>版本的做法其实也是将<code>32位</code>的<code>int</code>哈希类型在命中<code>table</code>中的下标是能够分布均衡，因为<code>table</code>的数组长度没有像哈希值一样每个位随机均匀，它高位字节一般为<code>0</code>，这就导致很多时候不同的哈希值高位虽然不同，但结果命中了同一个下标，<code>JDK</code>的做法通过无符号右移，让每<code>12</code>位无差别异或，即高低位能够很好的利用到了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">h ^= k.hashCode();</span><br><span class="line"></span><br><span class="line"><span class="comment">// This function ensures that hashCodes that differ only by</span></span><br><span class="line"><span class="comment">// constant multiples at each bit position have a bounded</span></span><br><span class="line"><span class="comment">// number of collisions (approximately 8 at default load factor).</span></span><br><span class="line">h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</span><br><span class="line"><span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);</span><br></pre></td></tr></table></figure><p>但这种做法还不够极致，<code>JDK8</code>版本的做法，更加简单明了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br></pre></td></tr></table></figure><h3 id="4-你项目中是如何去实现幂等性的？"><a href="#4-你项目中是如何去实现幂等性的？" class="headerlink" title="4. 你项目中是如何去实现幂等性的？"></a>4. 你项目中是如何去实现幂等性的？</h3><p>先说下我对幂等性的理解，这样再去理解我项目对幂等性的处理。</p><blockquote><p>定义</p></blockquote><p>用户对于同一操作发起的一次请求或者多次请求的结果是一致的，不会因为多次点击而产生了副作用。</p><blockquote><p>实现</p></blockquote><p>幂等性在<code>RPC</code>上的实现，不仅要考虑结果一致性，还有考虑请求失败后负载到其他机器依旧保证幂等性，这就不能使用本地缓存来实现，而要用到分布式缓存，推荐的分布式缓存可以是<code>Redis</code>。</p><p>需要考虑到重试的时机来恰当设置缓存的失效时间，一般逻辑上只要保证请求次数达到阈值后重试请求成功即可失效，可从逻辑成功调用后去手动失效，或者是达到阈值后手动失效，不过这种做法增大了<code>Redis</code>的阻塞，因为<code>Redis</code>是单线程，没法做到并发，<code>Jedis</code>虽然可以并发，但会导致线程安全问题，而<code>Jedis</code>每次请求都需要建立连接， 所以可以考虑共享一个连接，不过请求速度将大大降低。</p><p>而考虑<code>Lettuce</code>则需要提前准备线程池，后面就可以直接从从线程池取连接，连接数更好管控，性能也相对高一些。</p><h3 id="5-RPC的协议讲一讲，怎么处理的？"><a href="#5-RPC的协议讲一讲，怎么处理的？" class="headerlink" title="5. RPC的协议讲一讲，怎么处理的？"></a>5. RPC的协议讲一讲，怎么处理的？</h3><p><code>RPC</code>的请求过程：</p><ul><li>服务端启动，并将服务注册到注册中心；</li><li>客户端启动通过代理调用所需的远程方法；</li><li>代理从注册中心拉取服务，并使用某种负载策略调用其中一个服务；</li><li>代理将客户端想要调用的方法等调用信息序列化，然后通过网络传输给服务端；</li><li>服务端接收到数据后，进行反序列化；</li><li>服务端得到反序列化的数据，包含需要调用的方法、参数数据，接着调用本地方法；</li><li>服务端调用完成将结果进行序列化，然后通过网络传输给代理；</li><li>代理拿到结果后，将结果反序列化，然后返回给客户端；</li><li>客户端接收到服务端远程方法调用的结果；</li></ul><h3 id="6-项目中是怎么序列化的？"><a href="#6-项目中是怎么序列化的？" class="headerlink" title="6. 项目中是怎么序列化的？"></a>6. 项目中是怎么序列化的？</h3><p>项目中使用到了两种序列化方式，一种是<code>Jackson</code>，另一种是<code>Kryo</code>序列化；</p><p>这两种序列化工具都提供对Java对象的序列化，即转成二进制，然后进行网络传输；</p><p>接收到网络传输的二进制，再反过来进行反序列化成对象；</p><p>不过项目序列化的是核心数据，对一些请求包头协议，是使用了自定义编解码的方式；</p><p>对特定的字节码进行编解码解析，从而可以避免出现粘包的问题；</p><p>拆完包之后，对包中的核心数据进行反序列化操作;</p><p>当然具体的操作还有考虑到包的其他安全问题，比如重发包和校验码失败包。</p><h3 id="7-说一说深拷贝和浅拷贝"><a href="#7-说一说深拷贝和浅拷贝" class="headerlink" title="7.说一说深拷贝和浅拷贝"></a>7.说一说深拷贝和浅拷贝</h3><p>浅拷贝主要拷贝了对象的指针，本身数据引用的是同一块内存；</p><p>深拷贝则拷贝了对象本身，引用的是不同的内存。</p><p>在<code>Java</code>中，深拷贝和浅拷贝有<code>Object</code>的<code>clone</code>拷贝方法（浅拷贝）；</p><p><code>Arrays.copy</code>（浅拷贝）和<code>System.arraycopy</code>（浅拷贝）</p><p>序列化则是深拷贝，比如Java内置的<code>ObjectOutputStream</code>的<code>writeObject</code>方法和<code>ObjectInputStream</code>的<code>readObject</code>方法；</p><p>更深入来讲，浅拷贝中，目标对象对内存的操作会影响到原对象，而深拷贝则受影响。</p><h3 id="8-TCP和UDP了解下？"><a href="#8-TCP和UDP了解下？" class="headerlink" title="8. TCP和UDP了解下？"></a>8. TCP和UDP了解下？</h3><p><code>TCP</code>与<code>UDP</code>都是传输层协议，<code>TCP</code>基于连接的，<code>UDP</code>基于非连接的；</p><p>从连接上看，TCP需要有三次握手才能完成连接，之后才能进行通信，是可靠的连接；</p><p>而<code>UDP</code>不需要连接，没有<code>TCP</code>严谨的三次握手、确认连接和四次挥手过程，是不可靠的连接；</p><p><code>TCP</code>可以保证服务的可靠，一般用于高可靠服务，<code>UDP</code>不能保证服务是否可靠。</p><blockquote><p>特点</p></blockquote><p><strong>TCP：</strong></p><ul><li>稳定可靠，适用于要求较高的场景，需要准确无误的传输给对方，比如文件传输、发送邮件和浏览网页等；</li></ul><p><strong>UDP：</strong></p><ul><li>速度快，性能损耗少、资源占用少，但是可能产生丢包，所以适用于对实时性要求较高，但是对少量丢包，并没有太大的要求的场景，比如域名查询、电话通信和视频直播等。</li></ul><h3 id="9-Http底层使用了什么："><a href="#9-Http底层使用了什么：" class="headerlink" title="9. Http底层使用了什么："></a>9. Http底层使用了什么：</h3><p>TCP协议，是基于连接的。</p><blockquote><p>http请求报文</p></blockquote><p>HTTP请求报文由请求行（<code>request line</code>）、请求头部（<code>header</code>）、空行和请求数据等4个部分组成。</p><p>请求行：（<code>get/post</code> 方法，<code>url</code>中的<code>path</code>路径，<code>http</code>版本）</p><p>请求头部（<code>header</code>）关键字/值对组成，每行一对，关键字和值用英文冒号</p><p>请求数据 (<code>body</code>)</p><blockquote><p>http响应报文</p></blockquote><p>HTTP响应报文由四个部分组成：</p><ul><li>状态码（<code>Status Code</code>）：描述了响应的状态。可以用来检查是否成功完成了请求。请求失败的情况下，状态码可用来找出失败的原因。如果<code>Servlet</code>没有返回状态码，默认会返回成功的状态码<code>HttpServletResponse SC OK</code>。</li><li>HTTP头部（<code>HTTP Header</code>）：它们包含了更多关于响应的信息。比如：头部可以指定任务响应过期的过期日期，或者是指定用来给用户安全的传输实体内容的编码格式。如何在<code>Servlet</code>中检索<code>HTTP</code>的头部看这里。</li><li>空行</li><li>主体（<code>Body</code>）：它包含了响应的内容。它可以包含HTML代码、图片等。主体是由传输在HTTP消息中紧跟在头部后面的数据字节组成的。</li></ul><blockquote><p>请求过程</p></blockquote><p><strong>客户端连接服务器：</strong></p><p>客户端一般为<code>Web</code>浏览器，通过<code>url</code>访问服务端，与服务端建立一个<code>TCP</code>的套接字。</p><p><strong>发送HTTP请求：</strong></p><p>通过<code>TCP</code>套接字，发送HTTP请求时，客户端向服务端发送了一个文本的请求报文，一个请求报文由请求行、请求头部、空行和请求数据四部分组成。</p><p><strong>返回HTTP响应：</strong></p><p>Web服务器解析请求，定位请求资源。服务器将资源副本写到TCP套接字，有客户端读取。一个响应由状态行、响应头部、空行和响应数据四部分组成。</p><p><strong>释放TCP连接：</strong></p><ul><li>当<code>connection</code>模式为<code>close</code>，主动关闭方为服务端，客户端被动关闭连接，释放<code>TCP</code>连接；</li><li>当<code>connection</code>模式为<code>keepalive</code>，则该连接会保持一段时间，在该时间可以继续接收其他请求，长连接复用，与2.0的多路复用目的都是为了重用连接，减少连接开销。</li></ul><h3 id="10-三次挥手说下？"><a href="#10-三次挥手说下？" class="headerlink" title="10. 三次挥手说下？"></a>10. 三次挥手说下？</h3><p>三次挥手与四次挥手很像，先说下四次挥手。</p><blockquote><p>四次挥手</p></blockquote><p>由主动关闭方<code>(Client)</code>发起中断连接请求，也就是<code>FIN</code>报文，被动关闭方<code>(Server)</code>接收到<code>FIN</code>报文后，从协议上来说是主动关闭方在等待收到<code>FIN + ACK</code>报文段，被动关闭方由于有数据要方法，第二次挥手只发了<code>ACK</code>确认号，接着主动关闭方进入<code>FIN_WAIT</code>状态，继续等待被动关闭方的FIN报文。</p><p>当被动关闭方数据发送完成后，将发送FIN报文给主动关闭方，主动关闭方收到FIN报文后，主动关闭方完成关闭，但被动关闭方并不知道FIN报文是否被接收成功，所以主动关闭方关闭前还需发送<code>ACK</code>给被动关闭方，表示已成功接收被动关闭方的<code>FIN</code>报文，这时被动关闭方就可以断开连接了。</p><p>如果没收到将再次发送<code>FIN</code>报文给主动关闭方，最后主动关闭方也不知道被动关闭方是否接收，需要等待<code>2MSL</code>时间，如果没收到重发包即成功了。</p><blockquote><p>三次挥手</p></blockquote><p>三次挥手不同于四次挥手，不同是第二次与第三次挥手合并了，如果服务端没有数据要发送，就可以将第二次与第三次挥手合并，而如果有数据要发，并且客户端允许延迟收到确认，那么服务端可以将结果封装到第二次与第三次合并的报文段中一起发送。</p><h3 id="11-进程和线程的关系？"><a href="#11-进程和线程的关系？" class="headerlink" title="11. 进程和线程的关系？"></a>11. 进程和线程的关系？</h3><blockquote><p>定义</p></blockquote><p>进程是资源分配的基本单位，线程是CPU调度和分派的基本单位。</p><blockquote><p>包含关系</p></blockquote><p>线程是进程的一部分，一个线程只能属于一个进行，一个进程可以有多个线程，但至少有一个线程。</p><blockquote><p>内存角度</p></blockquote><p>每个进程分配了不同的内存空间，每个进程都有独立的代码和数据空间，多个进程可以同时运行在内存中，而同一个进程的多个线程（简称同类线程）在其分配的指定内存中运行，需要CPU来调度这一块内存区域。</p><p>系统不会为线程分配资源，只能通过CPU来调度和分派资源，也就是说，进程分配内存资源，然后线程需要CPU来过渡使用这块内存。</p><p>进程切换开销大，线程切换开销小。</p><blockquote><p>共享角度</p></blockquote><p>同类线程之间可以共享堆空间和方法区和运行时常量池，每个线程都有自己独立的虚拟机栈和程序计数器。</p><blockquote><p>进行共享的方式</p></blockquote><p>线程共享环境：进程代码段、进程公有数据、进程打开的文件描述符、信号处理器、进程当前目录和进程用户ID与进程组ID</p><blockquote><p>进程通信的方式</p></blockquote><ul><li>匿名管道 (PIPE)</li></ul><p>半双工，即不能同时在两个方向上传输数据，有的系统可能支持全双工。</p><p>速度慢，容量有限，且只能在父子进程间。经典的形式就是管道由父进程创建，进程fork子进程之后，就可以在父子进程之间使用了。</p><ul><li>命名管道 (FIFO)</li></ul><p>不想关的进程也能够进行数据交换。</p><ul><li>消息队列</li></ul><p>消息队列，就是一个消息的链表，是一系列保存在内核中消息的列表。</p><ul><li>信号量</li></ul><p>信号量是互斥信号量，能够用来同步通信。</p><ul><li>共享内存</li></ul><p>通过共享内存机制来实现。</p><ul><li>套接字</li></ul><p>套接字通过Socket绑定套接字，服务端开启监听被动连接，客户端主动连接，向套接字读写数据实现通信。</p><ul><li>信号</li></ul><p>一种异步通信方式，可在用户态和内核态中交互，也可以在内核态中通知用户态事件的发生。</p><h3 id="12-了解过CAS嘛？"><a href="#12-了解过CAS嘛？" class="headerlink" title="12. 了解过CAS嘛？"></a>12. 了解过CAS嘛？</h3><p><code>CAS</code>是一种乐观锁的实现，<code>CAS</code>操作包含三个操作数——内存位置（<code>V</code>）、预期原值（A）期待值（<code>B</code>）。</p><p>如果内存位置的值与预期值向匹配，那么处理器会自动将该位置值更新为期待值，否则不做任何操作。</p><p>缺陷：无法解决<code>ABA</code>问题，在<code>Java</code>中解决该问题使用到了<code>AtomicStampReference</code>和<code>AtomicMarkableReference</code>来解决</p><p>数据库中MySQL的锁机制也是通过乐观锁来实现，更具体的实现则是<code>MVCC</code>多版本并发控制。</p><p>具体是两个数据结构，一个为<code>undo log</code>日志，一个为<code>readView</code>可读视图。</p><p>每张表中都会有隐藏的两列，一列是<code>undo log</code>指针，指向当前行数据操作指向的数据链表结构，另一列为事务版本号<code>id</code>，即每次事务开启后都会获取一个自增长的事务<code>id</code>，这样在<code>ReadView</code>可读视图中实现乐观操作，回到最先定义乐观锁三个操作数，实现方式差不多。</p><ul><li><code>undo log</code> 主要对所有并发修改结果保存了下来，并以链表的形式组织。</li><li><code>ReadView</code>主要处理事务<code>id</code>的可见性，包含当前活跃事务版本Id列表，活跃最小事务<code>id</code>（<code>up_limit_id</code>）即已提交最大事务<code>id + 1</code>，活跃最大事务<code>id</code>（<code>low_limit_id</code>）即最小不可见事务<code>id - 1</code>和<code>creator_trx_id</code>表示当前事务开启的版本号。</li><li>活跃事务即为同一时间并发下，所有发生了交叉的事务。</li></ul><h3 id="13-你的RPC项目怎么怎么划分模块的？"><a href="#13-你的RPC项目怎么怎么划分模块的？" class="headerlink" title="13. 你的RPC项目怎么怎么划分模块的？"></a>13. 你的RPC项目怎么怎么划分模块的？</h3><ul><li>服务发现（从注册中心获取服务及对应地址、使用负载均衡策略选择服务）</li><li>服务注册者（注册服务名和对应地址到注册中心、连接注册中心、清除服务）</li><li>服务提供者（存放服务实例、获取服务实例）</li><li>客户端代理（处理客户端请求、处理超时重试、负责分布式请求id生成）</li><li>服务端（启动服务时将服务所有类实例化并存放到服务提供者，将所有服务类对应服务名注册到服务注册者、处理客户端请求方法、处理超时包、处理重发包、处理异常包）</li><li>服务端处理器（从服务提供者获取服务实例、读取请求包代理执行服务对应方法）</li><li>异步请求池（客户端请求调用后立马返回future结果，由netty客户端正确读取结果后返回给异步请求池）</li><li>编码与解码器（对请求包和响应包的封包和拆包）</li><li>包检查器（对请求包和响应包的安全检验）</li><li>注册中心（暴露服务真实地址和端口号、提供服务注册与发现）</li><li>分布式缓存（缓存时间戳与序列号、重试请求号与请求结果、机器码）</li><li>服务宕机钩子（中心服务下线与本地服务清除、下线机器码、线程池关闭）</li></ul><h3 id="14-做一套算法题"><a href="#14-做一套算法题" class="headerlink" title="14. 做一套算法题"></a>14. 做一套算法题</h3><p>如有升序链表：list1 = [1,2,3]，list2 = [1,4,5]，则合并后的链表：list = [1,1,2,3,4,5]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> List <span class="title function_">concat</span><span class="params">(List list1, List list2)</span> &#123;</span><br><span class="line"><span class="comment">// 头结点存储数据</span></span><br><span class="line"><span class="type">List</span> <span class="variable">p</span> <span class="operator">=</span> list1;</span><br><span class="line"><span class="type">List</span> <span class="variable">q</span> <span class="operator">=</span> list2;</span><br><span class="line"></span><br><span class="line"><span class="type">List</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">List</span>();</span><br><span class="line"><span class="type">List</span> <span class="variable">head</span> <span class="operator">=</span> newNode;</span><br><span class="line"><span class="keyword">while</span>(p.next != <span class="literal">null</span> &amp;&amp; q.next != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (p.data &lt; q.data) &#123;</span><br><span class="line">newNode.next = p;</span><br><span class="line">p = p.next;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">newNode.next = q;</span><br><span class="line">q = q.next;</span><br><span class="line">&#125;</span><br><span class="line">newNode = newNode.next;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// list2 仍存在节点</span></span><br><span class="line"><span class="keyword">if</span> (p.next == <span class="literal">null</span> &amp;&amp; q.next != <span class="literal">null</span>) &#123;</span><br><span class="line">newNode.next = q;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// list1 仍存在节点</span></span><br><span class="line"><span class="keyword">if</span> (p.next != <span class="literal">null</span> &amp;&amp; q.next == <span class="literal">null</span>) &#123;</span><br><span class="line">newNode.next = p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> head.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;自我介绍这里一笔带过，给对面介绍自己内在 + 外在 + 校园经历 + 校园项目  + 意向岗位&lt;/p&gt;
&lt;p&gt;腾讯子公司云智研发一面&lt;/p&gt;
&lt;h3 id=&quot;1-有了解过C-吗？接受转语言吗？&quot;&gt;&lt;a href=&quot;#1-有了解过C-吗？接受转语言吗？&quot; class=&quot;hea</summary>
      
    
    
    
    <category term="面经" scheme="http://fyupeng.github.io/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
    <category term="Java面经" scheme="http://fyupeng.github.io/tags/Java%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot整合rpc-netty-framework</title>
    <link href="http://fyupeng.github.io/2022/10/20/SpringBoot%E6%95%B4%E5%90%88rpc-netty-framework/"/>
    <id>http://fyupeng.github.io/2022/10/20/SpringBoot%E6%95%B4%E5%90%88rpc-netty-framework/</id>
    <published>2022-10-20T09:15:08.000Z</published>
    <updated>2022-10-20T09:29:20.128Z</updated>
    
    <content type="html"><![CDATA[<p>一个分布式微服务RPC框架 | <a href="README.CN.md">返回</a></p><h2 id="使用效果："><a href="#使用效果：" class="headerlink" title="使用效果："></a>使用效果：</h2><ol><li>用户访问客户端：GET <a href="http://localhost:8081/user/hello?name=&quot;%E5%BC%A0%E4%B8%89%E6%9D%A5%E8%AE%BF&quot;">http://localhost:8081/user/hello?name=&quot;张三来访&quot;</a></li></ol><p><img src="https://yupeng-tuchuang.oss-cn-shenzhen.aliyuncs.com/image-20221020170500139.png" alt="image-20221020170500139"></p><ol><li>浏览器访问客户端：</li></ol><p><img src="https://yupeng-tuchuang.oss-cn-shenzhen.aliyuncs.com/image-20221020170622580.png" alt="image-20221020170622580"></p><p>服务端接收情况：</p><p><img src="https://yupeng-tuchuang.oss-cn-shenzhen.aliyuncs.com/image-20221020170428236.png" alt="image-20221020170428236"></p><p>服务端负载注册服务：</p><p><img src="https://yupeng-tuchuang.oss-cn-shenzhen.aliyuncs.com/image-20221020170833644.png" alt="image-20221020170833644"></p><p>上面的实现就好比客户端只拿到服务端的api接口，加上配置中心地址即可调用远程服务！</p><h2 id="1-创建工程"><a href="#1-创建工程" class="headerlink" title="1. 创建工程"></a>1. 创建工程</h2><p>创建两个工程，一个作为服务端<code>SpringBoot</code>、一个作为客户端<code>SpringBoot</code>，同时作为后端接口服务</p><p>创建Maven工程的时候推荐使用父子工程依赖，而且要注意子模块之间的相互依赖关系，其中：</p><p>父模块（<code>root</code>项目）：负责管理<code>SpringBoot</code>版本、统一版本、<code>JDK</code>版本、日志依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maven-compiler-source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven-compiler-source</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maven-compiler-target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven-compiler-target</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maven-copiler-compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven-copiler-compilerVersion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 与 logbakc 整合 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 日志框架 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>主模块（启动类所在模块）应配置<code>maven</code>打包插件，<code>SpringBootStarterWeb</code>，<code>rpc-core</code>和依赖<code>Service</code>/<code>Controller</code>模块，客户端只有<code>Service</code>模块，服务端只有<code>Controller</code>模块</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.fyupeng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-rpc-service<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.fyupeng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rpc-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>Service</code>/<code>Controller</code>模块：依赖<code>api</code>模块和<code>common</code>模块，客户端请求服务端调用服务，当然没有<code>Service</code>模块，让主模块依赖<code>Controller</code>模块，<code>Controller</code>模块还要与主模块一样依赖<code>SpringBootStarterWeb</code>和<code>rpc-core</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.fyupeng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-rpc-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.fyupeng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-rpc-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>Common</code>模块，依赖<code>rpc-common</code>模块</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.fyupeng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rpc-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>项目在准备测试服务端的自动发现服务功能时，要保证<code>cn.fyupeng.@Service</code>注解类能够被扫描，使用<code>cn.fyupeng.util.ReflectUtil</code>类即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        Set&lt;Class&lt;?&gt;&gt; classes = ReflectUtil.getClasses(<span class="string">&quot;cn.fyupeng&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; aClass : classes) &#123;</span><br><span class="line">            System.out.println(aClass);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-客户端"><a href="#2-客户端" class="headerlink" title="2. 客户端"></a>2. 客户端</h2><h3 id="2-1-编写启动器"><a href="#2-1-编写启动器" class="headerlink" title="2.1 编写启动器"></a>2.1 编写启动器</h3><p>新建<code>cn.fyupeng</code>包，包下新建启动器类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;cn.fyupeng&quot;,&quot;org.utils&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringBootClientStarter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringBootClientStarter.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-编写配置文件"><a href="#2-2-编写配置文件" class="headerlink" title="2.2 编写配置文件"></a>2.2 编写配置文件</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单机模式</span></span><br><span class="line"><span class="attr">cn.fyupeng.nacos.register-addr</span>=<span class="string">192.168.10.1:8848</span></span><br><span class="line"><span class="comment"># 集群模式</span></span><br><span class="line"><span class="attr">cn.fyupeng.nacos.cluster.use</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">cn.fyupeng.nacos.cluster.load-balancer</span>=<span class="string">round</span></span><br><span class="line"><span class="attr">cn.fyupeng.nacos.cluster.nodes</span>=<span class="string">192.168.10.1:8847|192.168.10.1:8848;192.168.10.1:8849</span></span><br></pre></td></tr></table></figure><h3 id="2-3-编写自定义配置类"><a href="#2-3-编写自定义配置类" class="headerlink" title="2.3 编写自定义配置类"></a>2.3 编写自定义配置类</h3><h3 id="2-4-编写api"><a href="#2-4-编写api" class="headerlink" title="2.4 编写api"></a>2.4 编写api</h3><p>注意与客户端包名完全相同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.fyupeng.service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: fyp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/10/19</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: HelloWorld接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Package</span>: cn.fyupeng.cn.fyupeng.controller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HelloService</span> &#123;</span><br><span class="line">    String <span class="title function_">sayHello</span><span class="params">(String name)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-编写控制器"><a href="#2-5-编写控制器" class="headerlink" title="2.5 编写控制器"></a>2.5 编写控制器</h3><p><code>@PostConstruct</code>注解不要与<code>@Autowire</code>公用，因为<code>@Autowire</code>是本地依赖的，而我<code>@PostConstruct</code>会在该变量使用前调用，不过需要自行去实现，我的实现是远程依赖。</p><p>而<code>@Reference</code>没有依赖注入的功能，只有在超时重试才需要标记上！</p><p><code>@PostContruct</code>与<code>@Autowire</code>在<code>51cto</code>博客中有所讲解，请自行到我的<code>github</code>主页<code>get</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.fyupeng.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.fyupeng.anotion.Reference;</span><br><span class="line"><span class="keyword">import</span> cn.fyupeng.loadbalancer.RandomLoadBalancer;</span><br><span class="line"><span class="keyword">import</span> cn.fyupeng.net.netty.client.NettyClient;</span><br><span class="line"><span class="keyword">import</span> cn.fyupeng.proxy.RpcClientProxy;</span><br><span class="line"><span class="keyword">import</span> cn.fyupeng.serializer.CommonSerializer;</span><br><span class="line"><span class="keyword">import</span> cn.fyupeng.service.HelloService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.utils.JSONResult;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: fyp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/10/19</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: HelloWorld控制器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Package</span>: cn.fyupeng.cn.fyupeng.controller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Autowired</span></span><br><span class="line">    <span class="comment">//private HelloService helloService;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">RandomLoadBalancer</span> <span class="variable">randomLoadBalancer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomLoadBalancer</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">NettyClient</span> <span class="variable">nettyClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NettyClient</span>(randomLoadBalancer, CommonSerializer.KRYO_SERIALIZER);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">RpcClientProxy</span> <span class="variable">rpcClientProxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RpcClientProxy</span>(nettyClient);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Reference(retries = 5, timeout = 600, asyncTime = 3000)</span></span><br><span class="line">    <span class="comment">//@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HelloService helloService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        helloService = rpcClientProxy.getProxy(HelloService.class, HelloController.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JSONResult <span class="title function_">sayHello</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> JSONResult.ok(helloService.sayHello(name));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-服务端"><a href="#3-服务端" class="headerlink" title="3. 服务端"></a>3. 服务端</h2><h3 id="3-1-编写配置类"><a href="#3-1-编写配置类" class="headerlink" title="3.1 编写配置类"></a>3.1 编写配置类</h3><p>新建<code>cn.fyupeng.config</code>包，在包下新建资源配置类，用于注入绑定端口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix=&quot;cn.fyupeng.config&quot;)</span></span><br><span class="line"><span class="comment">//不使用默认配置文件application.properties和application.yml</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:resource.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResourceConfig</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getServerPort</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> serverPort;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setServerPort</span><span class="params">(<span class="type">int</span> serverPort)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.serverPort = serverPort;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-编写启动器"><a href="#3-2-编写启动器" class="headerlink" title="3.2 编写启动器"></a>3.2 编写启动器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@ServiceScan</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;cn.fyupeng&quot;, &quot;org.utils&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RpcServerStarter</span> <span class="keyword">implements</span> <span class="title class_">CommandLineRunner</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ResourceConfig resourceConfig;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        Map&lt;String, String&gt; resourceLoaders = ResourceLoadUtils.load(<span class="string">&quot;resource.properties&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (resourceLoaders != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">serverPort</span> <span class="operator">=</span> resourceLoaders.get(<span class="string">&quot;cn.fyupeng.config.serverPort&quot;</span>);</span><br><span class="line">            resourceConfig.setServerPort(Integer.parseInt(serverPort));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(RpcServerStarter.class,args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//这里也可以添加一些业务处理方法，比如一些初始化参数等</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="type">NettyServer</span> <span class="variable">nettyServer</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                nettyServer = <span class="keyword">new</span> <span class="title class_">NettyServer</span>(<span class="string">&quot;192.168.2.185&quot;</span>, resourceConfig.getServerPort(), SerializerCode.KRYO.getCode());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RpcException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            log.info(<span class="string">&quot;Service bind in port with &quot;</span>+ resourceConfig.getServerPort() +<span class="string">&quot; and start successfully!&quot;</span>);</span><br><span class="line">            nettyServer.start();</span><br><span class="line">            log.error(<span class="string">&quot;RegisterAndLoginService is died，Service is restarting....&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-编写配置文件"><a href="#3-3-编写配置文件" class="headerlink" title="3.3 编写配置文件"></a>3.3 编写配置文件</h3><p>注意<code>config/resource.properties</code>与资源目录下的<code>resource.properties</code>不能同时公用，前者优先级高于后者</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用于启动 jar 包端口</span></span><br><span class="line"><span class="attr">cn.fyupeng.config.serverPort</span>=<span class="string">8082</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 用于配置中心单机</span></span><br><span class="line"><span class="attr">cn.fyupeng.nacos.register-addr</span>=<span class="string">192.168.2.185:8848</span></span><br><span class="line"><span class="comment"># 用于配置中心集群</span></span><br><span class="line"><span class="attr">cn.fyupeng.nacos.cluster.use</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">cn.fyupeng.nacos.cluster.load-balancer</span>=<span class="string">round</span></span><br><span class="line"><span class="attr">cn.fyupeng.nacos.cluster.nodes</span>=<span class="string">192.168.2.185:8847|192.168.2.185:8848;192.168.2.185:8849</span></span><br></pre></td></tr></table></figure><h3 id="3-4-编写api"><a href="#3-4-编写api" class="headerlink" title="3.4 编写api"></a>3.4 编写api</h3><p>注意与客户端包名完全相同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.fyupeng.service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: fyp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/10/19</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: HelloWorld接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Package</span>: cn.fyupeng.cn.fyupeng.controller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HelloService</span> &#123;</span><br><span class="line">    String <span class="title function_">sayHello</span><span class="params">(String name)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-编写业务"><a href="#3-5-编写业务" class="headerlink" title="3.5 编写业务"></a>3.5 编写业务</h3><p>注意<code>Service</code>注解为<code>cn.fyupeng.service.HelloService</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.fyupeng.service.impl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.fyupeng.anotion.Service;</span><br><span class="line"><span class="keyword">import</span> cn.fyupeng.service.HelloService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: fyp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/10/19</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: HelloWorld实现类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Package</span>: cn.fyupeng.cn.fyupeng.controller.impl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">HelloService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello, my name is &quot;</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>为了使用配置文件注入来启动服务对应的端口</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一个分布式微服务RPC框架 | &lt;a href=&quot;README.CN.md&quot;&gt;返回&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;使用效果：&quot;&gt;&lt;a href=&quot;#使用效果：&quot; class=&quot;headerlink&quot; title=&quot;使用效果：&quot;&gt;&lt;/a&gt;使用效果：&lt;/h2&gt;&lt;ol&gt;
&lt;li</summary>
      
    
    
    
    <category term="Java笔记" scheme="http://fyupeng.github.io/categories/Java%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="RPC" scheme="http://fyupeng.github.io/tags/RPC/"/>
    
  </entry>
  
  <entry>
    <title>小迈科技一面</title>
    <link href="http://fyupeng.github.io/2022/09/29/%E5%B0%8F%E8%BF%88%E7%A7%91%E6%8A%80%E4%B8%80%E9%9D%A2/"/>
    <id>http://fyupeng.github.io/2022/09/29/%E5%B0%8F%E8%BF%88%E7%A7%91%E6%8A%80%E4%B8%80%E9%9D%A2/</id>
    <published>2022-09-29T08:00:20.000Z</published>
    <updated>2022-09-29T08:02:24.370Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简单三分钟自我介绍"><a href="#简单三分钟自我介绍" class="headerlink" title="简单三分钟自我介绍"></a>简单三分钟自我介绍</h2><p>自我介绍这里一笔带过，给对面介绍自己内在 + 外在 + 校园经历 + 校园项目  + 意向岗位</p><h2 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h2><h3 id="1-Java基础"><a href="#1-Java基础" class="headerlink" title="1. Java基础"></a>1. Java基础</h3><h3 id="1-1-序列化和反序列化"><a href="#1-1-序列化和反序列化" class="headerlink" title="1.1 序列化和反序列化"></a>1.1 序列化和反序列化</h3><p>首先了解一下序列化和反序列化的概念</p><p>序列化：将Java对象以二进制即字节码的形式保存在磁盘文件中，可以说是保存Java对象状态的过程，序列化可以实现对象保存的持久化；</p><p>反序列化：将保存在磁盘文件中的Java字节码重新转换为Java对象的过程；</p><p>其他特点：一般<code>RPC</code>框架底层协议通信就是通过序列化和反序列化在网络上传输Java对象。</p><p>序列化和反序列化的实现主要有两种，准确来说有三种方法：</p><p>采用默认的序列化方式，即通过<code>ObjectOutPutStream</code>类的<code>writeObject(OutputStream out)</code>方法来序列化到输出流中</p><p>输出流可以选择文件流、也可以选择管道流，甚至是二进制流</p><p>文件流是直接写到文件中再读取转成对象，管道流是通过管道缓存数据，然后再通过输入流连接管道读取转成对象</p><p>序列化的对象必须实现<code>Seriablized</code>接口，才能完成序列化和反序列化操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第一种实现（采用默认）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//FileOutputStream fos = new FileOutputStream(&quot;D:\\student.txt&quot;);</span></span><br><span class="line">      <span class="type">PipedOutputStream</span> <span class="variable">pos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PipedOutputStream</span>();</span><br><span class="line">      <span class="type">PipedInputStream</span> <span class="variable">pis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PipedInputStream</span>();</span><br><span class="line">      pis.connect(pos);</span><br><span class="line">      <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(pos);</span><br><span class="line"></span><br><span class="line">      <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">      student.setAge(<span class="number">21</span>);</span><br><span class="line">      student.setName(<span class="string">&quot;zs&quot;</span>);</span><br><span class="line">      oos.writeObject(student);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//FileInputStream fis = new FileInputStream(&quot;D:\\student.txt&quot;);</span></span><br><span class="line">      <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(pis);</span><br><span class="line">      <span class="type">Student</span> <span class="variable">res</span> <span class="operator">=</span> (Student) ois.readObject();</span><br><span class="line">      System.out.println(res);</span><br></pre></td></tr></table></figure><ul><li>第二种实现（自定义）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义协议 比如我可以将加入对象头 cafe babe</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;自定义反序列化&quot;</span>);</span><br><span class="line">      <span class="type">int</span> <span class="variable">magic</span> <span class="operator">=</span> in.readInt();</span><br><span class="line">      <span class="built_in">this</span>.name = (String) in.readObject();</span><br><span class="line">      <span class="built_in">this</span>.age = (Integer) in.readObject();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 自定义协议 比如我可以将加入对象头 cafe babe</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeObject</span><span class="params">(ObjectOutputStream out)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;自定义序列化&quot;</span>);</span><br><span class="line">      <span class="comment">// 4 字节 魔数</span></span><br><span class="line">      out.writeInt(<span class="number">0xCAFEBABE</span>);</span><br><span class="line">      out.writeObject(<span class="built_in">this</span>.name);</span><br><span class="line">      out.writeObject(<span class="built_in">this</span>.age);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li>第三种（自定义）</li></ul><p>实现接口<code>Externalizable</code>并重写方法，其实跟第二种差别不大，只是第二种有默认的私有方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeExternal</span><span class="params">(ObjectOutput out)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;实现 Externalizable 接口的自定义序列化&quot;</span>);</span><br><span class="line">      out.writeObject(<span class="built_in">this</span>.name);</span><br><span class="line">      out.writeObject(<span class="built_in">this</span>.age);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readExternal</span><span class="params">(ObjectInput in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;实现 Externalizable 接口的自定义反序列化&quot;</span>);</span><br><span class="line">      <span class="built_in">this</span>.name = (String) in.readObject();</span><br><span class="line">      <span class="built_in">this</span>.age = (Integer) in.readObject();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>解决反序列化破坏单例</p><ul><li>在单例模式中，序列化可以破坏单例，这是需要重写<code>readResolve()</code> 方法，将之前的单例实例对象返回即可保证单例。</li></ul><p>解决反射破坏单例</p><p>反射创建对象根本也是要调用构造方法，而且可以无视构造方法的访问修饰符（<code>public</code>、<code>private</code>）</p><ul><li>Java规定反射不能破坏枚举类型，采用枚举构造单例</li><li>构造方法执行前，单例实例逻辑上不应该创建而且只执行一次，可判断是否已创建来避免反射创建多个实例，前提单例已先于反射</li></ul><h3 id="1-2-说一说数据类型有哪些"><a href="#1-2-说一说数据类型有哪些" class="headerlink" title="1.2 说一说数据类型有哪些"></a>1.2 说一说数据类型有哪些</h3><p>Java有八种基本数据类型 + String</p><p>1个位的<code>bit</code>，布尔类型的<code>boolean</code>，2个字节的<code>short</code>，4个字节的<code>int</code>、<code>char</code>，8个字节的<code>long</code>、<code>double</code>、<code>float</code></p><p>其中基本类型中的包装类型常用的有Integer、Long</p><p>其中<code>Integer</code>会自动进行拆封装处理，也就是可以直接跟<code>int</code>类型比较数值上的大小</p><p>底层在<code>-128-127</code>之间会做缓存，在这之间通过<code>Integer.valueOf(int)</code>创建的对象都是同一个,使用了享元设计模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>) == <span class="number">1</span>);</span><br><span class="line">System.out.println(Integer.valueOf(<span class="number">1</span>) == Integer.valueOf(<span class="number">1</span>));</span><br><span class="line">System.out.println(Integer.valueOf(<span class="number">128</span>) == Integer.valueOf(<span class="number">128</span>));</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="1-3-数据结构"><a href="#1-3-数据结构" class="headerlink" title="1.3 数据结构"></a>1.3 数据结构</h3><p>给你你个浏览器，要求设计前进和后退的数据结构，优先考虑性能</p><p>那么由于浏览器前进后退访问，是一种<code>FIFO</code>的结构，比如你连续点击前进几个页面，最先进的页面最后返回，即<code>LIFO</code></p><p>那么可以考虑栈的结构设计，栈结构设计要考虑性能，首先我们可以分析到，浏览器页面跳转没有涉及到页面的修改，即用于查询</p><p>那么优先考虑数组而不考虑链表</p><p>我们可以设计两个栈数组，一个用于入栈已前进的页面，一个用于入栈已后退的页面，取其中一个栈顶元素作为当前页面</p><h3 id="2-MySQL"><a href="#2-MySQL" class="headerlink" title="2. MySQL"></a>2. MySQL</h3><h4 id="2-1-索引"><a href="#2-1-索引" class="headerlink" title="2.1 索引"></a>2.1 索引</h4><p>在MySQL中，直接影响索引类型的是数据库的存储引擎</p><p>使用MyIsam存储引擎，数据文件和索引是分开的，索引会另外存储在另一个文件中</p><p>使用InnoDB存储引擎，数据和索引都存储在同一个文件中，而且是以B+数的数据结构存储，非叶子节点存储索引，叶子节点存储索引和索引对应的数据</p><p>就MyIsam引擎来说，索引中最主要的是聚簇索引，也就是主键的默认索引</p><p>单值索引和多值索引，这里是指组合索引，好的组合索引可以达到覆盖索引，可以做到避免回表，这里是因为叶子节点通过覆盖索引带了数据，因为B+树只有叶子节点带有数据，非叶子节点都是索引</p><p>而多个组合索引下，有效索引要做到左匹配，也就是必须从左顺序匹配到右查询，否则索引将失效</p><h4 id="2-2-口述-sql"><a href="#2-2-口述-sql" class="headerlink" title="2.2 口述 sql"></a>2.2 口述 sql</h4><p>给你一张表，有三个字段，id、产品id、备注信息，现在需要你查询相同产品id的记录，然后id值相同的记录数大于等于5的产品id</p><p>首先呢，我们可以先定义这张表为S</p><p>因为涉及相同字段的记录，可以考虑直接分组，使用聚合函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> pro_id <span class="keyword">from</span> S</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> pro_id</span><br><span class="line"><span class="keyword">having</span> <span class="built_in">count</span>(pro_id) <span class="operator">&gt;=</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><h3 id="3-JVM"><a href="#3-JVM" class="headerlink" title="3. JVM"></a>3. JVM</h3><h4 id="3-1-线程的死锁了解过吗？"><a href="#3-1-线程的死锁了解过吗？" class="headerlink" title="3.1 线程的死锁了解过吗？"></a>3.1 线程的死锁了解过吗？</h4><p>比如有两个线程t1和t2，t1线程有资源r1，t2有资源r2，t1线程执行代码中需要资源r2，不过这段代码需要t2线程把资源r2释放才能执行，此时t2线程也执行代码中，释放资源前需要获取资源r1，但t2又需要r2，此时处于相互等待的状态，就导致了死锁。</p><p>从Java角度来说，资源相当于Java的锁对象，是互斥的，一个线程获取锁对象后，另一个线程只能等待，t1线程获取锁对象r1，也就是占有了锁r1，这时线程t2也是占有了锁对象r2，而线程t1需要获取锁对象r2才能往下执行代码，使得线程t1阻塞，而线程t2处于阻塞等待锁对象r1释放，才能释放锁对象r2，这样就导致死锁。（互相等待）</p><h3 id="4-JUC"><a href="#4-JUC" class="headerlink" title="4. JUC"></a>4. JUC</h3><h4 id="4-1-线程池有了解过吗？"><a href="#4-1-线程池有了解过吗？" class="headerlink" title="4.1 线程池有了解过吗？"></a>4.1 线程池有了解过吗？</h4><p>线程池主要有核心线程数、救急线程和队列，队列分为阻塞队列和非阻塞队列。</p><p>目前线程池主要可以分为几类：</p><p>只有核心线程、无救急线程的线程池，此时等待队列中有要执行的任务，而核心线程在轮询地执行等待队列中的任务，如果队列满或者队列是无界队列，可能导致内存溢出问题。</p><p>一般这种线程池的做法就是使用了拒绝策略，拒绝策略可分为直接丢弃新任务、异常抛出（主动逻辑处理）、丢弃等待队列头结点、提交任务线程执行。</p><p>最后一个是推荐使用的</p><ul><li>不会造成数据丢失，也就不会出现业务损失；</li><li>提交任务的线程被占用，新的任务不可提交，减缓任务提交的速度，相当于负反馈，能给到线程池一定的缓冲期；</li></ul><p>只有救急线程的线程池，这种的话有线程池<code>newCachedThreadPool</code>，它能无限创建救急线程，队列采用<code>SynchronousQueue</code> ，是一个没有容量的队列，只有线程取任务时才能提交任务；</p><p>最后是一种核心线程数只有1的线程池，没有救急线程，任务队列无界，一般作为单线程任务，这样就不会有CPU的轮询切换，任务的执行效率最高，不过请求数太多的情况下，也是容易导致内存溢出。</p><p>非阻塞队列实现的有<code>CurrentLinkedQueue</code>，它是通过<code>CAS</code>无锁化机制的线程池队列，每个线程通过<code>for(;;)</code>执行，是一个单向且通过<code>GC</code>自动回收出队节点的，利用可达性算法分析，将<code>next</code>指向自己，即可触发延迟回收，利用元素的不可重用性，规避<code>ABA</code>问题</p><h3 id="5-Linux"><a href="#5-Linux" class="headerlink" title="5. Linux"></a>5. Linux</h3><p>给你一个日志文件，要求你查询最近一天内中，匹配到关键字的所有记录数据</p><p>一般日志实时查询可以使用该命令，它会实时更新，而且会处于fg模式，tail打印文件末尾记录，也就是最近</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -100f catalina.log |<span class="params"> grep &quot;关键字&quot; </span></span><br></pre></td></tr></table></figure><p>而使用cat是查询历史，只能打印日志到屏幕</p><p>比如按照<code>tail</code>或<code>head</code>来查询关键字为<code>20:</code>的后5条数据并显示行号</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat -n log.log4j |<span class="params"> grep &quot;20:&quot; </span>| tail -n <span class="number">5</span></span><br></pre></td></tr></table></figure><p>时间段查询</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">&#x27;2022-08-21 20:1[1-9]&#x27;</span> log.log4j</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简单三分钟自我介绍&quot;&gt;&lt;a href=&quot;#简单三分钟自我介绍&quot; class=&quot;headerlink&quot; title=&quot;简单三分钟自我介绍&quot;&gt;&lt;/a&gt;简单三分钟自我介绍&lt;/h2&gt;&lt;p&gt;自我介绍这里一笔带过，给对面介绍自己内在 + 外在 + 校园经历 + 校园项目  +</summary>
      
    
    
    
    <category term="面经" scheme="http://fyupeng.github.io/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
    <category term="Java面经" scheme="http://fyupeng.github.io/tags/Java%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>右岸物联面经</title>
    <link href="http://fyupeng.github.io/2022/09/25/%E5%8F%B3%E5%B2%B8%E7%89%A9%E8%81%94%E9%9D%A2%E7%BB%8F/"/>
    <id>http://fyupeng.github.io/2022/09/25/%E5%8F%B3%E5%B2%B8%E7%89%A9%E8%81%94%E9%9D%A2%E7%BB%8F/</id>
    <published>2022-09-25T10:28:50.000Z</published>
    <updated>2022-09-25T10:30:38.942Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简单三分钟自我介绍"><a href="#简单三分钟自我介绍" class="headerlink" title="简单三分钟自我介绍"></a>简单三分钟自我介绍</h2><p>自我介绍这里一笔带过，给对面介绍自己内在 + 外在 + 校园经历 + 校园项目  + 意向岗位</p><h2 id="技术面"><a href="#技术面" class="headerlink" title="技术面"></a>技术面</h2><h3 id="1-Java基础篇"><a href="#1-Java基础篇" class="headerlink" title="1. Java基础篇"></a>1. Java基础篇</h3><h4 id="1-1-Object你知道哪些方法"><a href="#1-1-Object你知道哪些方法" class="headerlink" title="1.1 Object你知道哪些方法?"></a>1.1 <code>Object</code>你知道哪些方法?</h4><p>我就回答了自己常用的 <code>wait</code>、<code>notify</code>、<code>notifyAll</code> 这三个方法，其他自己不怎么使用，就跟技术官说抱歉，其他不怎么使用，就回答不上来，面试官也不停留在这个问题上，直接带到下一个话题。</p><p>所以这里总结下，<code>Object</code>其实还有一个 <code>clone()</code>方法，这个回答不上了其实真不应该，当前想不起来，还有一个获取类信息<code>getClass()</code>，可以做映射的东西。</p><h4 id="1-2-你了解过哪些list-类型吗"><a href="#1-2-你了解过哪些list-类型吗" class="headerlink" title="1.2 你了解过哪些list 类型吗"></a>1.2 你了解过哪些list 类型吗</h4><p>嗯，有两种，一种是 数组，一种是链表，即<code>ArrayList</code>和<code>LinkedList</code></p><h4 id="1-3-这两种怎么选择使用？"><a href="#1-3-这两种怎么选择使用？" class="headerlink" title="1.3 这两种怎么选择使用？"></a>1.3 这两种怎么选择使用？</h4><p>一般的话，如果读操作大于增删改的话，使用数组效率要比链表的好，而如果要频繁修改操作，那么使用链表更好一点</p><p>所谓层层递进，就在这里了</p><h4 id="1-4-那为什么这么说？"><a href="#1-4-那为什么这么说？" class="headerlink" title="1.4 那为什么这么说？"></a>1.4 那为什么这么说？</h4><p>呃，因为数组如果你要增加一个元素的话，比如举例，你有十个元素，那么你要在0号下标增加一个元素，那么你得把后面10个元素整体向后挪到一位，这里我还用手势比划了一下，面试官点头，然后示意我继续，我就说链表的话，只需要修改一下指针就可以了，不用对整体移动，其实这里应该回调内存的连续跟分散会更好一点，因为数组是开辟的连续内存空间，而链表不需要，它是零散的，所以链表读要使用指针，自然而然数组读效率更高。</p><h3 id="2-Spring-篇"><a href="#2-Spring-篇" class="headerlink" title="2. Spring 篇"></a>2. Spring 篇</h3><h4 id="2-1-Spring-是干什么用到？"><a href="#2-1-Spring-是干什么用到？" class="headerlink" title="2.1 Spring 是干什么用到？"></a>2.1 Spring 是干什么用到？</h4><p><code>Spring</code>可以方便地给我们管理创建、获取和<code>kill</code>对象，不需要我们去额外做这一份工作。</p><h4 id="2-2-了解过-IOC吗？"><a href="#2-2-了解过-IOC吗？" class="headerlink" title="2.2 了解过 IOC吗？"></a>2.2 了解过 <code>IOC</code>吗？</h4><p><code>IOC</code>是控制反转的意思，在<code>Spring</code> 容器中，创建对象的工作不再由我们来负责，而是交由 <code>Spring</code> 容器去管理各个对象的生命周期。</p><h4 id="2-3-说一说-Spring-容器管理对象生命周期有什么用？"><a href="#2-3-说一说-Spring-容器管理对象生命周期有什么用？" class="headerlink" title="2.3 说一说 Spring 容器管理对象生命周期有什么用？"></a>2.3 说一说 Spring 容器管理对象生命周期有什么用？</h4><p>由于 <code>Spring</code>容器默认使用的是 <code>Single</code>单例创建对象，这样各个线程对同一个对象是共享的，就可以做到多个用户请求访问是拿的是同一个实例，不用总去创建对象，导致频繁的 <code>GC</code>垃圾回收。</p><h4 id="2-4-说一说-Spring-中容器它的创建实例的作用域"><a href="#2-4-说一说-Spring-中容器它的创建实例的作用域" class="headerlink" title="2.4 说一说 Spring 中容器它的创建实例的作用域"></a>2.4 说一说 Spring 中容器它的创建实例的作用域</h4><p>在 <code>Spring</code>容器中，有一个属性 <code>scope</code>，就是一个作用域，它可以指明创建对象是采用单例还是其他方式</p><p>单例的话多个线程下是共享实例的，当时只想到 <code>Request</code>，但这个不是线程级别的，没回答上来，没想到 <code>Prototype</code>（原型），技术官帮我解围了，说知道我知道想说什么，就是说不出来哈哈。</p><p><code>Prototype</code> 它是一个原型，在多个线程中的创建的单例是互不干扰的，也就是生命周期的处于线程。</p><p>当然还有其他，因为不怎么使用，所以就没有怎么说。</p><h3 id="MySQL-篇"><a href="#MySQL-篇" class="headerlink" title="MySQL 篇"></a>MySQL 篇</h3><h4 id="MySQL-你了解过哪些引擎"><a href="#MySQL-你了解过哪些引擎" class="headerlink" title="MySQL 你了解过哪些引擎"></a>MySQL 你了解过哪些引擎</h4><p>嗯？这个我了解过两个，<code>INNODB</code>和<code>Myisam</code></p><h4 id="这两个是有什么区别？"><a href="#这两个是有什么区别？" class="headerlink" title="这两个是有什么区别？"></a>这两个是有什么区别？</h4><p>我就说了第一个默认会使用 行锁，<code>Myisam</code> 使用的是表锁</p><h4 id="面试官继续追问，为什么？怎么判断的？"><a href="#面试官继续追问，为什么？怎么判断的？" class="headerlink" title="面试官继续追问，为什么？怎么判断的？"></a>面试官继续追问，为什么？怎么判断的？</h4><p>这个我真不知道该怎么回答，我就瞎扯了锁升级，就说 <code>INNODB</code>因为默认使用行锁，但是如果因为没有索引优化或者语句优化等问题，可能会出现锁升级现象，这是 <code>Myisam</code> 没有的。</p><p>面试官一头雾水，但没有反驳，好，继续下个问题。</p><h4 id="事务有了解吗？"><a href="#事务有了解吗？" class="headerlink" title="事务有了解吗？"></a>事务有了解吗？</h4><p>我说有有，这就来劲了，就说<code>INODB</code> 有事务，但<code>Myisam</code> 没有事务这说法，现在才明白面试官说这两个引擎的区别原来在这里。</p><p>面试官没有为难，知道问的差不多了，就开始手撕 <code>SQL</code></p><h4 id="口述SQL"><a href="#口述SQL" class="headerlink" title="口述SQL"></a>口述SQL</h4><p>给你一个表，这个表有三个字段，一个是学生 <code>id</code>，一个是课程名 <code>cname</code>，一个是课程成绩 <code>cscore</code></p><p>要求：如果有三门课程，要求找出学生的总成绩大于270，并且返回学生<code>id</code>和总成绩</p><p>纳尼，第一个想法就是想着连表查询，当时觉得没戏了，就很挣扎</p><p>口述：就是通过三张表自然关联，关联三门成绩，然后关联条件是学生id，<code>where</code> 是三门成绩之和大于<code>270</code></p><p>面试官觉得有问题，这种做法不通用，要我再想想其他方法</p><p>想了两分钟，没有思绪，给我个提示：可以使用 group by</p><p>分组？那就简单了，我就直接口述了，说可以先分组，然后在每个分组里面使用聚合函数<code>sum</code>，将总成绩这个条件满足<code>270</code>的查询出来</p><p>当时很紧张，怕错了，面试官一脸微笑的说，是的，思路是对的，你可以用在纸上用笔写下来吗？</p><p>他知道我口述可以，但还是不相信我动手能力，瞧不起了，可能之前用那个关联的SQL 手写SQL，出现了一点问题，但在他提出问题的时候，我立马说我可以修改下<code>sql</code>吗，改了再给他看了下，可能就是因为这个原因，自己不仔细写，给自己埋坑，让面试官对我有了质疑</p><p>于是这次我就好好捋了捋思绪，面试官看我迟迟未动笔，说不用紧张，慢慢想，当然我肯定不这么想，当时已经有想法了，只是怕又写错了<code>SQL</code>，因为当时已经有一个月没刷 力扣 <code>SQL</code>题型了，想了两分钟左右，写了出来</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> sc.sid, <span class="built_in">sum</span>(sc.score) <span class="keyword">as</span> sum_score</span><br><span class="line"><span class="keyword">from</span> SC sc</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> sc.sid</span><br><span class="line"><span class="keyword">having</span> <span class="keyword">on</span> <span class="built_in">sum</span>(sc.score) <span class="operator">&gt;</span> <span class="number">270</span></span><br></pre></td></tr></table></figure><p>就这样，面试官比较满意，就问我为什么当时没想出来，我就说当时他说给三科成绩，很容易就让人想到用联表</p><p>到这里 <code>SQL</code> 也没继续写了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简单三分钟自我介绍&quot;&gt;&lt;a href=&quot;#简单三分钟自我介绍&quot; class=&quot;headerlink&quot; title=&quot;简单三分钟自我介绍&quot;&gt;&lt;/a&gt;简单三分钟自我介绍&lt;/h2&gt;&lt;p&gt;自我介绍这里一笔带过，给对面介绍自己内在 + 外在 + 校园经历 + 校园项目  +</summary>
      
    
    
    
    <category term="面经" scheme="http://fyupeng.github.io/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
    <category term="Java面经" scheme="http://fyupeng.github.io/tags/Java%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>长城软件面经</title>
    <link href="http://fyupeng.github.io/2022/09/25/%E9%95%BF%E5%9F%8E%E8%BD%AF%E4%BB%B6%E9%9D%A2%E7%BB%8F/"/>
    <id>http://fyupeng.github.io/2022/09/25/%E9%95%BF%E5%9F%8E%E8%BD%AF%E4%BB%B6%E9%9D%A2%E7%BB%8F/</id>
    <published>2022-09-25T10:28:40.000Z</published>
    <updated>2022-09-25T15:23:04.149Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简单三分钟自我介绍"><a href="#简单三分钟自我介绍" class="headerlink" title="简单三分钟自我介绍"></a>简单三分钟自我介绍</h2><p>自我介绍这里一笔带过，给对面介绍自己内在 + 外在 + 校园经历 + 校园项目  + 意向岗位</p><h3 id="技术面"><a href="#技术面" class="headerlink" title="技术面"></a>技术面</h3><h4 id="1-Java基础篇"><a href="#1-Java基础篇" class="headerlink" title="1. Java基础篇"></a>1. Java基础篇</h4><h5 id="1-1-说一说数据结构"><a href="#1-1-说一说数据结构" class="headerlink" title="1.1 说一说数据结构"></a>1.1 说一说数据结构</h5><p>说下链表的属性，指针属性</p><p>树结构了解过吗？</p><p>叶子节点怎么存储的？</p><h4 id="2-Spring-篇"><a href="#2-Spring-篇" class="headerlink" title="2. Spring 篇"></a>2. Spring 篇</h4><h5 id="2-1-Spring-MVC-的原理"><a href="#2-1-Spring-MVC-的原理" class="headerlink" title="2.1 Spring MVC 的原理"></a>2.1 Spring MVC 的原理</h5><p>主要有5个组件，前端控制器、映射器、处理器、处理器适配器、视图解析器</p><ul><li><p>前端控制器也就是中央处理器，它主要负责前端用户的请求和对其他组件的转发调用；</p></li><li><p>前端控制器接收到请求后，会把请求转发给处理器映射器，处理器会根据配置或注解（@Controller）找到最终要执行的Handler；</p></li><li><p>然后将Handler（自己的业务处理）对象以及其对应的拦截器，封装到HandlerExecutionChain对象中并以它的形式放回；</p></li><li><p>前端控制器根据获取到的Handler（Controller），去选择一个合适的HandlerAdapter（它还支持Servlet、HttpRequestHandler、ThrowawayController），成功获取到会先去执行拦截器；</p></li><li><p>这时将开始对提取Request中的模型数据，并且将Handler的入参进行数据填充，以至于我们写控制层方法时，入参是前端传来的值，在填充过程中，根据自己的配置，Spring还可以帮你做一些额外操作：</p><ul><li>Json/Xml 数据转换成对象</li><li>格式化请求数据</li><li>校验</li></ul></li><li><p>Handler执行完成后，返回一个ModelAndView（视图和视图需要填充的模型数据）</p></li><li><p>前端控制器根据返回的ModelAndView，选择合适的ViewResolver</p></li><li><p>ViewResolver 结合Model和View，来渲染视图</p></li><li><p>最终前端控制器将渲染结果返回给客户端</p></li></ul><h4 id="3-JVM-篇"><a href="#3-JVM-篇" class="headerlink" title="3. JVM 篇"></a>3. JVM 篇</h4><h5 id="3-1-说一说你对jvm内存结构的理解"><a href="#3-1-说一说你对jvm内存结构的理解" class="headerlink" title="3.1 说一说你对jvm内存结构的理解"></a>3.1 说一说你对jvm内存结构的理解</h5><p>jvm 内存模型由程序计数器、方法区、虚拟机栈、本地方法栈、堆和运行常量池组成。</p><p>方法区：主要是存储类变量，静态变量，常量以及<code>class</code>描述信息（会在类加载后加载到方法区中）</p><p>虚拟机栈：虚拟机栈跟线程是直接挂钩的，它的生命周期跟线程一样，而且虚拟机栈设置的大小（<code>-Xss1024k</code>，1024个字节1M单词缩写Stack Size），当设置过大时，在堆大小固定的情况下，总内存 = 堆内存 + 线程数 * 虚拟机栈大小，可线程数就会相应减少；</p><p>本地方法栈：跟虚拟机栈相似，不过不是用Java写的；</p><p>程序计数器：线程私有，每个线程在让出CPU会由它来记录当前位置，以便恢复CPU还在原位置执行；</p><p>堆：存放Java对象实例，在JDK7版本中，由新生代（Eden区、Survivor区）和 老年代组成，也是GC垃圾收集器处理的主要区域，俗称GC堆，是管理内存中最大的一块；</p><p>运行时常量池是放在方法区中的，作为方法区的一部分。</p><h5 id="3-2-对象创建和销毁的过程"><a href="#3-2-对象创建和销毁的过程" class="headerlink" title="3.2 对象创建和销毁的过程"></a>3.2 对象创建和销毁的过程</h5><p>对象创建的过程其实在 <code>jvm</code> 中包括了加载、链接（包含验证（虚拟机的安全性、对象头、父类与子类中<code>final</code>等声明的安全性校验等等）、准备、解析）、初始化；</p><p>准备阶段：申请内存空间并完成默认的初始化，比如int类型默认初始化为4个字节的内存空间，并初始化为0；</p><p>解析阶段：将常量池中的引用解析为直接引用，也就是将类中的常量池放到了运行时常量池中，这样我们在直接调用方法或者引用类的时候，是需要符号引用的，只不过<code>jvm</code>帮我们自动引用了常量中的符号，就成直接引用。</p><p>初始化阶段：用户真正的赋值操作，即调用相应的构造器构造对象，构造对象创建的时候，如果是比较复杂的，由于虚拟机优化机制，会出现指令重排序问题，什么问题？</p><p>在该场景中，构造过程分为几个步骤：申请内存 -&gt; 构造块构造 -&gt; 内存地址返回，这里面的指令为了性能上的提示，而不改变结果，jvm可能会将内存地址也就是构造函数创建的对象指向的内存地址放到构造块过程中返回，而没有等到最后。</p><p>引用：编译器可以自由地以优化的名义对指令的顺序进行随意处理。</p><p>那么怎么解决？</p><p>当然是保证原子性呀！</p><p>怎么保证？</p><p><code>final</code>声明不仅能保证类不可继承，方法不可重写，变量不可变，还有一个重要的特点就是能保证可见性，媲美<code>volatile</code></p><p>可见性保证就是对象如果已经可见（地址已经返回了，那么保证它构造的完整性，也就是指令不会发生重排）性</p><p>文章分享：<a href="https://qa.1r1g.com/sf/ask/451997661/">https://qa.1r1g.com/sf/ask/451997661/</a></p><p>内存模型官方讲解：<a href="http://www.cs.umd.edu/~pugh/java/memoryModel/jsr-133-faq.html">http://www.cs.umd.edu/~pugh/java/memoryModel/jsr-133-faq.html</a></p><p>推荐比较好的网站：<a href="https://qa.1r1g.com/">https://qa.1r1g.com/</a></p><blockquote><p> 补充</p></blockquote><p>如果类中的成员变量声明为final并且是基本类型，那么赋值阶段会在准备阶段就完成了，这些可实现一些并发安全性应用；</p><h5 id="3-2-GC-垃圾回收了解过吗"><a href="#3-2-GC-垃圾回收了解过吗" class="headerlink" title="3.2 GC 垃圾回收了解过吗"></a>3.2 GC 垃圾回收了解过吗</h5><p>了解过一点点，没了，他就不问了……</p><p>我就是专门去看了<code>gc</code>中的一些原理，比如复制算法、并发标记、并发清除、分代回收，还有<code>Serial</code>、<code>parNew</code>、<code>parallel Scavenge</code>和<code>g1</code>这些，看來不能太低调了。</p><h5 id="3-3-JVM-调优了解过吗"><a href="#3-3-JVM-调优了解过吗" class="headerlink" title="3.3 JVM 调优了解过吗"></a>3.3 JVM 调优了解过吗</h5><p>答案是没有，所以没有下文了，可惜这篇面经比较卑微，味道不够香。</p><p>因为就是简单使用过，没有在具体项目场景用到，不敢吹嘘。</p><h5 id="3-4-volatile-能保证原子性吗"><a href="#3-4-volatile-能保证原子性吗" class="headerlink" title="3.4 volatile 能保证原子性吗"></a>3.4 volatile 能保证原子性吗</h5><p>不能，volatile可以保证可见性，它是在<code>jvm</code>优化后，出现指令重排序后才有的，能够防止指令的重排序，也就是说指令重排序可能会先将对象在执行构造函数中，提前把对象所在地址给返回了，这就可能导致成员变量出现为null的情况，有了volatile就不会发生。</p><p><code>volatile</code>一般修饰于变量</p><p>当然除了这个，<code>volatile</code>保证可见性还体现在内存与高速缓存之间，如果一个变量通过for循环去执行，那么<code>jvm</code>将进行性能优化，将内存中的变量放到高速缓存中，这样容易出现内存与高速缓存的不一致性问题，<code>volatile</code>可以保证对内存中变量的修改及时同步到高速缓存中。</p><h4 id="4-SQL-篇"><a href="#4-SQL-篇" class="headerlink" title="4. SQL 篇"></a>4. SQL 篇</h4><h5 id="4-1-聊一聊你对SQL中的优化"><a href="#4-1-聊一聊你对SQL中的优化" class="headerlink" title="4.1 聊一聊你对SQL中的优化"></a>4.1 聊一聊你对SQL中的优化</h5><p>主要分为语句优化和索引优化</p><p>语句优化比如避免使用or，可能导致全盘遍历，我是说了join连接和子查询，前一个只需要查询一次，后一个会多次遍历全表，如果数据量大的表将很严重。</p><p>索引优化的话，面试官很耐心给我讲了组合索引、失效的问题</p><h5 id="4-2-SQL-中的函数的处理"><a href="#4-2-SQL-中的函数的处理" class="headerlink" title="4.2 SQL 中的函数的处理"></a>4.2 SQL 中的函数的处理</h5><p><code>SQL</code>中的函数比如时间的<code>yyyy-MM-dd hh-mm-ss</code>,通过这种设置可以来处理相应的时间</p><p>可以看看这篇文章：<a href="https://blog.csdn.net/chentaocba/article/details/7539409">https://blog.csdn.net/chentaocba/article/details/7539409</a></p><p>可以这样自定义去处理拼接时间</p><h4 id="5-Redis-篇"><a href="#5-Redis-篇" class="headerlink" title="5. Redis 篇"></a>5. Redis 篇</h4><h5 id="5-1-聊一聊哨兵模式"><a href="#5-1-聊一聊哨兵模式" class="headerlink" title="5.1 聊一聊哨兵模式"></a>5.1 聊一聊哨兵模式</h5><p>哨兵模式的应用其实是<code>Redis</code>集群中故障恢复和高可用的应用，在<code>Redis</code>读写分离也就是主从复制中，哨兵节点作为独立节点，不参与选举。</p><p>在主节点也就是<code>master</code>节点宕机后，多个哨兵节点一致发现主节点下线，通过投票选举哪一个从节点选举为主节点。</p><p>其实就是一种监控主节点是否故障的行为。</p><h4 id="5-分布式"><a href="#5-分布式" class="headerlink" title="5. 分布式"></a>5. 分布式</h4><h5 id="3-1-说一说服务降级"><a href="#3-1-说一说服务降级" class="headerlink" title="3.1 说一说服务降级"></a>3.1 说一说服务降级</h5><p>在请求超时、资源不足、<code>CPU</code>、数据库<code>IO</code>达到瓶颈时，采取的一种补救措施。</p><p>服务降级主要有<code>Dubbbo</code>的<code>Mock</code>和<code>Spring Cloud</code>的<code>Hystrix</code>，屏蔽对远程的调用，一般使用<code>SpringBoot</code>比较推荐整合<code>Hystrix</code>来实现服务降级容错。</p><h5 id="3-2-聊一聊你的项目分布式中怎么解决出现的问题"><a href="#3-2-聊一聊你的项目分布式中怎么解决出现的问题" class="headerlink" title="3.2 聊一聊你的项目分布式中怎么解决出现的问题"></a>3.2 聊一聊你的项目分布式中怎么解决出现的问题</h5><p>我做的是一个分布式的博客管理项目，在搭建并部署分布式项目时，调用远程服务的时候，注册中心<code>Nacos</code>很容易出现宕机，当时排查的原因是内存不够，当时使用了阿里的两台服务器、一台腾讯云服务器来搭建分布式项目，阿里一台作为前端和<code>Nginx</code>做反向代理，一台运行着博客的文章、评论、分类标签和用户的五个服务，一台作为代理服务器，处理前端的请求、远程调用腾讯云服务器的服务，但我把注册中心放到了腾讯云上，因为腾讯云上的服务需要进行服务注册，而且注册中心<code>Nacos</code>启动是带有Web后台管理页面的，所以就作为一个内部的服务器使用。</p><p>于是解决方案就是将多个服务进行横向拆分，将文章和用户的服务放到代理服务器上运行，解决了在远程调用服务的时候因为请求超时或资源不足导致<code>Nacos</code>注册中心出现宕机的情况。</p><h4 id="6-网络编程"><a href="#6-网络编程" class="headerlink" title="6. 网络编程"></a>6. 网络编程</h4><h5 id="6-1-Tomcat-与-Netty-有什么区别"><a href="#6-1-Tomcat-与-Netty-有什么区别" class="headerlink" title="6.1 Tomcat 与 Netty 有什么区别"></a>6.1 Tomcat 与 Netty 有什么区别</h5><p><code>Tomcat</code>是一种使用<code>http</code>协议的<code>web</code>容器，是用来启动<code>web</code>应用的，而Netty是一种自定义处理各种字节流数据做相应的编解码，也就是可以自定义通信协议，<code>Netty</code>是一款基于<code>NIO</code>的网络通信框架，而且Tomcat的话其实也支持<code>NIO</code>模式。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简单三分钟自我介绍&quot;&gt;&lt;a href=&quot;#简单三分钟自我介绍&quot; class=&quot;headerlink&quot; title=&quot;简单三分钟自我介绍&quot;&gt;&lt;/a&gt;简单三分钟自我介绍&lt;/h2&gt;&lt;p&gt;自我介绍这里一笔带过，给对面介绍自己内在 + 外在 + 校园经历 + 校园项目  +</summary>
      
    
    
    
    <category term="面经" scheme="http://fyupeng.github.io/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
    <category term="Java面经" scheme="http://fyupeng.github.io/tags/Java%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>华资面经</title>
    <link href="http://fyupeng.github.io/2022/09/25/%E5%8D%8E%E8%B5%84%E9%9D%A2%E7%BB%8F/"/>
    <id>http://fyupeng.github.io/2022/09/25/%E5%8D%8E%E8%B5%84%E9%9D%A2%E7%BB%8F/</id>
    <published>2022-09-25T10:28:30.000Z</published>
    <updated>2022-09-25T10:30:09.032Z</updated>
    
    <content type="html"><![CDATA[<h2 id="华资一面"><a href="#华资一面" class="headerlink" title="华资一面"></a>华资一面</h2><p>—— 人力面（挂）</p><h3 id="1-Spring"><a href="#1-Spring" class="headerlink" title="1. Spring"></a>1. Spring</h3><h4 id="1-1-Spring-的生命周期"><a href="#1-1-Spring-的生命周期" class="headerlink" title="1.1 Spring 的生命周期"></a>1.1 Spring 的生命周期</h4><blockquote><p>推荐学习链接：<a href="https://blog.csdn.net/shijinjins/article/details/124071095">https://blog.csdn.net/shijinjins/article/details/124071095</a> </p></blockquote><p>Spring 生命周期会经历过四个阶段，分别是实例化、属性赋值、初始化、销毁</p><p>其他的一些阶段就是通过AOP面向切面扩展来的，能够让你在实例化、初始化和销毁前后做一些逻辑。</p><p>初始化阶段，有一个特别重要的接口<code>BeanPostProcessor</code></p><ul><li><code>postProcessorBeforeInitialization();</code> // 初始化前调用</li><li><code>postProcessorAfterInitialization();</code> // 初始化后调用</li></ul><p><strong>初始化</strong>方式有三个</p><ul><li><code>InitializingBean</code>类的<code>afterPropertiesSet</code>方法</li><li><code>@PostConstruct</code>注解标注的方法 // <code>Spring</code>支持javax包中的<code>@PostConstruct</code>，会在属性值注入成功后执行</li><li><code>Spring</code>配置文件<code>applicationContext.xml</code>的标签属性<code>init-method=&quot;initMethod&quot;</code></li></ul><p>这里提醒，<code>@PostConstruct</code>是通过<code>Spring</code>的<code>BeanPostProcessor#postProcessBeforeInitialization(Object, String)</code>来完成调用的</p><p>如果是使用到了<code>Spring</code>自动注入来使用创建的<code>Bean</code>，那么如果使用反射的方式创建对象执行构造方法，先后顺序是这样的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line"></span><br><span class="line">A[服务器加载Servlet]--&gt; B[Servlet构造函数]</span><br><span class="line">B --&gt; C[&quot;@Autowire&quot;]</span><br><span class="line">C --&gt; D[&quot;@PostConstruct&quot;]</span><br></pre></td></tr></table></figure><p>反射的方式会在执行构造器后返回，所以你要通过反射使用<code>Bean</code>，可在<code>@PostConstruct</code>注解的方法保存该<code>Bean</code>，再去调用使用。</p><p><strong>销毁</strong>方式有三个</p><ul><li><code>@PreDestroy</code>注解标注的方法 //  // <code>Spring</code>支持javax包中的<code>@preDestroy</code>，会在销毁前执行</li><li><code>DisposableBean</code>接口的<code>destroy</code>方法</li><li><code>Spring</code>配置文件<code>applicationContext.xml</code>的标签属性<code>destroy-method=;&quot;destroyMethod&quot;</code></li></ul><p>这里提醒，<code>@preDestroy</code>执行是通过<code>Spring</code>的<code>DestructionAwareBeanPostProcessor#postProcessBeforeDestruction(Object, String)</code>来完成调用的</p><blockquote><p> 简要步骤</p></blockquote><p>1.当程序加载运行时会根据spring中配置文件找到bean配置的属性和方法，并通过java反射机制创建实例化bean对象。</p><p>Bean实现了<code>BeanNameAware</code>接口，执行了<code>setBeanName</code>方法，实现注入对象。</p><p>2.实现了<code>BeanFactoryAware</code>工厂接口，执行了<code>setBeanFactory</code>方法。</p><p>3.实现了<code>ApplicationContext</code>接口类，执行了<code>setsetApplicationContest</code>方法。</p><p>4.实现了<code>BeanPostProcessor</code>接口类，执行<code>postProcessBeforeInitialization</code>方法</p><p>5.实现了<code>InitiliazingBean</code> 执行<code>afterPropertiesSet</code>方法，并加载配置文件定义了<code>init-method</code> 则执行对应初始化方法<code>BeanPostProcessor</code> 执行<code>postProcessorfterInitilization</code>方法，完成  <code>Bean</code>的初始化，使得<code>bean</code>可以使用。</p><p>6.实现了<code>DisposabileBean</code>接口执行<code>destroy</code>方法，加载配置文件中的<code>destroy-method</code>方法销毁<code>bean</code>对象实例。</p><h4 id="1-2-Spring-作用域"><a href="#1-2-Spring-作用域" class="headerlink" title="1.2 Spring 作用域"></a>1.2 Spring 作用域</h4><p>单例（默认<code>Single</code>）和多例（<code>Prototype</code>）</p><p>单例在一个容器里面只存在一个对象，多例的Bean生命周期在容器产生时并不创建，对象使用时才创建，最后由JVM垃圾回收期回收</p><p>生命周期出生和销毁还可以自己指定，比如</p><ul><li>init-method 对象出生之后立刻执行什么方法</li><li>destroy-method对象销毁之前执行什么方法</li></ul><h4 id="1-3-Spring-依赖注入方式"><a href="#1-3-Spring-依赖注入方式" class="headerlink" title="1.3 Spring 依赖注入方式"></a>1.3 Spring 依赖注入方式</h4><p>有三种：属性注入、构造函数注入、工厂方法（通过标签属性配置静态或实例工厂）注入</p><p>而基于这三种方式有多种实现：配置文件实现、注解实现、</p><h3 id="2-集合"><a href="#2-集合" class="headerlink" title="2. 集合"></a>2. 集合</h3><p>集合的性质: <strong>唯一性</strong>、<strong>无序性</strong>、<strong>确定性</strong></p><p>唯一性指的是集合元素是不重复的、无序性指的是集合插入元素的顺序性、确定性是指集合中元素是确定的，不是相对性的。</p><p>集合类型按类型划分可以划分为可重复集合不可重复集</p><ul><li>可重复集合：<code>List</code>实现类</li><li>不可重复集合：<code>Set</code>实现类、<code>Map</code>实现类（<code>key</code>）</li></ul><p>按照有序性（添加和访问）划分可以划分为有序集和无序集</p><ul><li>有序集：<code>List</code>实现类、<code>TreeSet</code>、<code>LinkedHashSet</code>、<code>LinkedHashMap</code>、<code>TreeMap</code></li><li>无序集：<code>HashSet</code>、<code>HashMap</code>、</li></ul><p>按照结构划分可以划分为列表<code>List</code>、<code>Set</code>、<code>Map</code>（<code>Stack</code> 和 <code>Queue</code>）</p><p>List：<code>ArrayList</code>、<code>LinkedList</code></p><p>Set：<code>HashSet</code>、<code>LinkedHashSet</code>、<code>TreeSet</code></p><p>Map：<code>HashMap</code>、<code>HashTable</code>、<code>TreeMap</code>、<code>LinkedHashMap</code>、<code>CurrentHashMap</code>、</p><p>按照存储连续性划分可以划分为连续集和散列集</p><ul><li>连续集：<code>ArrayList</code></li><li>散列集：<code>LinkedList</code>、<code>Map</code>实现类、<code>Set</code>实现类</li></ul><h3 id="3-线程安全"><a href="#3-线程安全" class="headerlink" title="3. 线程安全"></a>3. 线程安全</h3><h4 id="3-1-线程安全的集合有哪些？"><a href="#3-1-线程安全的集合有哪些？" class="headerlink" title="3.1 线程安全的集合有哪些？"></a>3.1 线程安全的集合有哪些？</h4><p>HashTable、CurrentHashMap、CurrentLinkedQueue、ArrayBlockingQueue、LinkedBlockingQueue</p><p>HashTable：它的方法都使用了重量级锁synchronized修饰来保证方法执行的线程安全。</p><p>CurrentHashMap：有JDK迭代版本；</p><ul><li>7使用了分段锁Segment（继承可重入锁ReentrantLock）实现线程安全，是真正意义上实现了并发</li><li>8使用了synchronized + CAS，因为在1.6版本之后，synchronized一步步得到优化<ul><li>包含了偏向锁、轻量级锁、重量级锁</li><li>处于偏向锁的对象，是指可以在获得该偏向锁的同一个线程中，多次执行同步代码块时相当于无锁</li><li>而如果处于偏向锁的对象被其他线程获取了，偏向锁将不再偏向，就升级为轻量级锁</li><li>升级为轻量级锁还是有机会继续偏向锁的，是怎么个原理？</li><li>在对象头前8个字节中，存储了偏向线程id，前提得是该线程未获取锁对象，获取锁对象后设置的是当前线程id</li><li>所以想让对象头上的偏向线程id重新偏向为当前线程id，得让该线程重复获取锁对象达到阈值20次才会偏向，不过只能偏向一次</li><li>这就是锁降级，如果有第三个线程参与了，同样执行第二个线程的操作，将不再偏向（对象头偏向线程id重置为0）</li><li>这是由再次升级为轻量级锁，前面是不发生竞争，如果多个线程发生竞争，竞争失败会自旋CAS再次尝试获取锁，如果还是失败</li><li>这时升级为重量级锁，重量级锁将不再通过乐观锁CAS操作，而是会发生阻塞，必须等获得锁的线程释放锁才能让给下一个线程</li></ul></li></ul><p>CurrentLinkedQueue：使用了非阻塞的方式实现了线程安全，是一个无锁化的单向队列，使用到了<code>CAS</code> + <code>for(;;)</code>，而且这种单向队列巧妙利用节点的不可重用 + CAS + next 指向本身 + GC垃圾回收，规避掉了ABA问题</p><ul><li>因为节点出队列并不会马上出队列，而是通过next指向自己让GC垃圾回收掉，这样有线程刻意去ABA操作时，发现还有旧值，没法做修改达到ABA的目的，这说专业点就是延迟出队。</li></ul><p>LinkedBlockingQueue：与CurrentLinkedQueue非常像，也是一个无界队列，这样如果入队快于出队的情况容易出现栈溢出</p><p>ArrayBlockingQueue：是有界队列</p><h3 id="4-谈谈自己的项目"><a href="#4-谈谈自己的项目" class="headerlink" title="4. 谈谈自己的项目"></a>4. 谈谈自己的项目</h3><p>略</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;华资一面&quot;&gt;&lt;a href=&quot;#华资一面&quot; class=&quot;headerlink&quot; title=&quot;华资一面&quot;&gt;&lt;/a&gt;华资一面&lt;/h2&gt;&lt;p&gt;—— 人力面（挂）&lt;/p&gt;
&lt;h3 id=&quot;1-Spring&quot;&gt;&lt;a href=&quot;#1-Spring&quot; class=&quot;hea</summary>
      
    
    
    
    <category term="面经" scheme="http://fyupeng.github.io/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
    <category term="Java面经" scheme="http://fyupeng.github.io/tags/Java%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>第一场面试</title>
    <link href="http://fyupeng.github.io/2022/09/25/%E7%AC%AC%E4%B8%80%E5%9C%BA%E9%9D%A2%E8%AF%95/"/>
    <id>http://fyupeng.github.io/2022/09/25/%E7%AC%AC%E4%B8%80%E5%9C%BA%E9%9D%A2%E8%AF%95/</id>
    <published>2022-09-25T10:26:54.000Z</published>
    <updated>2022-09-25T10:28:18.019Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简单三分钟自我介绍"><a href="#简单三分钟自我介绍" class="headerlink" title="简单三分钟自我介绍"></a>简单三分钟自我介绍</h2><p>自我介绍这里一笔带过，给对面介绍自己内在 + 外在 + 校园经历 + 校园项目  + 意向岗位</p><h2 id="技术面"><a href="#技术面" class="headerlink" title="技术面"></a>技术面</h2><h3 id="1-Spring-原理篇"><a href="#1-Spring-原理篇" class="headerlink" title="1. Spring 原理篇"></a>1. Spring 原理篇</h3><h4 id="1-1-有使用过Spring吗，说一说它的-SpringMVC-原理"><a href="#1-1-有使用过Spring吗，说一说它的-SpringMVC-原理" class="headerlink" title="1.1 有使用过Spring吗，说一说它的 SpringMVC 原理"></a>1.1 有使用过Spring吗，说一说它的 SpringMVC 原理</h4><p>主要有5个组件，前端控制器、映射器、处理器、处理器适配器、视图解析器</p><ul><li><p>前端控制器也就是中央处理器，它主要负责前端用户的请求和对其他组件的转发调用；</p></li><li><p>前端控制器接收到请求后，会把请求转发给处理器映射器，处理器会根据配置或注解（@Controller）找到最终要执行的Handler；</p></li><li><p>然后将Handler（自己的业务处理）对象以及其对应的拦截器，封装到HandlerExecutionChain对象中并以它的形式放回；</p></li><li><p>前端控制器根据获取到的Handler（Controller），去选择一个合适的HandlerAdapter（它还支持Servlet、HttpRequestHandler、ThrowawayController），成功获取到会先去执行拦截器；</p></li><li><p>这时将开始对提取Request中的模型数据，并且将Handler的入参进行数据填充，以至于我们写控制层方法时，入参是前端传来的值，在填充过程中，根据自己的配置，Spring还可以帮你做一些额外操作：</p><ul><li>Json/Xml 数据转换成对象</li><li>格式化请求数据</li><li>校验</li></ul></li><li><p>Handler执行完成后，返回一个ModelAndView（视图和视图需要填充的模型数据）</p></li><li><p>前端控制器根据返回的ModelAndView，选择合适的ViewResolver</p></li><li><p>ViewResolver 结合Model和View，来渲染视图</p></li><li><p>最终前端控制器将渲染结果返回给客户端</p></li></ul><h3 id="1-2-springboot-有什么优点"><a href="#1-2-springboot-有什么优点" class="headerlink" title="1.2 springboot 有什么优点"></a>1.2 springboot 有什么优点</h3><p><code>springboot</code> 它可以帮我快速、使用最低代码最少时间开发出一个项目，不想 <code>SpringMVC</code>，需要繁琐写很多配置信息，我们只关注写业务代码即可。</p><p>通过配置文件解耦代码，在一些可能改动的配置信息，可以不通过修改代码再打包部署，而是让代码去外部读取该配置文件，再去运行。</p><p>还有<code>SpringBoot</code>是使用了<code>maven</code> 可以方便对版本的管理，能够让自己不需要考虑版本依赖问题和兼容版本的问题。</p><h3 id="Redis-篇"><a href="#Redis-篇" class="headerlink" title="Redis 篇"></a>Redis 篇</h3><h3 id="有使用过-Redis吗"><a href="#有使用过-Redis吗" class="headerlink" title="有使用过 Redis吗"></a>有使用过 Redis吗</h3><p>有，它是一个缓存数据库，主要存储的是<code>k-v</code>类型的数据。</p><h3 id="那说说它的一个缓存雪崩？"><a href="#那说说它的一个缓存雪崩？" class="headerlink" title="那说说它的一个缓存雪崩？"></a>那说说它的一个缓存雪崩？</h3><p>嗯？缓存雪崩的话，就是<code>key</code>集中失效，导致 <code>Redis</code> 相当于宕机，大量请求依旧打到<code>mysql</code>数据库上了。</p><p>这里总结一下，其实雪崩<code>Redis</code>服务基本不可用了，存储层的调用量会暴增，造成存储层也会挂掉的情况，而且雪崩会出现周期性的峰值，因为就算缓存失效了，请求到了存储层，获取到数据后，是会再做一次缓存的，所以会出现周期性峰值。</p><p>致命的原因是存储层在暴增的情况下扛不住调用后，导致数据库直接挂掉了。</p><h3 id="有什么解决措施？"><a href="#有什么解决措施？" class="headerlink" title="有什么解决措施？"></a>有什么解决措施？</h3><p>嗯？我们可以对那个 key 的缓存时间设置更长一些，缓存雪崩导致的原因是因为太过于集中失效，导致暴增，那么如果我们均摊一下时间，就能避免出现该情况，所以我们可以对缓存时效设置的更随机性一些，且对一些热点数据缓存时间设置永久性。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简单三分钟自我介绍&quot;&gt;&lt;a href=&quot;#简单三分钟自我介绍&quot; class=&quot;headerlink&quot; title=&quot;简单三分钟自我介绍&quot;&gt;&lt;/a&gt;简单三分钟自我介绍&lt;/h2&gt;&lt;p&gt;自我介绍这里一笔带过，给对面介绍自己内在 + 外在 + 校园经历 + 校园项目  +</summary>
      
    
    
    
    <category term="面经" scheme="http://fyupeng.github.io/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
    <category term="Java面经" scheme="http://fyupeng.github.io/tags/Java%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>ConCurrentHashMap底层原理透析</title>
    <link href="http://fyupeng.github.io/2022/08/06/ConCurrentHashMap%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E9%80%8F%E6%9E%90/"/>
    <id>http://fyupeng.github.io/2022/08/06/ConCurrentHashMap%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E9%80%8F%E6%9E%90/</id>
    <published>2022-08-06T05:56:54.000Z</published>
    <updated>2023-01-04T03:15:58.326Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>创作宗旨：化繁为简，绝不冗余，点到为止</p></blockquote><p><code>ConcurrentHashMap&lt;K,V&gt;</code> 继承了<code>AbstractMap&lt;K,V&gt;</code>，实现了<code>ConcurrentMap&lt;K,V&gt;</code>和<code>Serializable</code>。<br><strong>说明：</strong><br><code>AbstractMap&lt;K,V&gt;</code>实现了基本的<code>Map</code>操作<br><code>ConcurrentMap&lt;K,V&gt;</code>规范了对<code>k-v</code>的并发操作的方法</p><h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><ol><li><h3 id="ConCurrentHashMap是如何做到线程安全的？"><a href="#ConCurrentHashMap是如何做到线程安全的？" class="headerlink" title="ConCurrentHashMap是如何做到线程安全的？"></a>ConCurrentHashMap是如何做到线程安全的？</h3>通俗来讲，<code>ConcurrentHashMap&lt;K,V&gt;</code>已经迭代了几个版本，我们先从<code>JDK7</code>说起,起初为了实现了对<code>HashMap</code>真正意义上的并发，在<code>ConcurrentHashMap&lt;K,V&gt;</code>引入了一个静态内部类<code>Segment</code>(段)，而且<code>ConcurrentHashMap&lt;K,V&gt;</code>也聚合了一个<code>Segment</code>的成员变量数组来维护，每一个<code>Segment</code>数组的下标元素相当于一个<code>HashMap</code>，也就是一个<code>HashEntry数组</code> + 每位下标元素构成一个<code>HashEntry</code>链的头结点（依旧保存值），每次存在线程安全的操作都会去使用该数组的其中一个下标，并锁住该下标（其他线程无法访问），而不同[下标之间的操作是不会相互影响的，也就不存在冲突的情况。<br><code>Segment</code>继承了<code>ReentrantLock</code>（<code>可重入锁</code>），用法其实用到加锁和解锁，保证每一个线程使用前加锁，使用完成后释放锁。<br><code>ConcurrentHashMap</code>中<code>Segment</code>与<code>Entries</code>的示意图<br><img src="https://yupeng-tuchuang.oss-cn-shenzhen.aliyuncs.com/dafc603d0b93fd22610455e48eaa3f5f.png" alt="image.png"><br>更专业来讲，<code>ConcurrentHashMap</code>使用了分段锁<code>Segment</code>来解决线程安全。<h3 id="2-JDK7-的-get-和-put-以及扩容"><a href="#2-JDK7-的-get-和-put-以及扩容" class="headerlink" title="2. JDK7 的 get 和 put 以及扩容"></a>2. JDK7 的 get 和 put 以及扩容</h3></li></ol><ul><li>get<br><code>get</code> 操作没有任何加锁，所以在<code>ConCurrent</code>是非常高效的。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">HashEntry</span>&lt;K,V&gt; &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> hash;</span><br><span class="line">        <span class="keyword">final</span> K key;</span><br><span class="line">        <span class="keyword">volatile</span> V value;</span><br><span class="line">        <span class="keyword">volatile</span> HashEntry&lt;K,V&gt; next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>就算获取<code>key</code>之前<code>value</code>被改变了，由于<code>volatile</code>修饰了<code>value</code>变量，所以对内容是及时更新的，<code>新增</code>和<code>删除</code>操作亦是如此。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    Segment&lt;K,V&gt; s; <span class="comment">// manually integrate access methods to reduce overhead</span></span><br><span class="line">    HashEntry&lt;K,V&gt;[] tab;</span><br><span class="line">    <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> hash(key);</span><br><span class="line">    <span class="type">long</span> <span class="variable">u</span> <span class="operator">=</span> (((h &gt;&gt;&gt; segmentShift) &amp; segmentMask) &lt;&lt; SSHIFT) + SBASE;</span><br><span class="line">    <span class="comment">// Concurrent 初始化时会初始 Segment数组和 第 0 位下标即Segment[0]（包括 HashEntry数组 的初始化）</span></span><br><span class="line">    <span class="comment">// 如果 segment 对应的 HashEntry 数组不为空，则往下遍历</span></span><br><span class="line">    <span class="keyword">if</span> ((s = (Segment&lt;K,V&gt;)UNSAFE.getObjectVolatile(segments, u)) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">        (tab = s.table) != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 遍历 HashEntry 数组 哈希命中的下标元素（链表）</span></span><br><span class="line">        <span class="keyword">for</span> (HashEntry&lt;K,V&gt; e = (HashEntry&lt;K,V&gt;) UNSAFE.getObjectVolatile</span><br><span class="line">             (tab, ((<span class="type">long</span>)(((tab.length - <span class="number">1</span>) &amp; h)) &lt;&lt; TSHIFT) + TBASE);</span><br><span class="line">             e != <span class="literal">null</span>; e = e.next) &#123;</span><br><span class="line">            K k;</span><br><span class="line">            <span class="comment">// 如果找到了 key就返回对应的value，否则往下继续遍历链表</span></span><br><span class="line">            <span class="comment">// 这里前面匹配的是 基本数据类型，</span></span><br><span class="line">            <span class="comment">//如果是 复杂对象，则使用的是先 hash筛选桶下标，相等再去 比较 “值”</span></span><br><span class="line">            <span class="keyword">if</span> ((k = e.key) == key || (e.hash == h &amp;&amp; key.equals(k)))</span><br><span class="line">                <span class="keyword">return</span> e.value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>post<br>在<code>ConcurrentHashMap</code>中<code>post</code>操作是不允许设置<code>value</code>为<code>null</code>。<br><code>Concurrent</code>初始化时会初始<code>Segment</code>数组和 第<code>0</code>位下标即<code>Segment[0]</code>（其中包括<code>HashEntry</code>数组的初始化），所以这里会出现命中到另外<code>15</code>个未初始化的<code>Segment</code>锁段，即当前<code>Segment</code>为<code>null</code>的情况<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    Segment&lt;K,V&gt; s;</span><br><span class="line">    <span class="comment">// 不允许对 value 设置为 null</span></span><br><span class="line">    <span class="keyword">if</span> (value == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">    <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> hash(key);</span><br><span class="line">    <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> (hash &gt;&gt;&gt; segmentShift) &amp; segmentMask;</span><br><span class="line">    <span class="comment">// 没有找到，即说明未初始化</span></span><br><span class="line">    <span class="keyword">if</span> ((s = (Segment&lt;K,V&gt;)UNSAFE.getObject          <span class="comment">// nonvolatile; recheck</span></span><br><span class="line">         (segments, (j &lt;&lt; SSHIFT) + SBASE)) == <span class="literal">null</span>) <span class="comment">//  in ensureSegment</span></span><br><span class="line">        <span class="comment">// 初始化当前 Segment 对应的 HashEntry 数组</span></span><br><span class="line">        s = ensureSegment(j);</span><br><span class="line">    <span class="keyword">return</span> s.put(key, hash, value, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><code>post</code>细节<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> V <span class="title function_">put</span><span class="params">(K key, <span class="type">int</span> hash, V value, <span class="type">boolean</span> onlyIfAbsent)</span> &#123;</span><br><span class="line">    <span class="comment">// 尝试加锁</span></span><br><span class="line">    HashEntry&lt;K,V&gt; node = tryLock() ? <span class="literal">null</span> :</span><br><span class="line">    <span class="comment">// 如果不成功, 进入 scanAndLockForPut 流程</span></span><br><span class="line">    <span class="comment">// 如果是多核 cpu 最多 tryLock 64 次, 进入 lock 流程</span></span><br><span class="line">    <span class="comment">// 在尝试期间, 还可以顺便看该节点在链表中有没有, 如果没有顺便创建出来</span></span><br><span class="line">    scanAndLockForPut(key, hash, value);</span><br><span class="line">    <span class="comment">// 执行到这里 segment 已经被成功加锁, 可以安全执行</span></span><br><span class="line">    V oldValue;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        HashEntry&lt;K,V&gt;[] tab = table;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> (tab.length - <span class="number">1</span>) &amp; hash;</span><br><span class="line">        HashEntry&lt;K,V&gt; first = entryAt(tab, index);</span><br><span class="line">        <span class="keyword">for</span> (HashEntry&lt;K,V&gt; e = first;;) &#123;</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 更新</span></span><br><span class="line">                K k;</span><br><span class="line">                <span class="keyword">if</span> ((k = e.key) == key ||</span><br><span class="line">                    (e.hash == hash &amp;&amp; key.equals(k))) &#123;</span><br><span class="line">                    oldValue = e.value;</span><br><span class="line">                    <span class="keyword">if</span> (!onlyIfAbsent) &#123;</span><br><span class="line">                        e.value = value;</span><br><span class="line">                        ++modCount;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                e = e.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 新增</span></span><br><span class="line">                <span class="comment">// 1) 之前等待锁时, node 已经被创建, next 指向链表头</span></span><br><span class="line">                <span class="keyword">if</span> (node != <span class="literal">null</span>)</span><br><span class="line">                    node.setNext(first);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="comment">// 2) 创建新 node</span></span><br><span class="line">                    node = <span class="keyword">new</span> <span class="title class_">HashEntry</span>&lt;K,V&gt;(hash, key, value, first);</span><br><span class="line">                <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> count + <span class="number">1</span>;</span><br><span class="line">                <span class="comment">// 3) 扩容</span></span><br><span class="line">                <span class="comment">// 必须 是 达到阈值 并且 HashEntry 数组还没被扩容，也就是长度依旧是旧值</span></span><br><span class="line">                <span class="keyword">if</span> (c &gt; threshold &amp;&amp; tab.length &lt; MAXIMUM_CAPACITY)</span><br><span class="line">                    rehash(node);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="comment">// tab已更新，即扩容已经完毕，将 node 作为链表头</span></span><br><span class="line">                    setEntryAt(tab, index, node);</span><br><span class="line">                ++modCount;</span><br><span class="line">                count = c;</span><br><span class="line">                oldValue = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        unlock();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>扩容<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">rehash</span><span class="params">(HashEntry&lt;K,V&gt; node)</span> &#123;</span><br><span class="line">    <span class="comment">// 每个 Segment 对应的一个 HashEntry&lt;K,V&gt;数组</span></span><br><span class="line">    HashEntry&lt;K,V&gt;[] oldTable = table;</span><br><span class="line">    <span class="comment">// 扩容前 HashEntry&lt;K,V&gt;数组的长度</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">oldCapacity</span> <span class="operator">=</span> oldTable.length;</span><br><span class="line">    <span class="comment">// 扩容后 HashEntry&lt;K,V&gt;数组的长度 = 扩容前 HashEntry&lt;K,V&gt;数组的长度 * 2</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> oldCapacity &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 扩容阈值的元素数量，HashEntry&lt;K,V&gt;数组 中元素的个数到 某个数量（低于最大数）时的数量</span></span><br><span class="line">    threshold = (<span class="type">int</span>)(newCapacity * loadFactor);</span><br><span class="line">    <span class="comment">// 初始化一个新的 HashEntry 数组，每个下标表示的 HashEntry 都为 null，后面会用到这个 null 做头插法 put 元素</span></span><br><span class="line">    HashEntry&lt;K,V&gt;[] newTable =</span><br><span class="line">        (HashEntry&lt;K,V&gt;[]) <span class="keyword">new</span> <span class="title class_">HashEntry</span>[newCapacity];</span><br><span class="line">    <span class="comment">// hash 命中 &amp; 操作要用的掩码（计算hash结果的长度）</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">sizeMask</span> <span class="operator">=</span> newCapacity - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 遍历 扩容前 HashEntry&lt;K,V&gt;数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; oldCapacity ; i++) &#123;</span><br><span class="line">        HashEntry&lt;K,V&gt; e = oldTable[i];</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123;</span><br><span class="line">            HashEntry&lt;K,V&gt; next = e.next;</span><br><span class="line">            <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> e.hash &amp; sizeMask;</span><br><span class="line">            <span class="comment">// 当前 HashEntry&lt;K,V&gt;数组 下标只有一个元素，则直接赋值给 新数组对应下标</span></span><br><span class="line">            <span class="comment">// 这里对应的新的下标跟 原下标已经不一样了，因为是按照 扩容后 的长度来计算得到的</span></span><br><span class="line">            <span class="keyword">if</span> (next == <span class="literal">null</span>)   <span class="comment">//  Single node on list</span></span><br><span class="line">                newTable[idx] = e;</span><br><span class="line">            <span class="comment">// 如果链表长度 大于等于两个元素以上</span></span><br><span class="line">            <span class="keyword">else</span> &#123; <span class="comment">// Reuse consecutive sequence at same slot</span></span><br><span class="line">                HashEntry&lt;K,V&gt; lastRun = e;</span><br><span class="line">                <span class="type">int</span> <span class="variable">lastIdx</span> <span class="operator">=</span> idx;</span><br><span class="line">                <span class="comment">// 重用 链表最后面 新命中值 相同的</span></span><br><span class="line">                <span class="keyword">for</span> (HashEntry&lt;K,V&gt; last = next;</span><br><span class="line">                     last != <span class="literal">null</span>;</span><br><span class="line">                     last = last.next) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> last.hash &amp; sizeMask;</span><br><span class="line">                    <span class="keyword">if</span> (k != lastIdx) &#123;</span><br><span class="line">                        lastIdx = k;</span><br><span class="line">                        lastRun = last;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 将重用的链表头结点 转移到 新的 数组中</span></span><br><span class="line">                newTable[lastIdx] = lastRun;</span><br><span class="line">                <span class="comment">// Clone remaining nodes</span></span><br><span class="line">                <span class="comment">// 链表剩下的 部分，挨个按照头插法 命中到 新的数组中 </span></span><br><span class="line">                <span class="keyword">for</span> (HashEntry&lt;K,V&gt; p = e; p != lastRun; p = p.next) &#123;</span><br><span class="line">                    <span class="type">V</span> <span class="variable">v</span> <span class="operator">=</span> p.value;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> p.hash;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> h &amp; sizeMask;</span><br><span class="line">                    HashEntry&lt;K,V&gt; n = newTable[k];</span><br><span class="line">                    newTable[k] = <span class="keyword">new</span> <span class="title class_">HashEntry</span>&lt;K,V&gt;(h, p.key, v, n);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 最后再 把要 put 的值 头插法 加入到 新的数组中</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">nodeIndex</span> <span class="operator">=</span> node.hash &amp; sizeMask; <span class="comment">// add the new node</span></span><br><span class="line">    node.setNext(newTable[nodeIndex]);</span><br><span class="line">    newTable[nodeIndex] = node;</span><br><span class="line">    <span class="comment">// 这里通过 暂时 数组操作完毕再 赋值，能够避免操作中途 被其他 线程再次重复操作</span></span><br><span class="line">    <span class="comment">// 在这之前 其他 线程无法进入</span></span><br><span class="line">    <span class="comment">// 一赋值 其他线程 就算判断 达到阈值，但newTable 的大小改变</span></span><br><span class="line">    <span class="comment">// tab.length &lt; MAXIMUM_CAPACITY 也会让 其他线程直接去 新的数组 put 操作</span></span><br><span class="line">    table = newTable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><code>JDK8</code>抛弃了<code>Segment</code>分段锁，转而使用<code>CAS</code>+<code>synchronized</code>来保证并发安全性。<br>并且，不再单纯使用链表，<code>JDK8</code>在<code>HashEntry</code>数组中的链表长度大于<code>8</code>的时候会去转化为红黑树结构。<br>在这里，链表长度大于<code>8</code>时，才会去进一步判断阈值是否达到。<br>与<code>JDK7</code>扩容的区别在上一篇 <a href="https://blog.51cto.com/fyphome/5520040">深入浅出~HashMap的底层原理透析</a> 详细讲过了，其实与<code>ConCurrentHashMap</code>大同小异，也就是多做了<code>CAS</code>的操作、链表转化红黑树和等待的<code>put</code>会帮忙扩容。<h2 id="二、附语"><a href="#二、附语" class="headerlink" title="二、附语"></a>二、附语</h2></li></ul><p>谢谢大家，我会继续努力，只为力争创作高质量的文章，分享给各位有需要的读者。<br>你们的阅读和评论是对作者最大的支持！<br>我的技术专栏：<a href="https://github.com/fyupeng">https://github.com/fyupeng</a></p><blockquote><p>专注品质，热爱生活。<br>交流技术，寻求同志。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;创作宗旨：化繁为简，绝不冗余，点到为止&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;ConcurrentHashMap&amp;lt;K,V&amp;gt;&lt;/code&gt; 继承了&lt;code&gt;AbstractMap&amp;lt;K,V&amp;gt;&lt;/code&gt;，实现</summary>
      
    
    
    
    <category term="Java笔记" scheme="http://fyupeng.github.io/categories/Java%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Java原理" scheme="http://fyupeng.github.io/tags/Java%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>贪心算法</title>
    <link href="http://fyupeng.github.io/2022/08/06/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    <id>http://fyupeng.github.io/2022/08/06/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</id>
    <published>2022-08-06T03:57:51.000Z</published>
    <updated>2022-08-06T04:00:08.680Z</updated>
    
    <content type="html"><![CDATA[<h1 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h1><h2 id="1-455-分发饼干"><a href="#1-455-分发饼干" class="headerlink" title="1. 455. 分发饼干"></a>1. <a href="https://leetcode.cn/problems/assign-cookies/">455. 分发饼干</a></h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。</p><p>对每个孩子 i，都有一个胃口值 g[i]，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 j，都有一个尺寸 s[j] 。如果 s[j] &gt;= g[i]，我们可以将这个饼干 j 分配给孩子 i ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。</p><p>示例 1:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入: g = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], s = [<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">输出: <span class="number">1</span></span><br><span class="line">解释: </span><br><span class="line">你有三个孩子和两块小饼干，<span class="number">3</span>个孩子的胃口值分别是：<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>。</span><br><span class="line">虽然你有两块小饼干，由于他们的尺寸都是<span class="number">1</span>，你只能让胃口值是<span class="number">1</span>的孩子满足。</span><br><span class="line">所以你应该输出<span class="number">1</span>。</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入: g = [<span class="number">1</span>,<span class="number">2</span>], s = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">输出: <span class="number">2</span></span><br><span class="line">解释: </span><br><span class="line">你有两个孩子和三块小饼干，<span class="number">2</span>个孩子的胃口值分别是<span class="number">1</span>,<span class="number">2</span>。</span><br><span class="line">你拥有的饼干数量和尺寸都足以让所有孩子满足。</span><br><span class="line">所以你应该输出<span class="number">2</span>.</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= g.length &lt;= 3 * 104</code></li><li><code>0 &lt;= s.length &lt;= 3 * 104</code></li><li><code>1 &lt;= g[i], s[j] &lt;= 231 - 1</code></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findContentChildren</span><span class="params">(<span class="type">int</span>[] g, <span class="type">int</span>[] s)</span> &#123;</span><br><span class="line">        Arrays.sort(g);</span><br><span class="line">        Arrays.sort(s);</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; g.length &amp;&amp; index &lt; s.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(g[i] &lt;= s[index]) &#123;</span><br><span class="line">                <span class="comment">// 吃掉</span></span><br><span class="line">                result++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                i--;</span><br><span class="line">            &#125;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-376-摆动序列"><a href="#2-376-摆动序列" class="headerlink" title="2. 376. 摆动序列"></a>2. <a href="https://leetcode.cn/problems/wiggle-subsequence/">376. 摆动序列</a></h2><h3 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h3><p>如果连续数字之间的差严格地在正数和负数之间交替，则数字序列称为 摆动序列 。第一个差（如果存在的话）可能是正数或负数。仅有一个元素或者含两个不等元素的序列也视作摆动序列。</p><p>例如， <code>[1, 7, 4, 9, 2, 5]</code> 是一个 摆动序列 ，因为差值 (6, -3, 5, -7, 3) 是正负交替出现的。</p><p>相反，<code>[1, 4, 7, 2, 5]</code> 和 <code>[1, 7, 4, 5, 5]</code> 不是摆动序列，第一个序列是因为它的前两个差值都是正数，第二个序列是因为它的最后一个差值为零。<br>子序列 可以通过从原始序列中删除一些（也可以不删除）元素来获得，剩下的元素保持其原始顺序。</p><p>给你一个整数数组 <code>nums</code> ，返回 <code>nums</code> 中作为 摆动序列 的 最长子序列的长度 。</p><p>示例 1：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">5</span>]</span><br><span class="line">输出：<span class="number">6</span></span><br><span class="line">解释：整个序列均为摆动序列，各元素之间的差值为 (<span class="number">6</span>, -<span class="number">3</span>, <span class="number">5</span>, -<span class="number">7</span>, <span class="number">3</span>) 。</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">17</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">13</span>,<span class="number">15</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">16</span>,<span class="number">8</span>]</span><br><span class="line">输出：<span class="number">7</span></span><br><span class="line">解释：这个序列包含几个长度为 <span class="number">7</span> 摆动序列。</span><br><span class="line">其中一个是 [<span class="number">1</span>, <span class="number">17</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">10</span>, <span class="number">16</span>, <span class="number">8</span>] ，各元素之间的差值为 (<span class="number">16</span>, -<span class="number">7</span>, <span class="number">3</span>, -<span class="number">3</span>, <span class="number">6</span>, -<span class="number">8</span>) 。</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line">输出：<span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 1000</code></li><li><code>0 &lt;= nums[i] &lt;= 1000</code></li></ul><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><ul><li>贪心法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">wiggleMaxLength</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">curDiff</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">preDiff</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">1</span>; <span class="comment">// 考虑 右 边界值 特殊情况</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 考虑了 左边界值 特殊情况</span></span><br><span class="line">            curDiff = nums[i] - nums[i + <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(curDiff &lt; <span class="number">0</span> &amp;&amp; preDiff &gt;= <span class="number">0</span> || curDiff &gt; <span class="number">0</span> &amp;&amp; preDiff &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                result++;</span><br><span class="line">                preDiff = curDiff;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>动态规划</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">wiggleMaxLength</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">if</span>(n &lt; <span class="number">2</span>) <span class="keyword">return</span> n;</span><br><span class="line">        <span class="type">int</span> <span class="variable">up</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">down</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] &lt; nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                down = up + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] &gt; nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                up = down + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.max(up, down);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-53-最大子数组和"><a href="#3-53-最大子数组和" class="headerlink" title="3. 53. 最大子数组和"></a>3. <a href="https://leetcode.cn/problems/maximum-subarray/">53. 最大子数组和</a></h2><h3 id="问题-2"><a href="#问题-2" class="headerlink" title="问题"></a>问题</h3><p>给你一个整数数组 nums ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p><p>子数组 是数组中的一个连续部分。</p><p>示例 1：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [-<span class="number">2</span>,<span class="number">1</span>,-<span class="number">3</span>,<span class="number">4</span>,-<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,-<span class="number">5</span>,<span class="number">4</span>]</span><br><span class="line">输出：<span class="number">6</span></span><br><span class="line">解释：连续子数组 [<span class="number">4</span>,-<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>] 的和最大，为 <span class="number">6</span> 。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>]</span><br><span class="line">输出：<span class="number">1</span></span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">5</span>,<span class="number">4</span>,-<span class="number">1</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line">输出：<span class="number">23</span></span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 105</code></li><li><code>-104 &lt;= nums[i] &lt;= 104</code></li></ul><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxSubArray</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> - <span class="number">10000</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            sum += nums[i];</span><br><span class="line">            <span class="keyword">if</span>(sum &gt; res) &#123;</span><br><span class="line">                res = sum;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(sum &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                sum = <span class="number">0</span>;</span><br><span class="line">            &#125;      </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-122-买卖股票的最佳时机-II"><a href="#4-122-买卖股票的最佳时机-II" class="headerlink" title="4. 122. 买卖股票的最佳时机 II"></a>4. <a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/">122. 买卖股票的最佳时机 II</a></h2><h3 id="问题-3"><a href="#问题-3" class="headerlink" title="问题"></a>问题</h3><p>给你一个整数数组 <code>prices</code> ，其中 <code>prices[i]</code> 表示某支股票第 <code>i</code> 天的价格。</p><p>在每一天，你可以决定是否购买和/或出售股票。你在任何时候 <strong>最多</strong> 只能持有 一股 股票。你也可以先购买，然后在     <strong>同一天</strong> 出售。</p><p>返回 你能获得的 <strong>最大</strong> 利润 。</p><p>示例 1：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：prices = [<span class="number">7</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">4</span>]</span><br><span class="line">输出：<span class="number">7</span></span><br><span class="line">解释：在第 <span class="number">2</span> 天（股票价格 = <span class="number">1</span>）的时候买入，在第 <span class="number">3</span> 天（股票价格 = <span class="number">5</span>）的时候卖出, 这笔交易所能获得利润 = <span class="number">5</span> - <span class="number">1</span> = <span class="number">4</span> 。</span><br><span class="line">     随后，在第 <span class="number">4</span> 天（股票价格 = <span class="number">3</span>）的时候买入，在第 <span class="number">5</span> 天（股票价格 = <span class="number">6</span>）的时候卖出, 这笔交易所能获得利润 = <span class="number">6</span> - <span class="number">3</span> = <span class="number">3</span> 。</span><br><span class="line">     总利润为 <span class="number">4</span> + <span class="number">3</span> = <span class="number">7</span> 。</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：prices = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">输出：<span class="number">4</span></span><br><span class="line">解释：在第 <span class="number">1</span> 天（股票价格 = <span class="number">1</span>）的时候买入，在第 <span class="number">5</span> 天 （股票价格 = <span class="number">5</span>）的时候卖出, 这笔交易所能获得利润 = <span class="number">5</span> - <span class="number">1</span> = <span class="number">4</span> 。</span><br><span class="line">     总利润为 <span class="number">4</span> 。</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：prices = [<span class="number">7</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">1</span>]</span><br><span class="line">输出：<span class="number">0</span></span><br><span class="line">解释：在这种情况下, 交易无法获得正利润，所以不参与交易可以获得最大利润，最大利润为 <span class="number">0</span> 。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= prices.length &lt;= 3 * 104</code></li><li><code>0 &lt;= prices[i] &lt;= 104</code></li></ul><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><ul><li>直接写法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(prices.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; prices.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">pricesDiff</span> <span class="operator">=</span> prices[i + <span class="number">1</span>] - prices[i];</span><br><span class="line">            <span class="keyword">if</span>(pricesDiff &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                res += pricesDiff;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>贪心写法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(prices.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; prices.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            res += Math.max(prices[i + <span class="number">1</span>] - prices[i], <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>动态规划</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> prices.length;</span><br><span class="line">        <span class="keyword">if</span>(n &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n][<span class="number">2</span>];</span><br><span class="line">        <span class="comment">// 表示 买进第 0 天的股</span></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] -= prices[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">//默认初始：dp[0][1] = 0; 表示初始收益为 0 </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="comment">// 股票下跌，买进</span></span><br><span class="line">            dp[i][<span class="number">0</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>] - prices[i]);</span><br><span class="line">            <span class="comment">// 股票上涨，卖出</span></span><br><span class="line">            dp[i][<span class="number">1</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">1</span>], dp[i - <span class="number">1</span>][<span class="number">0</span>] + prices[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.max(dp[n - <span class="number">1</span>][<span class="number">0</span>], dp[n - <span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="5-55-跳跃游戏"><a href="#5-55-跳跃游戏" class="headerlink" title="5.  55. 跳跃游戏"></a>5.  <a href="https://leetcode.cn/problems/jump-game/">55. 跳跃游戏</a></h2><h3 id="问题-4"><a href="#问题-4" class="headerlink" title="问题"></a>问题</h3><p>给定一个非负整数数组 <code>nums</code> ，你最初位于数组的 <strong>第一个下标</strong> 。</p><p>数组中的每个元素代表你在该位置可以跳跃的最大长度。</p><p>判断你是否能够到达最后一个下标。</p><p>示例 1：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">4</span>]</span><br><span class="line">输出：<span class="literal">true</span></span><br><span class="line">解释：可以先跳 <span class="number">1</span> 步，从下标 <span class="number">0</span> 到达下标 <span class="number">1</span>, 然后再从下标 <span class="number">1</span> 跳 <span class="number">3</span> 步到达最后一个下标。</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">4</span>]</span><br><span class="line">输出：<span class="literal">false</span></span><br><span class="line">解释：无论怎样，总会到达下标为 <span class="number">3</span> 的位置。但该下标的最大跳跃长度是 <span class="number">0</span> ， 所以永远不可能到达最后一个下标。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 3 * 104</code></li><li><code>0 &lt;= nums[i] &lt;= 105</code></li></ul><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canJump</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length == <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 可到达的 最长下标</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">cover</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= cover; i++) &#123;</span><br><span class="line">            cover = Math.max(cover, i + nums[i]);</span><br><span class="line">            <span class="keyword">if</span>(cover &gt;= nums.length - <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-45-跳跃游戏-II"><a href="#6-45-跳跃游戏-II" class="headerlink" title="6. 45. 跳跃游戏 II"></a>6. <a href="https://leetcode.cn/problems/jump-game-ii/">45. 跳跃游戏 II</a></h2><h3 id="问题-5"><a href="#问题-5" class="headerlink" title="问题"></a>问题</h3><p>给你一个非负整数数组 <code>nums</code> ，你最初位于数组的第一个位置。</p><p>数组中的每个元素代表你在该位置可以跳跃的最大长度。</p><p>你的目标是使用最少的跳跃次数到达数组的最后一个位置。</p><p>假设你总是可以到达数组的最后一个位置。</p><p>示例 1:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">4</span>]</span><br><span class="line">输出: <span class="number">2</span></span><br><span class="line">解释: 跳到最后一个位置的最小跳跃数是 <span class="number">2</span>。</span><br><span class="line">     从下标为 <span class="number">0</span> 跳到下标为 <span class="number">1</span> 的位置，跳 <span class="number">1</span> 步，然后跳 <span class="number">3</span> 步到达数组的最后一个位置。</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">4</span>]</span><br><span class="line">输出: <span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong>提示:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 104</code></li><li><code>0 &lt;= nums[i] &lt;= 1000</code></li></ul><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><ul><li>版本一</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">jump</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">curDistance</span> <span class="operator">=</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">nextDistance</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            nextDistance = Math.max(nextDistance, nums[i] + i);</span><br><span class="line">            <span class="comment">// 如果当前 最远步长 已经达到终点下标了，</span></span><br><span class="line">            <span class="keyword">if</span>(curDistance &gt;= n - <span class="number">1</span>) &#123;</span><br><span class="line">                ans++;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//否则 看是否已经 满足 当前下标是 最远步长</span></span><br><span class="line">            <span class="comment">// 主要是为了更新 nextDistance 为 在当前下标到 最远步长中 找到 下一个最远步长下标最远的</span></span><br><span class="line">            <span class="keyword">if</span>(i == curDistance) &#123;</span><br><span class="line">                ans++;          </span><br><span class="line">                curDistance = nextDistance;            </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>版本二</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">jump</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">curDistance</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">nextDistance</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            nextDistance = Math.max(nextDistance, nums[i] + i);</span><br><span class="line">            <span class="comment">//否则 看是否已经 满足 当前下标是 最远步长</span></span><br><span class="line">            <span class="comment">// 主要是为了更新 nextDistance 为 在当前下标到 最远步长中 找到 下一个最远步长下标最远的</span></span><br><span class="line">            <span class="keyword">if</span>(i == curDistance) &#123;</span><br><span class="line">                ans++;          </span><br><span class="line">                curDistance = nextDistance;            </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-1005-K-次取反后最大化的数组和"><a href="#7-1005-K-次取反后最大化的数组和" class="headerlink" title="7. 1005. K 次取反后最大化的数组和"></a>7. <a href="https://leetcode.cn/problems/maximize-sum-of-array-after-k-negations/">1005. K 次取反后最大化的数组和</a></h2><h3 id="问题-6"><a href="#问题-6" class="headerlink" title="问题"></a>问题</h3><p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code> ，按以下方法修改该数组：</p><p>选择某个下标 i 并将 <code>nums[i]</code> 替换为 <code>-nums[i]</code> 。<br>重复这个过程恰好 <code>k</code> 次。可以多次选择同一个下标 <code>i</code> 。</p><p>以这种方式修改数组后，返回数组 可能的最大和 。</p><p>示例 1：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>], k = <span class="number">1</span></span><br><span class="line">输出：<span class="number">5</span></span><br><span class="line">解释：选择下标 <span class="number">1</span> ，nums 变为 [<span class="number">4</span>,-<span class="number">2</span>,<span class="number">3</span>] 。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">3</span>,-<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>], k = <span class="number">3</span></span><br><span class="line">输出：<span class="number">6</span></span><br><span class="line">解释：选择下标 (<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>) ，nums 变为 [<span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>] 。</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">2</span>,-<span class="number">3</span>,-<span class="number">1</span>,<span class="number">5</span>,-<span class="number">4</span>], k = <span class="number">2</span></span><br><span class="line">输出：<span class="number">13</span></span><br><span class="line">解释：选择下标 (<span class="number">1</span>, <span class="number">4</span>) ，nums 变为 [<span class="number">2</span>,<span class="number">3</span>,-<span class="number">1</span>,<span class="number">5</span>,<span class="number">4</span>] 。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 104</code></li><li><code>-100 &lt;= nums[i] &lt;= 100</code></li><li><code>1 &lt;= k &lt;= 104</code></li></ul><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h3><ul><li>绝对值排序</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">largestSumAfterKNegations</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        nums = IntStream.of(nums).boxed().sorted((t1, t2) -&gt; Math.abs(t2) - Math.abs(t1)).mapToInt(Integer::intValue).toArray();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] &lt; <span class="number">0</span> &amp;&amp; k &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                nums[i] = - nums[i];</span><br><span class="line">                k--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(k % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            nums[nums.length - <span class="number">1</span>] = - nums[nums.length - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Arrays.stream(nums).sum();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>从小到大排序</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">largestSumAfterKNegations</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> k % <span class="number">2</span> == <span class="number">0</span> ? nums[<span class="number">0</span>] : -nums[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i &lt; nums.length - <span class="number">1</span> &amp;&amp; nums[i] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                nums[i] = -nums[i];</span><br><span class="line">                <span class="keyword">if</span>(nums[i] &gt;= Math.abs(nums[i + <span class="number">1</span>])) index++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            nums[index] = -nums[index];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            sum += nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-134-加油站"><a href="#8-134-加油站" class="headerlink" title="8. 134. 加油站"></a>8. <a href="https://leetcode.cn/problems/gas-station/">134. 加油站</a></h2><h3 id="问题-7"><a href="#问题-7" class="headerlink" title="问题"></a>问题</h3><p>在一条环路上有 <code>n</code> 个加油站，其中第 <code>i</code> 个加油站有汽油 <code>gas[i]</code> 升。</p><p>你有一辆油箱容量无限的的汽车，从第 <code>i</code> 个加油站开往第 <code>i+1</code> 个加油站需要消耗汽油 cost[i] 升。你从其中的一个加油站出发，开始时油箱为空。</p><p>给定两个整数数组 <code>gas</code> 和 <code>cost</code> ，如果你可以绕环路行驶一周，则返回出发时加油站的编号，否则返回 <code>-1</code> 。如果存在解，则 <code>保证</code> 它是 <code>唯一</code> 的。</p><p>示例 1:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入: gas = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>], cost = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">输出: <span class="number">3</span></span><br><span class="line">解释:</span><br><span class="line">从 <span class="number">3</span> 号加油站(索引为 <span class="number">3</span> 处)出发，可获得 <span class="number">4</span> 升汽油。此时油箱有 = <span class="number">0</span> + <span class="number">4</span> = <span class="number">4</span> 升汽油</span><br><span class="line">开往 <span class="number">4</span> 号加油站，此时油箱有 <span class="number">4</span> - <span class="number">1</span> + <span class="number">5</span> = <span class="number">8</span> 升汽油</span><br><span class="line">开往 <span class="number">0</span> 号加油站，此时油箱有 <span class="number">8</span> - <span class="number">2</span> + <span class="number">1</span> = <span class="number">7</span> 升汽油</span><br><span class="line">开往 <span class="number">1</span> 号加油站，此时油箱有 <span class="number">7</span> - <span class="number">3</span> + <span class="number">2</span> = <span class="number">6</span> 升汽油</span><br><span class="line">开往 <span class="number">2</span> 号加油站，此时油箱有 <span class="number">6</span> - <span class="number">4</span> + <span class="number">3</span> = <span class="number">5</span> 升汽油</span><br><span class="line">开往 <span class="number">3</span> 号加油站，你需要消耗 <span class="number">5</span> 升汽油，正好足够你返回到 <span class="number">3</span> 号加油站。</span><br><span class="line">因此，<span class="number">3</span> 可为起始索引。</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入: gas = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], cost = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>]</span><br><span class="line">输出: -<span class="number">1</span></span><br><span class="line">解释:</span><br><span class="line">你不能从 <span class="number">0</span> 号或 <span class="number">1</span> 号加油站出发，因为没有足够的汽油可以让你行驶到下一个加油站。</span><br><span class="line">我们从 <span class="number">2</span> 号加油站出发，可以获得 <span class="number">4</span> 升汽油。 此时油箱有 = <span class="number">0</span> + <span class="number">4</span> = <span class="number">4</span> 升汽油</span><br><span class="line">开往 <span class="number">0</span> 号加油站，此时油箱有 <span class="number">4</span> - <span class="number">3</span> + <span class="number">2</span> = <span class="number">3</span> 升汽油</span><br><span class="line">开往 <span class="number">1</span> 号加油站，此时油箱有 <span class="number">3</span> - <span class="number">3</span> + <span class="number">3</span> = <span class="number">3</span> 升汽油</span><br><span class="line">你无法返回 <span class="number">2</span> 号加油站，因为返程需要消耗 <span class="number">4</span> 升汽油，但是你的油箱只有 <span class="number">3</span> 升汽油。</span><br><span class="line">因此，无论怎样，你都不可能绕环路行驶一周。</span><br></pre></td></tr></table></figure><p><strong>提示:</strong></p><ul><li><code>gas.length == n</code></li><li><code>cost.length == n</code></li><li><code>1 &lt;= n &lt;= 105</code></li><li><code>0 &lt;= gas[i], cost[i] &lt;= 104</code></li></ul><h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h3><ul><li>暴力法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">canCompleteCircuit</span><span class="params">(<span class="type">int</span>[] gas, <span class="type">int</span>[] cost)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">curGas</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; gas.length; i++) &#123;</span><br><span class="line">            curGas = gas[i] - cost[i];</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> (i + <span class="number">1</span>) % gas.length;</span><br><span class="line">            <span class="keyword">while</span>(curGas &gt;= <span class="number">0</span> &amp;&amp; index != i) &#123;</span><br><span class="line">                curGas += gas[index] - cost[index];</span><br><span class="line">                index = (index + <span class="number">1</span>) % gas.length;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(curGas &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>贪心算法1</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">canCompleteCircuit</span><span class="params">(<span class="type">int</span>[] gas, <span class="type">int</span>[] cost)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">curSum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; gas.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> gas[i] - cost[i];</span><br><span class="line">            curSum += res;</span><br><span class="line">            <span class="keyword">if</span>(curSum &lt; min) &#123;</span><br><span class="line">                min = curSum;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(curSum &lt; <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(min &gt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> gas.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> gas[i] - cost[i];</span><br><span class="line">            min += res;</span><br><span class="line">            <span class="keyword">if</span>(min &gt;= <span class="number">0</span>) <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>贪心算法2</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">canCompleteCircuit</span><span class="params">(<span class="type">int</span>[] gas, <span class="type">int</span>[] cost)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">curSum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">totalSum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">startIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; gas.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> gas[i] - cost[i];</span><br><span class="line">            curSum += res;</span><br><span class="line">            totalSum += res;</span><br><span class="line">            <span class="keyword">if</span>(curSum &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                startIndex = i + <span class="number">1</span>;</span><br><span class="line">                curSum = <span class="number">0</span>;</span><br><span class="line">            &#125;     </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(totalSum &lt; <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> startIndex;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-135-分发糖果"><a href="#9-135-分发糖果" class="headerlink" title="9. 135. 分发糖果"></a>9. <a href="https://leetcode.cn/problems/candy/">135. 分发糖果</a></h2><h3 id="问题-8"><a href="#问题-8" class="headerlink" title="问题"></a>问题</h3><p><code>n</code> 个孩子站成一排。给你一个整数数组 <code>ratings</code> 表示每个孩子的评分。</p><p>你需要按照以下要求，给这些孩子分发糖果：</p><p>每个孩子至少分配到 <code>1</code> 个糖果。<br>相邻两个孩子评分更高的孩子会获得更多的糖果。<br>请你给每个孩子分发糖果，计算并返回需要准备的 <strong>最少糖果数目</strong> 。</p><p>示例 1：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：ratings = [<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>]</span><br><span class="line">输出：<span class="number">5</span></span><br><span class="line">解释：你可以分别给第一个、第二个、第三个孩子分发 <span class="number">2</span>、<span class="number">1</span>、<span class="number">2</span> 颗糖果。</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：ratings = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>]</span><br><span class="line">输出：<span class="number">4</span></span><br><span class="line">解释：你可以分别给第一个、第二个、第三个孩子分发 <span class="number">1</span>、<span class="number">2</span>、<span class="number">1</span> 颗糖果。</span><br><span class="line">第三个孩子只得到 <span class="number">1</span> 颗糖果，这满足题面中的两个条件。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>n == ratings.length</code></li><li><code>1 &lt;= n &lt;= 2 * 104</code></li><li><code>0 &lt;= ratings[i] &lt;= 2 * 104</code></li></ul><h3 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">candy</span><span class="params">(<span class="type">int</span>[] ratings)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(ratings.length == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> ratings.length;</span><br><span class="line">        <span class="type">int</span>[] candyArg = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            candyArg[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(ratings[i + <span class="number">1</span>] &gt; ratings[i]) candyArg[i + <span class="number">1</span>] = candyArg[i] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span>(ratings[i] &gt; ratings[i + <span class="number">1</span>]) candyArg[i] = Math.max(candyArg[i], candyArg[i + <span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;  i &lt; n; i++) &#123;</span><br><span class="line">            sum += candyArg[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-860-柠檬水找零"><a href="#10-860-柠檬水找零" class="headerlink" title="10. 860. 柠檬水找零"></a>10. <a href="https://leetcode.cn/problems/lemonade-change/">860. 柠檬水找零</a></h2><h3 id="问题-9"><a href="#问题-9" class="headerlink" title="问题"></a>问题</h3><p>在柠檬水摊上，每一杯柠檬水的售价为 5 美元。顾客排队购买你的产品，（按账单 bills 支付的顺序）一次购买一杯。</p><p>每位顾客只买一杯柠檬水，然后向你付 5 美元、10 美元或 20 美元。你必须给每个顾客正确找零，也就是说净交易是每位顾客向你支付 5 美元。</p><p>注意，一开始你手头没有任何零钱。</p><p>给你一个整数数组 bills ，其中 bills[i] 是第 i 位顾客付的账。如果你能给每位顾客正确找零，返回 true ，否则返回 false 。</p><p>示例1：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：bills = [<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">20</span>]</span><br><span class="line">输出：<span class="literal">true</span></span><br><span class="line">解释：</span><br><span class="line">前 <span class="number">3</span> 位顾客那里，我们按顺序收取 <span class="number">3</span> 张 <span class="number">5</span> 美元的钞票。</span><br><span class="line">第 <span class="number">4</span> 位顾客那里，我们收取一张 <span class="number">10</span> 美元的钞票，并返还 <span class="number">5</span> 美元。</span><br><span class="line">第 <span class="number">5</span> 位顾客那里，我们找还一张 <span class="number">10</span> 美元的钞票和一张 <span class="number">5</span> 美元的钞票。</span><br><span class="line">由于所有客户都得到了正确的找零，所以我们输出 <span class="literal">true</span>。</span><br></pre></td></tr></table></figure><p>示例2：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：bills = [<span class="number">5</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">20</span>]</span><br><span class="line">输出：<span class="literal">false</span></span><br><span class="line">解释：</span><br><span class="line">前 <span class="number">2</span> 位顾客那里，我们按顺序收取 <span class="number">2</span> 张 <span class="number">5</span> 美元的钞票。</span><br><span class="line">对于接下来的 <span class="number">2</span> 位顾客，我们收取一张 <span class="number">10</span> 美元的钞票，然后返还 <span class="number">5</span> 美元。</span><br><span class="line">对于最后一位顾客，我们无法退回 <span class="number">15</span> 美元，因为我们现在只有两张 <span class="number">10</span> 美元的钞票。</span><br><span class="line">由于不是每位顾客都得到了正确的找零，所以答案是 <span class="literal">false</span>。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= bills.length &lt;= 105</code></li><li><code>bills[i]</code> 不是 <code>5</code> 就是 <code>10</code> 或是 <code>20</code> </li></ul><h3 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lemonadeChange</span><span class="params">(<span class="type">int</span>[] bills)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">five</span> <span class="operator">=</span> <span class="number">0</span>, ten = <span class="number">0</span>, twenty = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; bills.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(bills[i] == <span class="number">5</span>) &#123;</span><br><span class="line">                five++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(bills[i] == <span class="number">10</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(five &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                ten++;</span><br><span class="line">                five--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(bills[i] == <span class="number">20</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(five &gt; <span class="number">0</span> &amp;&amp; ten &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    five--;</span><br><span class="line">                    ten--;</span><br><span class="line">                    twenty++;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(five &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">                    five -= <span class="number">3</span>;</span><br><span class="line">                    twenty++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="11-406-根据身高重建队列"><a href="#11-406-根据身高重建队列" class="headerlink" title="11. 406. 根据身高重建队列"></a>11. <a href="https://leetcode.cn/problems/queue-reconstruction-by-height/">406. 根据身高重建队列</a></h2><h3 id="问题-10"><a href="#问题-10" class="headerlink" title="问题"></a>问题</h3><p>假设有打乱顺序的一群人站成一个队列，数组 <code>people</code> 表示队列中一些人的属性（不一定按顺序）。每个 <code>people[i] = [hi, ki]</code> 表示第 <code>i</code> 个人的身高为 <code>hi</code> ，前面 <strong>正好</strong> 有 <code>ki</code> 个身高大于或等于 <code>hi</code> 的人。</p><p>请你重新构造并返回输入数组 <code>people</code> 所表示的队列。返回的队列应该格式化为数组 <code>queue</code> ，其中 <code>queue[j] = [hj, kj]</code> 是队列中第 <code>j</code> 个人的属性（<code>queue[0]</code> 是排在队列前面的人）。</p><p>示例 1：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入：people = [[<span class="number">7</span>,<span class="number">0</span>],[<span class="number">4</span>,<span class="number">4</span>],[<span class="number">7</span>,<span class="number">1</span>],[<span class="number">5</span>,<span class="number">0</span>],[<span class="number">6</span>,<span class="number">1</span>],[<span class="number">5</span>,<span class="number">2</span>]]</span><br><span class="line">输出：[[<span class="number">5</span>,<span class="number">0</span>],[<span class="number">7</span>,<span class="number">0</span>],[<span class="number">5</span>,<span class="number">2</span>],[<span class="number">6</span>,<span class="number">1</span>],[<span class="number">4</span>,<span class="number">4</span>],[<span class="number">7</span>,<span class="number">1</span>]]</span><br><span class="line">解释：</span><br><span class="line">编号为 <span class="number">0</span> 的人身高为 <span class="number">5</span> ，没有身高更高或者相同的人排在他前面。</span><br><span class="line">编号为 <span class="number">1</span> 的人身高为 <span class="number">7</span> ，没有身高更高或者相同的人排在他前面。</span><br><span class="line">编号为 <span class="number">2</span> 的人身高为 <span class="number">5</span> ，有 <span class="number">2</span> 个身高更高或者相同的人排在他前面，即编号为 <span class="number">0</span> 和 <span class="number">1</span> 的人。</span><br><span class="line">编号为 <span class="number">3</span> 的人身高为 <span class="number">6</span> ，有 <span class="number">1</span> 个身高更高或者相同的人排在他前面，即编号为 <span class="number">1</span> 的人。</span><br><span class="line">编号为 <span class="number">4</span> 的人身高为 <span class="number">4</span> ，有 <span class="number">4</span> 个身高更高或者相同的人排在他前面，即编号为 <span class="number">0</span>、<span class="number">1</span>、<span class="number">2</span>、<span class="number">3</span> 的人。</span><br><span class="line">编号为 <span class="number">5</span> 的人身高为 <span class="number">7</span> ，有 <span class="number">1</span> 个身高更高或者相同的人排在他前面，即编号为 <span class="number">1</span> 的人。</span><br><span class="line">因此 [[<span class="number">5</span>,<span class="number">0</span>],[<span class="number">7</span>,<span class="number">0</span>],[<span class="number">5</span>,<span class="number">2</span>],[<span class="number">6</span>,<span class="number">1</span>],[<span class="number">4</span>,<span class="number">4</span>],[<span class="number">7</span>,<span class="number">1</span>]] 是重新构造后的队列。</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：people = [[<span class="number">6</span>,<span class="number">0</span>],[<span class="number">5</span>,<span class="number">0</span>],[<span class="number">4</span>,<span class="number">0</span>],[<span class="number">3</span>,<span class="number">2</span>],[<span class="number">2</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">4</span>]]</span><br><span class="line">输出：[[<span class="number">4</span>,<span class="number">0</span>],[<span class="number">5</span>,<span class="number">0</span>],[<span class="number">2</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">4</span>],[<span class="number">6</span>,<span class="number">0</span>]]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= people.length &lt;= 2000</code></li><li><code>0 &lt;= hi &lt;= 106</code></li><li><code>0 &lt;= ki &lt; people.length</code></li><li>题目数据确保队列可以被重建</li></ul><h3 id="代码-10"><a href="#代码-10" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] reconstructQueue(<span class="type">int</span>[][] people) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> people.length;</span><br><span class="line">        Arrays.sort(people, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;<span class="type">int</span>[]&gt;()&#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span>[] people1, <span class="type">int</span>[] people2)</span> &#123;</span><br><span class="line">                <span class="comment">// 从大到小 排序</span></span><br><span class="line">                <span class="keyword">if</span>(people2[<span class="number">0</span>] == people1[<span class="number">0</span>]) &#123;</span><br><span class="line">                    <span class="keyword">return</span> people1[<span class="number">1</span>] - people2[<span class="number">1</span>];</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> people2[<span class="number">0</span>] - people1[<span class="number">0</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            inset(people, i, people[i][<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> people;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">inset</span><span class="params">(<span class="type">int</span>[][] people, <span class="type">int</span> sourceIndex,  <span class="type">int</span> destIndex)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] temp = people[sourceIndex];</span><br><span class="line">        <span class="keyword">if</span>(sourceIndex &lt;= destIndex) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> sourceIndex; i &lt; destIndex; i++) &#123;</span><br><span class="line">                people[i] = people[i + <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            people[destIndex] = temp;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> sourceIndex; i &gt; destIndex; i--) &#123;</span><br><span class="line">                people[i] = people[i - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            people[destIndex] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="12-452-用最少数量的箭引爆气球"><a href="#12-452-用最少数量的箭引爆气球" class="headerlink" title="12. 452. 用最少数量的箭引爆气球"></a>12. <a href="https://leetcode.cn/problems/minimum-number-of-arrows-to-burst-balloons/">452. 用最少数量的箭引爆气球</a></h2><h3 id="问题-11"><a href="#问题-11" class="headerlink" title="问题"></a>问题</h3><p>有一些球形气球贴在一堵用 <code>XY</code> 平面表示的墙面上。墙面上的气球记录在整数数组 <code>points</code> ，其中<code>points[i] = [xstart, xend]</code> 表示水平直径在 <code>xstart</code> 和 <code>xend</code>之间的气球。你不知道气球的确切 <code>y</code> 坐标。</p><p>一支弓箭可以沿着 <code>x</code> 轴从不同点 完全垂直 地射出。在坐标 <code>x</code> 处射出一支箭，若有一个气球的直径的开始和结束坐标为 <code>xstart</code>，<code>xend</code>， 且满足  <code>xstart ≤ x ≤ xend</code>，则该气球会被 引爆 。可以射出的弓箭的数量 没有限制 。 弓箭一旦被射出之后，可以无限地前进。</p><p>给你一个数组 <code>points</code> ，返回引爆所有气球所必须射出的 最小 弓箭数 。</p><p>示例 1：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：points = [[<span class="number">10</span>,<span class="number">16</span>],[<span class="number">2</span>,<span class="number">8</span>],[<span class="number">1</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">12</span>]]</span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：气球可以用<span class="number">2</span>支箭来爆破:</span><br><span class="line">-在x = <span class="number">6</span>处射出箭，击破气球[<span class="number">2</span>,<span class="number">8</span>]和[<span class="number">1</span>,<span class="number">6</span>]。</span><br><span class="line">-在x = <span class="number">11</span>处发射箭，击破气球[<span class="number">10</span>,<span class="number">16</span>]和[<span class="number">7</span>,<span class="number">12</span>]。</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：points = [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>]]</span><br><span class="line">输出：<span class="number">4</span></span><br><span class="line">解释：每个气球需要射出一支箭，总共需要<span class="number">4</span>支箭。</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：points = [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">2</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">4</span>],[<span class="number">4</span>,<span class="number">5</span>]]</span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：气球可以用<span class="number">2</span>支箭来爆破:</span><br><span class="line">- 在x = <span class="number">2</span>处发射箭，击破气球[<span class="number">1</span>,<span class="number">2</span>]和[<span class="number">2</span>,<span class="number">3</span>]。</span><br><span class="line">- 在x = <span class="number">4</span>处射出箭，击破气球[<span class="number">3</span>,<span class="number">4</span>]和[<span class="number">4</span>,<span class="number">5</span>]。</span><br></pre></td></tr></table></figure><p><strong>提示:</strong></p><ul><li><code>1 &lt;= points.length &lt;= 105</code></li><li><code>points[i].length == 2</code></li><li><code>-231 &lt;= xstart &lt; xend &lt;= 231 - 1</code></li></ul><h3 id="代码-11"><a href="#代码-11" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findMinArrowShots</span><span class="params">(<span class="type">int</span>[][] points)</span> &#123;</span><br><span class="line">        Arrays.sort(points, (a,b) -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[<span class="number">0</span>] != b[<span class="number">0</span>]) &#123;</span><br><span class="line">                <span class="keyword">return</span> (<span class="type">long</span>)a[<span class="number">0</span>] - (<span class="type">long</span>)b[<span class="number">0</span>] &gt; <span class="number">0</span> ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>  (<span class="type">long</span>)a[<span class="number">0</span>] - (<span class="type">long</span>)b[<span class="number">0</span>] &gt; <span class="number">0</span> ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; points.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(points[i][<span class="number">0</span>] &gt; points[i - <span class="number">1</span>][<span class="number">1</span>]) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                points[i][<span class="number">1</span>] = Math.min(points[i][<span class="number">1</span>], points[i - <span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先排序（按元素<code>0</code>号下标升序）后贪左边，因为排完后，前面的肯定包含后面的元素，再去贪右边边界，贪最小边界。</p><h2 id="13-435-无重叠区间"><a href="#13-435-无重叠区间" class="headerlink" title="13. 435. 无重叠区间"></a>13. <a href="https://leetcode.cn/problems/non-overlapping-intervals/">435. 无重叠区间</a></h2><h3 id="问题-12"><a href="#问题-12" class="headerlink" title="问题"></a>问题</h3><p>给定一个区间的集合 intervals ，其中 <code>intervals[i] = [starti, endi]</code> 。返回 需要移除区间的最小数量，使剩余区间互不重叠 。</p><p>示例 1:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: intervals = [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">2</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">4</span>],[<span class="number">1</span>,<span class="number">3</span>]]</span><br><span class="line">输出: <span class="number">1</span></span><br><span class="line">解释: 移除 [<span class="number">1</span>,<span class="number">3</span>] 后，剩下的区间没有重叠。</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: intervals = [ [<span class="number">1</span>,<span class="number">2</span>], [<span class="number">1</span>,<span class="number">2</span>], [<span class="number">1</span>,<span class="number">2</span>] ]</span><br><span class="line">输出: <span class="number">2</span></span><br><span class="line">解释: 你需要移除两个 [<span class="number">1</span>,<span class="number">2</span>] 来使剩下的区间没有重叠。</span><br></pre></td></tr></table></figure><p>示例 3:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: intervals = [ [<span class="number">1</span>,<span class="number">2</span>], [<span class="number">2</span>,<span class="number">3</span>] ]</span><br><span class="line">输出: <span class="number">0</span></span><br><span class="line">解释: 你不需要移除任何区间，因为它们已经是无重叠的了。</span><br></pre></td></tr></table></figure><p><strong>提示:</strong></p><ul><li><code>1 &lt;= intervals.length &lt;= 105</code></li><li><code>intervals[i].length == 2</code></li><li><code>-5 * 104 &lt;= starti &lt; endi &lt;= 5 * 104</code></li></ul><h1 id="代码-12"><a href="#代码-12" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">eraseOverlapIntervals</span><span class="params">(<span class="type">int</span>[][] intervals)</span> &#123;</span><br><span class="line">        <span class="comment">// 对右区间升序，</span></span><br><span class="line">        Arrays.sort(intervals, (a,b) -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> a[<span class="number">1</span>] - b[<span class="number">1</span>];</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">int</span> <span class="variable">removeCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; intervals.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(intervals[i][<span class="number">0</span>] &lt; intervals[i - <span class="number">1</span>][<span class="number">1</span>]) &#123;</span><br><span class="line">                removeCount++;</span><br><span class="line">                <span class="comment">// 更新当前状态下不重叠右区间上限</span></span><br><span class="line">                <span class="comment">// 不用理会两个区间中间可能留下的空白区域，因为已经排序</span></span><br><span class="line">                <span class="comment">// 所以后面的区间不会重叠中间那块空白区域</span></span><br><span class="line">                intervals[i][<span class="number">1</span>] = intervals[i - <span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> removeCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="14-714-买卖股票的最佳时机含手续费"><a href="#14-714-买卖股票的最佳时机含手续费" class="headerlink" title="14. 714. 买卖股票的最佳时机含手续费"></a>14. <a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/">714. 买卖股票的最佳时机含手续费</a></h2><h3 id="问题-13"><a href="#问题-13" class="headerlink" title="问题"></a>问题</h3><p>给定一个整数数组 <code>prices</code>，其中 <code>prices[i]</code>表示第 <code>i</code> 天的股票价格 ；整数 <code>fee</code> 代表了交易股票的手续费用。</p><p>你可以无限次地完成交易，但是你每笔交易都需要付手续费。如果你已经购买了一个股票，在卖出它之前你就不能再继续购买股票了。</p><p>返回获得利润的最大值。</p><p>注意：这里的一笔交易指买入持有并卖出股票的整个过程，每笔交易你只需要为支付一次手续费。</p><p>示例 1：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：prices = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">9</span>], fee = <span class="number">2</span></span><br><span class="line">输出：<span class="number">8</span></span><br><span class="line">解释：能够达到的最大利润:  </span><br><span class="line">在此处买入 prices[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">在此处卖出 prices[<span class="number">3</span>] = <span class="number">8</span></span><br><span class="line">在此处买入 prices[<span class="number">4</span>] = <span class="number">4</span></span><br><span class="line">在此处卖出 prices[<span class="number">5</span>] = <span class="number">9</span></span><br><span class="line">总利润: ((<span class="number">8</span> - <span class="number">1</span>) - <span class="number">2</span>) + ((<span class="number">9</span> - <span class="number">4</span>) - <span class="number">2</span>) = <span class="number">8</span></span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：prices = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">3</span>], fee = <span class="number">3</span></span><br><span class="line">输出：<span class="number">6</span></span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= prices.length &lt;= 5 * 104</code></li><li><code>1 &lt;= prices[i] &lt; 5 * 104</code></li><li><code>0 &lt;= fee &lt; 5 * 104</code></li></ul><h3 id="代码-13"><a href="#代码-13" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices, <span class="type">int</span> fee)</span> &#123;</span><br><span class="line">        <span class="comment">// 买入是先 算手续费，buy 是买入+手续费</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">buy</span> <span class="operator">=</span> prices[<span class="number">0</span>] + fee;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line">            <span class="comment">// buy 已经更新为能否继续收益的更高水准</span></span><br><span class="line">            <span class="comment">// 如果不能继续收益了，也就是跌股了，那就卖掉上一股，重新买入新股</span></span><br><span class="line">            <span class="comment">// 因为相比 同一股 会有更大的收益</span></span><br><span class="line">            <span class="keyword">if</span>(prices[i] + fee &lt; buy) &#123;</span><br><span class="line">                buy = prices[i] + fee;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(prices[i] &gt; buy) &#123;</span><br><span class="line">                result += prices[i] - buy;</span><br><span class="line">                <span class="comment">// 连续涨股就持股</span></span><br><span class="line">                buy = prices[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="15-968-监控二叉树"><a href="#15-968-监控二叉树" class="headerlink" title="15. 968. 监控二叉树"></a>15. <a href="https://leetcode.cn/problems/binary-tree-cameras/">968. 监控二叉树</a></h2><h3 id="问题-14"><a href="#问题-14" class="headerlink" title="问题"></a>问题</h3><p>给定一个二叉树，我们在树的节点上安装摄像头。</p><p>节点上的每个摄影头都可以监视其父对象、自身及其直接子对象。</p><p>计算监控树的所有节点所需的最小摄像头数量。</p><p>示例 1：</p><p><img src="https://yupeng-tuchuang.oss-cn-shenzhen.aliyuncs.com/bst_cameras_01.png" alt="img"></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：[<span class="number">0</span>,<span class="number">0</span>,null,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line">解释：如图所示，一台摄像头足以监控所有节点。</span><br></pre></td></tr></table></figure><p>示例 2：</p><p><img src="https://yupeng-tuchuang.oss-cn-shenzhen.aliyuncs.com/bst_cameras_02.png" alt="img"></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：[<span class="number">0</span>,<span class="number">0</span>,null,<span class="number">0</span>,null,<span class="number">0</span>,null,null,<span class="number">0</span>]</span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：需要至少两个摄像头来监视树的所有节点。 上图显示了摄像头放置的有效位置之一。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>给定树的节点数的范围是 <code>[1, 1000]</code>。</li><li>每个节点的值都是 0。</li></ul><h3 id="代码-14"><a href="#代码-14" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minCameraCover</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(traversal(root) == <span class="number">0</span>) <span class="keyword">return</span> ++res;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 0 - 无覆盖 1 - 有摄像头 2 - 有覆盖</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">traversal</span><span class="params">(TreeNode node)</span> &#123;</span><br><span class="line">        <span class="comment">// 终止条件</span></span><br><span class="line">        <span class="keyword">if</span>(node == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 后序递归遍历</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> traversal(node.left);</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> traversal(node.right);</span><br><span class="line">        <span class="comment">// 设置叶子节点为 未覆盖，或者是 两个子节点均已覆盖。那么设置该节点为未覆盖</span></span><br><span class="line">        <span class="keyword">if</span>(left == <span class="number">2</span> &amp;&amp; right == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 存在子节点还未覆盖，该节点设置摄像头</span></span><br><span class="line">        <span class="keyword">if</span>(left == <span class="number">0</span> || right == <span class="number">0</span>) &#123;</span><br><span class="line">            res++;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 子节点有摄像头，该节点设置为覆盖</span></span><br><span class="line">        <span class="keyword">if</span>(left == <span class="number">1</span> || right == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 因为逻辑返回需要，虽然不会到这一步但还是要写</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;贪心算法&quot;&gt;&lt;a href=&quot;#贪心算法&quot; class=&quot;headerlink&quot; title=&quot;贪心算法&quot;&gt;&lt;/a&gt;贪心算法&lt;/h1&gt;&lt;h2 id=&quot;1-455-分发饼干&quot;&gt;&lt;a href=&quot;#1-455-分发饼干&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="leetCode算法" scheme="http://fyupeng.github.io/categories/leetCode%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="贪心算法" scheme="http://fyupeng.github.io/tags/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>HashMap底层原理透析</title>
    <link href="http://fyupeng.github.io/2022/07/31/HashMap%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E9%80%8F%E6%9E%90/"/>
    <id>http://fyupeng.github.io/2022/07/31/HashMap%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E9%80%8F%E6%9E%90/</id>
    <published>2022-07-31T05:50:18.000Z</published>
    <updated>2023-01-04T03:07:14.958Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>创作宗旨：化繁为简，绝不冗余，点到为止</p></blockquote><p>直接开门见山，就事论事！</p><blockquote><p>什么是 HashMap?</p></blockquote><p><code>HashMap</code>类继承了父类<code>AbstractMap&lt;K,V&gt;</code>，实现了接口<code>Map&lt;K,V&gt;, Cloneable, Serializable</code>,<code>AbstractMap&lt;K,V&gt;</code>实现了对<code>Map</code>的基本操作，<code>Serializable</code>是序列化接口，可实现序列化，<code>Map&lt;K,V&gt;</code>接口规范了<code>k-v</code>对操作的抽象方法，<code>Cloneable</code>规范了继承了<code>Object</code>后去使用<code>clone()</code>方法前必须得实现<code>Cloneable</code>接口，否则抛出<code>CloneNotSupportedException</code>错误。</p><h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><h3 id="1-HashMap-的线程不安全的场景"><a href="#1-HashMap-的线程不安全的场景" class="headerlink" title="1. HashMap 的线程不安全的场景"></a>1. HashMap 的线程不安全的场景</h3><ul><li>死锁</li></ul><p>扩容产生死锁的原因关键有两点：<br>第一点：链表的头插法转移结点，<code>JDK8</code>版本就改成了尾插法；<br>第二点：多线程环境下，<code>CPU</code>的让出使得头结点的指针指向发生变化，但原线程重新占有<code>CPU</code>时仍然采取原先的做法；<br><strong>解读：</strong><code>JDK8</code>下使用尾插法，就算头结点已经转移了，但还是在头结点位置，也就是转移前后链表顺序不改变，只是多了一次重复的操作，结果不影响。<br>我不会用篇幅很长而做这么点事情，没必要，很简单的事 5 幅图就可以啦。<br>由于<code>HashMap</code>是<code>数组</code>+<code>链表</code>的数据结构，旧桶是指数组下标所在位置。<br><code>线程 1</code> 扩容操作<br><img src="https://yupeng-tuchuang.oss-cn-shenzhen.aliyuncs.com/1658888533494624.png" alt="image.png"></p><p><code>线程 1</code> 转移结点<code>A</code><br><img src="https://yupeng-tuchuang.oss-cn-shenzhen.aliyuncs.com/1658888733985797.png" alt="image.png"><br><code>线程1</code>结点转移完毕<br><img src="https://yupeng-tuchuang.oss-cn-shenzhen.aliyuncs.com/1658888829949728.png" alt="image.png"><br><code>线程2</code>开始转移结点<code>A</code><br>因为是<code>线程2</code>首先要扩容的，不过<code>CPU</code>时间却让给了<code>线程2</code>,<code>线程2</code>也发觉需要扩容，等扩容完毕后再把<code>CPU</code>还给<code>线程1</code><br><img src="https://yupeng-tuchuang.oss-cn-shenzhen.aliyuncs.com/1658888880999037.png" alt="image.png"></p><p><code>线程2</code>转移结点<code>A</code>结束，环形链产生，也就是产生死锁。<br><img src="https://yupeng-tuchuang.oss-cn-shenzhen.aliyuncs.com/1658889083366975.png" alt="image.png"></p><p>所以原因的<code>头插法</code>得以佐证，<code>CPU</code>的轮询切换也演绎的很到位。<br>线程不安全讲完，下面就将原理，去潜移默化它。</p><h3 id="2-HashMap-实现哈希命中均匀"><a href="#2-HashMap-实现哈希命中均匀" class="headerlink" title="2. HashMap 实现哈希命中均匀"></a>2. HashMap 实现哈希命中均匀</h3><p>哈希也就是<code>k</code>的<code>hashcode</code>计算后得到的下标，而<code>hashcode</code>是一个<code>32</code>位的<code>int</code>类型，要让分布均匀，即让不同的k不能出现有相同的效果，也就是得有唯一性，就要完全去利用高<code>16</code>位和低<code>16</code>位，而如果直接用<code>32</code>位去取模运算，高<code>16</code>就可能会用不到，导致<code>hashcode</code>高<code>16</code>位不同的<code>k</code>依旧命中同一个桶位。<br>所以JDK8采取的做法是对高<code>16</code>位与低<code>16</code>位进行异或运算，这样就变相保留了高位和低位的所有特征了。<br>哈希均匀，<code>JDK8</code>之后</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> (key == <span class="literal">null</span>) ? h = key.hashCode() ^ (h &gt;&gt;&gt; <span class="number">16</span>); </span><br></pre></td></tr></table></figure><p>取模运算，<code>JDK7</code>之前</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">h &amp; (length - <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="3-HashMap-参数以及扩容机制"><a href="#3-HashMap-参数以及扩容机制" class="headerlink" title="3. HashMap 参数以及扩容机制"></a>3. HashMap 参数以及扩容机制</h3><p>初始容量<code>16</code>，达到<code>阈值</code>扩容，<code>阈值</code>等于<code>最大容量</code> * <code>负载因子</code>，扩容每次<code>2</code>倍，总是<code>2</code>的<code>n</code>次方。</p><ul><li>扩容机制<br>使用一个容量更大的数组来代替已有的容量小的数组，<code>transfer()</code>方法将原有<code>Entry</code>数组元素拷贝到新的<code>Entry</code>数组里，<code>Java1.7</code>重新计算每个元素在数组中的位置。<br>而<code>Java1.8</code>它不需要重新计算每个元素，它会先比较元素的<code>hashcode &amp; 原来数组的大小</code>的结果，如果为<code>0</code>，就以元素的原下标加入到新数组中，如果为<code>1</code>，就在原下标加上原数组的大小加入到新数组中，这样这两种情况就命中到新数组的<code>前一半</code>和<code>后一半</code>了，也就是将原本全在原数组大小的所有元素又均匀分布一些元素到<code>扩容</code>未使用的下标中。<br>那么就解释一下，假设加入的元素是随机的，也就是所有情况的<code>hash</code>值是均等出现的，而<code>&amp;</code>原数组大小可以这样比如，有<code>64</code>个元素均等的从<code>0</code>到<code>63</code>，那么<code>0</code>到<code>15</code>分配给了扩容后数组大小为<code>32</code>的左半部分，<code>16-31</code>分配给了右半部分，<code>32-48</code>分配给了左半部分，<code>48-63</code>分配给了右半部分，就比较均匀分散在了两侧，而且机会均等，很巧妙！</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 分布到左侧</span></span><br><span class="line"><span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (loTail == <span class="literal">null</span>)</span><br><span class="line">        loHead = e;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        loTail.next = e;</span><br><span class="line">    loTail = e;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 分布到右侧</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (hiTail == <span class="literal">null</span>)</span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">        hiHead = e;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line"><span class="comment">// 尾插法</span></span><br><span class="line">        hiTail.next = e;</span><br><span class="line">    <span class="comment">// 自增，下次尾插法必要的变量</span></span><br><span class="line">    hiTail = e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-HashMap-的-get-和-put-操作"><a href="#4-HashMap-的-get-和-put-操作" class="headerlink" title="4. HashMap 的 get 和 put 操作"></a>4. HashMap 的 get 和 put 操作</h3><ul><li>get</li></ul><blockquote><p>让我们见识下此时无图胜有图的效果吧！</p></blockquote><p><code>get</code>由源码解读是先获取<code>key</code>的<code>hashCode</code>，然后定位到对应的数组位置，再去遍历该元素处的链表<br>在这里才讲<code>equals</code>我觉得是最合适的，可以区分它与<code>hashCode</code>的区别，如果<code>hashCode</code>相同的两个元素在同一个数组下标，<code>equals</code>就开始发挥作用了，<br>不得不说，当然别说我是话痨，我觉得<code>HashMap</code>加入这两个的初衷是如果在一个庞大的<code>Map</code>中，要去<code>get</code>某一个<code>key</code>的<code>value</code>，有一种最直接的做法，就是直接整个<code>Map</code>去<code>equals</code>比较，这没错，而且还是有用的，但加入<code>hashCode</code>之后，<code>hashCode</code>能够给<code>equals</code>先筛选一番，因为不同的<code>key</code>，它的<code>hash</code>值一般是不同的，理解这里的一般，所以<code>hash</code>值不同的<code>equals</code>肯定就不同，就没必要再去对不同下标元素来<code>equals</code>比较了，好理解吧！<br>由于<code>HashMap</code>中新加入了红黑树，就多了一种<code>get</code>到<code>key</code>的方法，是一种二分法，对于大量数据的链表是不推荐的，所以采用红黑树（总是平衡的二叉树）更加地高效！</p><ul><li>put</li></ul><p><code>put</code>的实现主要针对两种<code>key</code>，一种是不存在的<code>key</code>，一种是已存在的<code>key</code><br><strong>局部源码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    <span class="comment">//采用hash(key)来计算key的hashCode值。</span></span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> h;</span><br><span class="line">    <span class="comment">//当key等于null的时候，不走hashCode()方法</span></span><br><span class="line">    <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果为前者，而且<code>key</code>值为<code>null</code>，就在数组下标为<code>0</code>的链表中去寻找<code>key</code>为<code>null</code>的值，当然找不到，就创建<code>key</code>为<code>null</code>的结点。<br>如果为前者，而且<code>key</code>值不为<code>null</code>，就调用该元素hash计算具体的下标，在该下标的链表中寻找，当然也寻找不到，就尾插法加入该<code>k-v</code>结点。<br>如果为后者，即找到了，直接赋值就可以了，不需要考虑是否为<code>null</code>。</p><p>这里要分开来<code>put</code>是因为，在<code>HashTable</code>上，是不允许有<code>key</code>为<code>null</code>的情况出现，因为当<code>key</code>为<code>null</code>时，<code>key.hashCode()</code>会报空指针异常。<br>所以在<code>HashMap</code>做了特别的处理，对<code>key</code>为<code>null</code>做了单独处理，这样就解决了<code>key</code>为<code>null</code>的情况。<br>还有一点，<code>HashMap</code>的<code>value</code>如果设置为<code>null</code>，虽然你<code>put</code>了，但再去取<code>key</code>的时候，依旧是不存在！</p><h2 id="二、附语"><a href="#二、附语" class="headerlink" title="二、附语"></a>二、附语</h2><p>不足之处请大佬予以佐证，不希望哪个地方出现的错误误导同行，结果闹出笑话来，总之你们的阅读和评论是对作者最大的支持！<br>谢谢大家，我会继续努力，只为力争创作高质量的文章，分享给各位有需要的读者。<br>我的技术专栏：<a href="https://github.com/fyupeng">https://github.com/fyupeng</a></p><blockquote><p>专注品质，热爱生活。<br>交流技术，寻求同志。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;创作宗旨：化繁为简，绝不冗余，点到为止&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;直接开门见山，就事论事！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;什么是 HashMap?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;HashMap&lt;/c</summary>
      
    
    
    
    <category term="Java笔记" scheme="http://fyupeng.github.io/categories/Java%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Java原理" scheme="http://fyupeng.github.io/tags/Java%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC</title>
    <link href="http://fyupeng.github.io/2022/07/11/SpringMVC/"/>
    <id>http://fyupeng.github.io/2022/07/11/SpringMVC/</id>
    <published>2022-07-11T06:36:59.000Z</published>
    <updated>2022-07-22T01:27:21.891Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-声明和配置"><a href="#1-声明和配置" class="headerlink" title="1. 声明和配置"></a>1. 声明和配置</h2><h3 id="1-1-自定义容器配置文件"><a href="#1-1-自定义容器配置文件" class="headerlink" title="1.1 自定义容器配置文件"></a>1.1 自定义容器配置文件</h3><ul><li>在web.xml配置文件的的web-app下</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 声明，注册springmvc的核心对象DispatcherServlet --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自定义springmvc配置文件读取的位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- springmvc配置文件位置的属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定自定义文件的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>springmvc默认位置：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--如果不写自定义路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br></pre></td></tr></table></figure><p>则会找默认路径：<code>WebContent/WEB-INF/lib/</code></p><p><strong>要求：</strong></p><ul><li>声明类<code>org.springframework.web.servlet.DispatcherServle</code>t的<code>servlet-name</code>时，其对应的配置文件名称也应为<code>servlet-name</code>的值 + <code>&quot;-servlet&quot;.xml</code></li></ul><p>pom.xml中加入两个依赖包：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- servlet依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- springmvc依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>步骤：</p><ol><li>由于<code>tomcat</code>服务器每次启动会重新加载<code>web.xml</code>配置文件，从而在里面配置启动<code>springmvc.xml</code>，使它自动初始化</li></ol><p><img src="https://yupeng-tuchuang.oss-cn-shenzhen.aliyuncs.com/70d63fad-6c28-4243-b31e-3c388c1a2c15.png" alt="img"></p><ol start="2"><li>由<code>index.jsp</code>通过链接发起，再用<code>MyController</code>处理转发给<code>show.jsp</code></li></ol><p><strong>注意：</strong></p><p>​    MyController通过注解实现控制器，需要在springmvc.xml配置文件中配置扫描器</p><p><code>srpingmvc.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;org.zhkucst.controller&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-过滤器编码"><a href="#1-2-过滤器编码" class="headerlink" title="1.2 过滤器编码"></a>1.2 过滤器编码</h3><p>服务器启动时自动初始化过滤器<br>在<code>web.xml</code>中加入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceRequestEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceResponseEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-3-DispatcherServlet执行源码"><a href="#1-3-DispatcherServlet执行源码" class="headerlink" title="1.3 DispatcherServlet执行源码"></a>1.3 DispatcherServlet执行源码</h3><p><code>springmvc</code>执行过程源代码分析</p><ol><li><code>tomcat</code>启动，创建容器的过程</li></ol><p>​        通过<code>load-on-start</code>标签指定的<code>1</code>，创建<code>DispatcherServlet</code>对象，</p><p>​        <code>DispatcherServlet</code>的父类是继承<code>HttpServlet</code>的，它是一个<code>servlet</code>，在被创建是，会执行<code>init()</code>方法</p><p>​        在<code>init()</code>方法中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建容器，读取配置文件</span></span><br><span class="line">getServletContext().getAttribute(key, ctx);</span><br><span class="line"><span class="comment">//把容器对象放入到ServletContext()</span></span><br><span class="line">getServletContext().setAttribute(key, ctx);</span><br></pre></td></tr></table></figure><p>上面创建容器作用：创建<code>@controller</code>注解所在的类的对象，创建<code>MyController</code>对象，</p><p>这个对象放入到<code>springmvc</code>的容器，容器时<code>map</code>，类似<code>map.put(&quot;myController&quot;, MyController对象)</code></p><ol start="2"><li>请求的处理过程</li></ol><p>执行<code>servlet</code>的<code>service()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doService</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">    DispatcherServlet.doDispatch(request, response)&#123;</span><br><span class="line">    <span class="comment">//调用MyController的.doSome()方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-注解式开发"><a href="#2-注解式开发" class="headerlink" title="2. 注解式开发"></a>2. 注解式开发</h2><h3 id="2-1-文件上传"><a href="#2-1-文件上传" class="headerlink" title="2.1 文件上传"></a>2.1 文件上传</h3><p>和<code>Servlet</code>方式的本质一样，都是通过导入两个jar包（<code>commons-io.jar</code>和<code>commons-fileupload.jar</code>）</p><p>具体步骤：（直接使用<code>CommonsMultipartResolver</code>实现上传）</p><ul><li>jar包</li></ul><p><code>commons-fileupload.jar</code>、<code>commons-io.jar</code></p><ul><li>配置<code>CommonsMultipartResolver</code></li></ul><p>将其加入<code>SpringMVC</code>容器中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- springMVC容器初始化时，会自动寻找一个Id=&quot;multipartResolver&quot;的bean，并将其加入MVC容器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 默认编码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 上传单个文件最大值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;102400&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>控制器：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;testUpload&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testUpload</span><span class="params">(String desc, MultipartFile file)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;文件描述信息：&quot;</span> + desc);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">input</span> <span class="operator">=</span> file.getInputStream();</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line"></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;d:\\&quot;</span> + fileName);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] bs = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 循环从 输入流 input 中读取1024个字节给 bs</span></span><br><span class="line">        <span class="keyword">while</span>((len = input.read(bs)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">// 每次读取到的数据 bs 写入到输入流</span></span><br><span class="line">            out.write(bs, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        out.close();</span><br><span class="line">        input.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将file上传到服务器中的某一个硬盘中</span></span><br><span class="line">    System.out.println(<span class="string">&quot;上传成功&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>表单：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;handler/testUpload&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;desc&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-配置视图解析器"><a href="#2-2-配置视图解析器" class="headerlink" title="2.2 配置视图解析器"></a>2.2 配置视图解析器</h3><p>在<code>springmvc.xml</code>中增加<code>bean</code>来实例并自动配置<code>jsp</code>文件的前缀和后缀</p><p>框架会使用视图解析器的前缀 + 逻辑名称（文件名） + 后缀 组成完成路径    </p><ul><li>视图路径配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--前缀 视图文件的路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/view/&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 后缀 视图文件的扩展名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;Suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>控制器实现转发视图</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/some.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">doSome</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line"></span><br><span class="line">    mv.addObject(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;欢迎使用springmvc做web开发&quot;</span>);</span><br><span class="line">    mv.addObject(<span class="string">&quot;fun&quot;</span>, <span class="string">&quot;执行的是doSome方法&quot;</span>);</span><br><span class="line"></span><br><span class="line">    mv.setViewName(<span class="string">&quot;show&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> mv;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制器不变，跟之前的写法一样</p><ul><li>控制器可以实现多方法，多请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &#123;&quot;/some.do&quot;, &quot;first.do&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">doSome</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line"></span><br><span class="line">    mv.addObject(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;欢迎使用springmvc做web开发&quot;</span>);</span><br><span class="line">    mv.addObject(<span class="string">&quot;fun&quot;</span>, <span class="string">&quot;执行的是doSome方法&quot;</span>);</span><br><span class="line"></span><br><span class="line">    mv.setViewName(<span class="string">&quot;show&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> mv;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value = &#123;&quot;/other.do&quot;, &quot;second.do&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">doOther</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line"></span><br><span class="line">    mv.addObject(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;欢迎使用springmvc做web开发&quot;</span>);</span><br><span class="line">    mv.addObject(<span class="string">&quot;fun&quot;</span>, <span class="string">&quot;执行的是doOther方法&quot;</span>);</span><br><span class="line"></span><br><span class="line">    mv.setViewName(<span class="string">&quot;other&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> mv;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类也可以注解公共路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController</span> &#123;</span><br></pre></td></tr></table></figure><ul><li>常见视图解析器</li></ul><p><code>InternalResourceView</code>、<code>InternalResourceViewResolver</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//springMVC解析jsp时，会默认使用InternalResourceView, 如果发现JSP中包含了jstl语言，则自动转为JstlView</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JstlView</span> exteds InternalResourceView &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>JstlViw</code>    可以解析<code>jstl</code> 从而实现国际化操作</p><h3 id="2-3-国际化"><a href="#2-3-国际化" class="headerlink" title="2.3  国际化"></a>2.3  国际化</h3><p>国际化：针对不同地区、不同国家，进行不同的显示</p><p>中国：（大陆、香港） 欢迎</p><p>美国：welcome</p><p>具体实现国际化的步骤：</p><ul><li>创建资源文件</li></ul><p><code>基名_语言_地区.properties</code></p><p><code>基名_语言.properties</code></p><ul><li>配置<code>springmvc.xml</code>文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;messageSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.context.support.ResourceBundleMessageSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basename&quot;</span> <span class="attr">value</span>=<span class="string">&quot;i18n&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>通过<code>jstl</code>使用国际化</li></ul><p>需要两个依赖包：<code>jstl.jar</code>和 <code>standar.jar</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/fmt&quot; prefix=&quot;fmt&quot; %&gt; </span><br></pre></td></tr></table></figure><p>index.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;handler/testI18n&quot;</span>&gt;test i18n&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>success.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;fmt:message key=<span class="string">&quot;resource.welcome&quot;</span>&gt;&lt;/fmt:message&gt;</span><br><span class="line">&lt;fmt:message key=<span class="string">&quot;resource.exist&quot;</span>&gt;&lt;/fmt:message&gt;</span><br></pre></td></tr></table></figure><p>处理器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;testI18n&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testModelAttribute</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不能直接访问<code>success</code>来国际化，必须通过服务器响应才能实现</p><p><img src="https://yupeng-tuchuang.oss-cn-shenzhen.aliyuncs.com/c2e997d4-eaab-452b-8e64-510cb29f7ab7.png" alt="img"></p><p><img src="https://yupeng-tuchuang.oss-cn-shenzhen.aliyuncs.com/5753ce0a-2bfb-41d4-ac4e-2c570f05719d.png" alt="img"></p><p><img src="https://yupeng-tuchuang.oss-cn-shenzhen.aliyuncs.com/9acd994c-aaf0-4385-adcf-31ff89bdc937.png" alt="img"></p><p><img src="https://yupeng-tuchuang.oss-cn-shenzhen.aliyuncs.com/e96fbba8-7554-4d3f-8b57-08b3cf222a22.png" alt="img"></p><p><code>i18n_en_US.propeities</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">resource.welcome=WELCOME</span><br><span class="line">resource.exist=EXIST</span><br></pre></td></tr></table></figure><p><code>i18n_zh_CN.properties</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">resource.welcome=\u4F60\u597D</span><br><span class="line">resource.exist=\u9000\u51FA</span><br></pre></td></tr></table></figure><p><code>i18n.properties</code></p><p>一般上面的找不到会自动找父类</p><h3 id="2-4-处理器接收参数"><a href="#2-4-处理器接收参数" class="headerlink" title="2.4 处理器接收参数"></a>2.4 处理器接收参数</h3><ul><li>对象接收参数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;receiveobject.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">receiveParam</span><span class="params">(Student myStudent)</span>&#123;</span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line"></span><br><span class="line">    mv.addObject(<span class="string">&quot;myname&quot;</span>, myStudent.getName());</span><br><span class="line">    mv.addObject(<span class="string">&quot;myage&quot;</span>,  myStudent.getAge());</span><br><span class="line">    mv.addObject(<span class="string">&quot;mystudent&quot;</span>,  myStudent);</span><br><span class="line"></span><br><span class="line">    System.out.println(myStudent);</span><br><span class="line"></span><br><span class="line">    mv.setViewName(<span class="string">&quot;show&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> mv;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>形参请求</li></ul><p>请求中所携带的请求参数</p><ol><li><p><code>get</code>方式–通过<code>url</code>拼接，比如<code>localhost:8080/MyProject?name=zs</code></p></li><li><p>或者通过form标签输入input然后传回</p></li></ol><p><strong>注意：</strong></p><p>请求参数必须要与处理器中的形参一致</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;receiveparam.do&quot;</span>&gt;</span><br><span class="line">    姓名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;name&quot;</span>&gt; &lt;br/&gt;</span><br><span class="line">    年龄：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;age&quot;</span>&gt; &lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;other的post请求&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;receiveparam.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">doSome</span><span class="params">(String name, <span class="type">int</span> age)</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>额外：</p><p><code>get</code>方法的编码默认是<code>utf-8</code>，如用<code>get</code>出现中文乱码，则使用的<code>tomcat</code>可能是<code>tomcat7</code>，使用<code>8</code>即以上，默认是<code>utf-8</code>，也可以到<code>apache-tomcat-8.5.63\conf</code>中的<code>server.xml</code>的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">URIEncoding</span>=<span class="string">&quot;UTF-8&quot;</span> <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span> <span class="attr">port</span>=<span class="string">&quot;8888&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span> <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span>/&gt;</span></span><br><span class="line">增加属性：URIEncoding=&quot;UTF-8&quot;</span><br></pre></td></tr></table></figure><h3 id="2-5-静态处理"><a href="#2-5-静态处理" class="headerlink" title="2.5 静态处理"></a>2.5 静态处理</h3><h4 id="2-5-1-第一种静态处理"><a href="#2-5-1-第一种静态处理" class="headerlink" title="2.5.1 第一种静态处理"></a>2.5.1 第一种静态处理</h4><p>交由 <code>tomcat</code> 本身的默认处理</p><p>在路径下：<code>apache-tomcat-9.0.43\conf</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- The default servlet for all web applications, that serves static --&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- resources. It processes all requests that are not mapped to other --&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- servlets with servlet mappings (defined either here or in your own --&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- web.xml file).--&gt;</span></span><br></pre></td></tr></table></figure><p>1.访问静态资源</p><p>2.访问没有被请求映射的<code>servlet</code></p><p>满足以上任意一点的，访问会默认交由<code>default</code>的<code>servlet</code>处理</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.apache.catalina.servlets.DefaultServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>debug<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>0<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>listings<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接着在<code>web.xml</code>使用<code>servlet-name</code>来指定默认的处理器和对要默认处理的路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-5-2-第二种静态处理"><a href="#2-5-2-第二种静态处理" class="headerlink" title="2.5.2 第二种静态处理"></a>2.5.2 第二种静态处理</h4><p>如果将所有页面交由中央调度器处理，即，<code>web.xml</code>中加入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- springmvc配置文件位置的属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定自定义文件的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自定义springmvc配置文件读取的位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--表示默认资源全给DispatcherServlet处理了，而DispatcherServlet本身是没有对静态资源的处理能力--&gt;</span></span><br></pre></td></tr></table></figure><p>会由于中央调度器没有对静态页面的默认处理器</p><p><strong>springMvc可以处理没有被请求映射的处理器</strong></p><p>导致页面转发异常，出现404，资源访问不了或不存在</p><p>需要在<code>springmvc.xml</code>（<code>dispatcherServlet.xml</code>）中添加以下配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>等同于在web.xml中配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jpg<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.js<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.html<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><p>对于<code>web.xml</code>、<code>spring.xml</code>配置文件的修改，需要对服务器进行热部署，即<code>redeloy</code>或者<code>restart</code></p><p>这种方式会导致只能处理静态资源，而中央调度器本身是没有处理静态资源的能力，上面其实是转发给了tomcat处理的，所以第三种处理静态资源出现了</p><h4 id="2-5-3-第三种静态处理"><a href="#2-5-3-第三种静态处理" class="headerlink" title="2.5.3 第三种静态处理"></a>2.5.3 第三种静态处理</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>如果没有加上</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>就只能处理静态资源，其他动态资源无法访问了，为了协调两者需要加入以上两个注解</p><ul><li>上面第二种是转发给<code>tomcat</code>处理的，处理的还是<code>tomcat</code>，下面第二种处理静态资源是</li></ul><p><code>spring</code>专门用于处理静态资源访问请求的处理器<code>ResourceHttpRequestHandler</code></p><p>好处是不用再交给<code>tomcat</code>处理了，完全交给<code>spring</code></p><p><strong>需要spring3.0以上</strong></p><p>改写成</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/img/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/img/&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/js/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/js/&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/html/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/html/&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  location 表示静态资源所在的目录, 目录不要使用/WEB-INF/及其子目录</span></span><br><span class="line"><span class="comment">  mapping 表示对该资源的请求 （mapping=&quot;/images/**&quot;表示对 以/img/开始的请求，如</span></span><br><span class="line"><span class="comment">/img/beauty.jpg、/img/car.png）</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><p>再改进： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/static/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/static/&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://yupeng-tuchuang.oss-cn-shenzhen.aliyuncs.com/78ddbc1f-6abe-46b4-81b7-7239861bcf01.png" alt="img"></p><h3 id="2-6-类型转换器"><a href="#2-6-类型转换器" class="headerlink" title="2.6 类型转换器"></a>2.6 类型转换器</h3><ul><li>Spring自带一些常见的类型转换器</li></ul><p><code>public String testDelete(@PathVariable(&quot;id&quot;) String id)</code> ,即可以接受<code>int</code> 类型数据id也可以接受<code>String</code> 类型数据<code>id</code></p><ul><li>自定义类型转换器</li></ul><p>编写 自定义类型转换器的类（实现<code>Converter</code>）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConverter</span> <span class="keyword">implements</span> <span class="title class_">Converter</span>&lt;String, Object&gt;&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">convert</span><span class="params">(String source)</span> &#123;<span class="comment">//source:2-zs</span></span><br><span class="line">        String[] studentStrArr = source.split(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        student.setId(Integer.parseInt(studentStrArr[<span class="number">0</span>]));</span><br><span class="line">        student.setName(studentStrArr[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> student;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;testConverter&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testConverter</span><span class="params">(<span class="meta">@RequestParam(value = &quot;studentInfo&quot;)</span> Student student)</span> &#123;</span><br><span class="line">    System.out.println(student.getId() + <span class="string">&quot;,&quot;</span> + student.getName());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>@RequestParam(value = &quot;studentInfo&quot;)</code> 是触发转换器的桥梁</p><p><code>@RequestParam(value = &quot;studentInfo&quot;)</code>接收的数据 是前端传过来的：<code>2-zs</code>,但是需要将该数据复制给 修饰的 目的对象<code>Student</code></p><p>因此<code>SpringMVC</code>可以发现接收的数据和 目标数据的不一致，并且这两种数据分别是<code>String</code>,<code>Student</code>,正好符合转化器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Student <span class="title function_">convert</span><span class="params">(String source)</span> &#123;<span class="comment">//source:2-zs</span></span><br></pre></td></tr></table></figure><p>从而触发</p><ul><li>配置：将MyConverter加入到springmvc中</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 自定义转换器 纳入SpringIOC容器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myConverter&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.zhkucst.converty.MyConverter&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 将myConverter再纳入SpringMVC提供的转换器Bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;conversionService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.context.support.ConversionServiceFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;converters&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;myConverter&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 将conversionService 注册到annotation-driven中 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 此配置是SpringMVC的基础配置，很多功能都需要通过该注解来协调 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">&quot;conversionService&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-7-数据格式化"><a href="#2-7-数据格式化" class="headerlink" title="2.7 数据格式化"></a>2.7 数据格式化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span> (<span class="string">&quot;yyyy-MM hh:mm:ss&quot;</span>);</span><br></pre></td></tr></table></figure><p><code>SpringMVC</code>提供了很多注解，方便我们数据格式化</p><p>实现步骤：</p><ul><li>配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">&quot;conversionService&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置数据格式化所依赖的bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;conversionService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.format.support.FormattingConversionServiceFactoryBean&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>通过注解使用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="meta">@NumberFormat(pattern = &quot;###,#&quot;)</span><span class="comment">//格式化数字</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span><span class="comment">//格式化日期</span></span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br></pre></td></tr></table></figure><p>处理器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;testDateFormat&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testDateFormat</span><span class="params">(Student student, BindingResult result)</span> &#123;</span><br><span class="line"></span><br><span class="line">    System.out.println(student.getId() + <span class="string">&quot;,&quot;</span> + student.getName() + <span class="string">&quot;,&quot;</span> + student.getBirthday());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(result.getErrorCount() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span>(FieldError error : result.getFieldErrors()) &#123;</span><br><span class="line">            System.out.println(error.getDefaultMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>BindingResult</code> <code>result</code>传的参数相当于捕获异常，<code>try&#123;&#125;</code></p><p><code>catch()&#123;&#125;</code>,因此不会抛异常了</p><p>包中，数据格式化的<code>bean</code>类<code>FormattingConversionServiceFactoryBean</code>包含了转换器的<code>bean</code>类<code>ConversionServiceFactoryBean</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--既可以实现转换、也可以实现数据格式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;conversionService&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;org.springframework.format.support.FormattingConversionServiceFactoryBean&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--只能实现转换--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;conversionService&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;org.springframework.context.support.ConversionServiceFactoryBean&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-7-1-错误信息"><a href="#2-7-1-错误信息" class="headerlink" title="2.7.1 错误信息"></a>2.7.1 错误信息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String testDateTimeFormat（Student student, BindingResult result, Map&lt;String,Object&gt; map）</span><br></pre></td></tr></table></figure><p>需要验证的数据是 <code>Student</code>中的<code>birthday</code>, <code>SpringMVC</code>要求 如果校验失败 则将错误信息 自动放入 该对象之后 的参数中，</p><p>即<code>Student student, BindingResult result</code>之间 不能有其他参数</p><p>如果要将控制台的错误信息传到<code>jsp</code>中显示，则可以将 错误信息对象放入<code>request</code>域中然后在jsp中 从 <code>request</code>取出</p><h4 id="2-7-2数据校验"><a href="#2-7-2数据校验" class="headerlink" title="2.7.2数据校验"></a>2.7.2数据校验</h4><p><code>JSR-303</code> 是<code>JAVA EE6</code> 中的一项子规范，叫做<code>Bean Validation</code>，<code>Hibernate Validator</code> <code>是 Bean Validation</code> 的参考实现，提供了 <code>JSR 303</code> 规范中所有内置 <code>constraint</code> 的实现，除此之外还有一些附加的 <code>constraint</code>。</p><p>数据校验</p><p>​    1.<code>JSR303</code></p><p>​    2.<code>Hibernate Validator</code></p><p>使用Hibernate Validator步骤：</p><ul><li>导包</li></ul><table><thead><tr><th>classmate-1.5.1.jar</th></tr></thead><tbody><tr><td>hibernate-validator-5.4.1.Final.jar</td></tr><tr><td>hibernate-validator-annotation-processor-5.4.1.Final.jar</td></tr><tr><td>jboss-logging-3.3.0.Final.jar</td></tr><tr><td>validation-api-1.1.0.Final.jar</td></tr></tbody></table><ul><li>配置</li></ul><p>此时<code>mvc:annotation-driven</code>的作用，要实现<code>Hibernate Validator/JSR303</code>校验(或者其他各种校验) 必须实现<code>SpringMVC</code>提供的一个接口：</p><p><code>ValidatorFactory</code></p><p><code>LocalValidatorFactoryBean</code>是<code>ValidatorFactory</code>的一个实现类</p><p><code>&lt;mvc:annotation-driven&gt;&lt;/mvc:annotation-driven&gt;</code>会在<code>springmvc</code>容器中 自动加载一个<code>LocalValidatorFactoryBean</code></p><p>所以配置只需要配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>直接使用注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="meta">@NumberFormat(pattern = &quot;###,#&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Past</span></span><br><span class="line">    <span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Email</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br></pre></td></tr></table></figure><p>要求：在属性上使用注解后，需要在控制器中的参数Student前使用注解@Valid，标明上是要有合法性的参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;testDateFormat&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testDateFormat</span><span class="params">(<span class="meta">@Valid</span> Student student, BindingResult result)</span> &#123;</span><br></pre></td></tr></table></figure><h3 id="2-8-路径"><a href="#2-8-路径" class="headerlink" title="2.8 路径"></a>2.8 路径</h3><h4 id="2-8-1-绝对路径和相对路径"><a href="#2-8-1-绝对路径和相对路径" class="headerlink" title="2.8.1 绝对路径和相对路径"></a>2.8.1 绝对路径和相对路径</h4><p>jsp请求路径：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;some.do&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    姓名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;name&quot;</span>&gt; &lt;br/&gt;</span><br><span class="line">    年龄：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;age&quot;</span>&gt; &lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;other的post请求&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>不以 “/“ 开头</strong></li></ul><p><img src="https://yupeng-tuchuang.oss-cn-shenzhen.aliyuncs.com/d48db25e-1732-42e6-808a-66ca8a8eed8f.png" alt="img"></p><p>参考的地址为 <code>http://localhost:8888/ch06-path/</code></p><p>即 <code>http://localhost:8888/ch06-path/</code> + <code>some.do</code></p><p><strong>隐患：</strong>  </p><p>由于多次请求导致路径发生变化，从而请求不到资源，原因：使用了相对路径</p><p>常见例子：</p><ol><li><p>index.jsp访问 <code>user/some.do</code></p></li><li><p><code>http://localhost:8080/project/user/some.do</code> 中返回到<code>index.jsp</code></p></li><li><p><code>http://localhost:8080/project/user/some.do</code> (是因为是由处理器发起了转发，因而地址没有改变)</p></li><li><p>再次访问<code>some.do</code>就会出现 <code>http://localhost:8080/project/user/user/some.do</code></p></li></ol><p><strong>解决方法：</strong></p><ol><li>使用base标签</li></ol><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;base href=<span class="string">&quot;http://localhost:8888/$&#123;pageContext.request.ContextPath&#125;/&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>则<code>form</code>表单或<code>a</code>标签每次请求的基地址都是以<code>http://localhost:8888/$&#123;pageContext.request.ContextPath&#125;/</code>开头 + <code>some.do</code></p><ol start="2"><li>更加动态、灵活的方式</li></ol><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line"><span class="type">String</span> <span class="variable">basePath</span> <span class="operator">=</span> request.getScheme() + <span class="string">&quot;://&quot;</span> +</span><br><span class="line">    request.getServerName() + <span class="string">&quot;:&quot;</span> + request.getServerPort() +</span><br><span class="line">    request.getContextPath() + <span class="string">&quot;/&quot;</span>;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;base href=<span class="string">&quot;&lt;%=basePath%&gt;&quot;</span>&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>以 “/”开头</strong></li></ul><p>参考的地址为 <code>http://localhost:8888/</code> </p><p>即 <code>http://localhost:8888/</code> + <code>some.do</code></p><p>处理方法：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;/ch06-path/some.do&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    姓名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;name&quot;</span>&gt; &lt;br/&gt;</span><br><span class="line">    年龄：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;age&quot;</span>&gt; &lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;other的post请求&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>不够灵活：</p><p><strong>解决方法：</strong></p><p>加上<code>$&#123;pageContext.request.ContextPath&#125;</code></p><p><code>$&#123;pageContext.request.ContextPath&#125;</code>表示项目根</p><p>即<code>http://localhost:8888/</code> + ch06_path </p><p>即</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;$&#123;pageContext.request.ContextPath&#125;/some.do&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    姓名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;name&quot;</span>&gt; &lt;br/&gt;</span><br><span class="line">    年龄：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;age&quot;</span>&gt; &lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;other的post请求&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p><strong>扩展：</strong></p><p><code>ant</code>风格的请求路径：</p><p><code>？</code>：单字符</p><p>*   ：任意字符（0或多个）</p><p><code>**</code>：任意目录</p><h4 id="2-8-2-路径访问问题"><a href="#2-8-2-路径访问问题" class="headerlink" title="2.8.2 路径访问问题"></a>2.8.2 路径访问问题</h4><p><code>web</code>项目中，<code>WEB-INF</code>是受保护的，通过url路径访问会出现<code>404</code>,不允许访问</p><p><img src="https://yupeng-tuchuang.oss-cn-shenzhen.aliyuncs.com/39dfad24-cc57-4074-8d3c-062e0fba5820.png" alt="img"></p><p><code>WEB-INF</code>目录中的文件只能通过转发来实现</p><h3 id="2-9-RequestMapping"><a href="#2-9-RequestMapping" class="headerlink" title="2.9 RequestMapping"></a>2.9 RequestMapping</h3><h4 id="2-9-1-RequestParam注解"><a href="#2-9-1-RequestParam注解" class="headerlink" title="2.9.1 @RequestParam注解"></a>2.9.1 @RequestParam注解</h4><p>如果表单的传值和控制器中的形参变量不一致，则需要通过在变量名前加上注<code>RequestParam</code></p><p>表单提交：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;receiveparam.do&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    姓名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;rname&quot;</span>&gt; &lt;br/&gt;</span><br><span class="line">    年龄：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;rage&quot;</span>&gt; &lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;other的post请求&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>控制器：</p><p>添加注解：<code>@RequestParam(value = &quot;rname&quot;)</code></p><p>​                <code>@RequestParam(value = &quot;rage&quot;)</code></p><p>表示请求中的参数，例如<code>url</code>：<code>localhost:8080/MyProject?rname=&amp;rage=</code></p><p> <code>value</code>值与表单的传值一致</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;receiveparam.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">receiveParam</span><span class="params">(<span class="meta">@RequestParam(value = &quot;rname&quot;)</span> String name,</span></span><br><span class="line"><span class="params">                                 <span class="meta">@RequestParam(value = &quot;rage&quot;)</span> Integer age)</span>&#123;</span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line"></span><br><span class="line">    mv.addObject(<span class="string">&quot;myname&quot;</span>, name);</span><br><span class="line">    mv.addObject(<span class="string">&quot;myage&quot;</span>,  age);</span><br><span class="line"></span><br><span class="line">    mv.setViewName(<span class="string">&quot;show&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> mv;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>  不能直接访问<code>servlet</code>地址，必须先通过表单传参或地址栏传参</p><p>出错<code>400</code></p><p><img src="file://C:\Users\fyp01\Documents\FocusNote\assets\5c42bac3-3766-450c-9753-45d194f5deae.png?t=1658047446525" alt="img"></p><p>所以，需要在方法前再加另外一个注解表明是否表示请求中必须包含此参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestParam(value = &quot;rname&quot;, required = false)</span> String name,</span><br><span class="line"><span class="meta">@RequestParam(value = &quot;rage&quot;, required = false)</span> Integer age)</span><br></pre></td></tr></table></figure><p>默认<code>require</code>为<code>true</code>，即包含的参数是必须的</p><p><code>localhost:8080/MyProject?rname=&amp;rage=</code></p><p><code>false</code>则非必须，可以有，也可以没有</p><h4 id="2-9-2-RequestMapping属性"><a href="#2-9-2-RequestMapping属性" class="headerlink" title="2.9.2 @RequestMapping属性"></a>2.9.2 @RequestMapping属性</h4><ul><li><strong>传参数</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;welcome&quot;,method=&quot;RequestMethod.Post&quot;,</span></span><br><span class="line"><span class="meta">                params=&#123;&quot;name=zs&quot;,&quot;age!=23&quot;,&quot;!height&quot;&#125;)</span></span><br></pre></td></tr></table></figure><p>说明：</p><ol><li><p><code>age</code>可以为空，不传值</p></li><li><p><code>height</code>不能传值</p></li></ol><ul><li><strong>请求头信息</strong></li></ul><p>设置请求头信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;welcome&quot;,method=&quot;RequestMethod.Post&quot;,</span></span><br><span class="line"><span class="meta">                headers =&#123;&quot;Accept=text/html,application/xhtml....&quot;,&quot;....&quot;&#125;</span></span><br></pre></td></tr></table></figure><p>获取请求头信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;testRest/&#123;id&#125;&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">welcome4</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id, </span></span><br><span class="line"><span class="params">                       <span class="meta">@RequestHeader(&quot;Accept-Language&quot;)</span> String al)</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：需要支持或兼容该请求头的浏览器</p><ul><li><strong>路径请求参数</strong></li></ul><p>表单：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;&quot;</span>handler/welcome/zs<span class="string">&quot;&gt;路径传参&lt;/a&gt;</span></span><br></pre></td></tr></table></figure><p>后台接收：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;welcome/&#123;name&#125;&quot;,method=&quot;RequestMethod.Post&quot;,</span></span><br><span class="line"><span class="meta">                public String welcome(@PathVariable(&quot;name&quot;) String name) &#123;</span></span><br><span class="line"><span class="meta">                &#125;                 </span></span><br></pre></td></tr></table></figure><ul><li><strong>Cookie信息</strong></li></ul><p>通过<code>mvc</code>获取<code>cookie</code>值（<code>JESSIONID</code>）</p><p><code>@CookieValue</code></p><p>(前置知识：服务端在接受客户端第一次请求时，会给客户端分配一个<code>session</code>(该<code>session</code>包含一个<code>sessionId</code>))</p><p>小结：</p><p><code>SpringMVC</code>处理各种参数的流程、逻辑：</p><p>请求：前端发请求<code>a-&gt;@RequestMapping(&quot;a&quot;)</code>;</p><p>处理请求中的参数：</p><p>​        <code>@RequestMapping(&quot;a&quot;)</code></p><p>​        <code>public String aa(&quot;@Xxx注解(xyz)&quot; xyz)</code></p><h4 id="2-9-3-指定请求方式Method属性"><a href="#2-9-3-指定请求方式Method属性" class="headerlink" title="2.9.3 指定请求方式Method属性"></a>2.9.3 指定请求方式Method属性</h4><p>在方法名上标明注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &#123;&quot;/some.do&quot;, &quot;/first.do&quot;&#125;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">doSome</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//如果不指定请求方式，则没有限制</span></span><br></pre></td></tr></table></figure><p><code>form</code>标签指定<code>get</code>方法，控制器不能指定<code>post</code>方法</p><p>否则会出现<code>405</code>错误</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;test/some.do&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;other的post请求&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p><img src="https://yupeng-tuchuang.oss-cn-shenzhen.aliyuncs.com/c1c2d500-b542-43d3-83bd-aebb4be2501e.png" alt="img"></p><h3 id="2-10-处理模型数据"><a href="#2-10-处理模型数据" class="headerlink" title="2.10 处理模型数据"></a>2.10 处理模型数据</h3><ul><li><strong>数据模型</strong>：<code>ModelAndView、Model、ModelMap、Map</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;testMap&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testMap</span><span class="params">(Map&lt;String,Object&gt; map)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">    student.setId(<span class="number">3</span>);</span><br><span class="line">    student.setName(<span class="string">&quot;zs&quot;</span>);</span><br><span class="line"></span><br><span class="line">    map.put(<span class="string">&quot;student&quot;</span>, student);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;testModelMap&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testModelMap</span><span class="params">(ModelMap modelMap)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">    student.setId(<span class="number">3</span>);</span><br><span class="line">    student.setName(<span class="string">&quot;zs&quot;</span>);</span><br><span class="line"></span><br><span class="line">    modelMap.put(<span class="string">&quot;student&quot;</span>, student);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;testModel&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testModel</span><span class="params">(Model model)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">    student.setId(<span class="number">3</span>);</span><br><span class="line">    student.setName(<span class="string">&quot;zs&quot;</span>);</span><br><span class="line"></span><br><span class="line">    model.addAttribute(<span class="string">&quot;student&quot;</span>, student);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;testModelAndView&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">testModelAndView</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">modelAndView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">    student.setId(<span class="number">3</span>);</span><br><span class="line">    student.setName(<span class="string">&quot;zs&quot;</span>);</span><br><span class="line"></span><br><span class="line">    modelAndView.addObject(<span class="string">&quot;student&quot;</span>, student);</span><br><span class="line">    modelAndView.setViewName(<span class="string">&quot;success&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>将数据放入<code>request</code>后，也放入<code>session</code></strong></li></ul><p>类名上添加</p><ol><li><code>@SessionAttributes(&quot;student4&quot;)</code> : 静态写法</li></ol><p>参数名与<code>requesst</code>域的<code>key</code>值相同，表示指定哪一个k-v对</p><ol start="2"><li><code>@SessionAttributes(types = Student.class)</code> ： 动态代理写法</li></ol><p>具体是以调用哪个方法中的<code>student</code>来动态同步到<code>session</code></p><ul><li><strong>@ModelAttribute</strong></li></ul><ol><li><p>有该注解的方法在会在每次请求前先执行</p></li><li><p>并且该方法的参数<code>map.put()</code>可以将对象 放入即将查询的参数中</p></li></ol><p>必须满足的约定：</p><ol><li><p><code>map.put(k,v)</code>其中的<code>k</code>必须是即将查询方法参数的 首字母小写<code>testModelAtribute(Student xxx)</code> , 即<code>student</code>;</p></li><li><p>如果不一致,需要通过<code>@ModelAttribute</code>声明。</p></li></ol><p>​     <code>map.put(&quot;stu&quot;,student)</code></p><p><code>testModelAtribute( @ModelAttribute(&quot;stu&quot;） Student student )</code></p><p>示例：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;handler/testModelAttribute&quot;</span>&gt;</span><br><span class="line">    name:&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;name&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;testModelAttribute&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*先执行该方法*/</span>  </span><br><span class="line"><span class="meta">@ModelAttribute</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">queryStudents</span><span class="params">(Map&lt;String, Object&gt; map)</span> &#123;</span><br><span class="line">    <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">    student.setId(<span class="number">5</span>);</span><br><span class="line">    student.setName(<span class="string">&quot;ww&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(student.getId()+<span class="string">&quot;,&quot;</span> + student.getName());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    map.put(<span class="string">&quot;student&quot;</span>, student);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*执行完后，该注解会被标记为通知，会执行框架中的另外的方法（method,map,student,handler）</span></span><br><span class="line"><span class="comment">      目的：把map中包含的student传给请求的方法体参数中,并通过前端的传值，覆盖student</span></span><br><span class="line"><span class="comment">      原理：面向切面，即AOP </span></span><br><span class="line"><span class="comment">      method:    public String testModelAttribute(Student student)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      map:       map.put(&quot;student&quot;, student);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      student:   Student student = new Student();</span></span><br><span class="line"><span class="comment">             student.setId(5);</span></span><br><span class="line"><span class="comment">         student.setName(&quot;ww&quot;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      handler:   @Controller</span></span><br><span class="line"><span class="comment">@RequestMapping(value = &quot;handler&quot;)</span></span><br><span class="line"><span class="comment">public class SpringMVCHandler &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*前端请求处理的方法，先调用有注解@ModelAttribute的方法*/</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;testModelAttribute&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testModelAttribute</span><span class="params">(Student student)</span> &#123;</span><br><span class="line">    System.out.println(student.getId()+<span class="string">&quot;,&quot;</span> + student.getName());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-11-返回值"><a href="#2-11-返回值" class="headerlink" title="2.11 返回值"></a>2.11 返回值</h3><h4 id="2-11-1-返回-ModelAndView、String"><a href="#2-11-1-返回-ModelAndView、String" class="headerlink" title="2.11.1 返回 ModelAndView、String"></a>2.11.1 返回 <code>ModelAndView</code>、<code>String</code></h4><ul><li><strong>ModeAndView</strong></li></ul><p>前面已经演示过：返回数据 + 视图</p><ul><li><strong>String</strong>，返回String（视图）</li></ul><p>可分为逻辑视图和完整视图</p><p>​    （1）逻辑视图需要配置视图解析器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;returnString-view.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">doReturnView</span><span class="params">(HttpServletRequest request, String name, <span class="type">int</span> age)</span>&#123;</span><br><span class="line">    request.setAttribute(<span class="string">&quot;myname&quot;</span>, name);</span><br><span class="line">    request.setAttribute(<span class="string">&quot;myage&quot;</span>, age);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;show&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    （2）完整视图不能配置视图解析器，根目录是<code>WebContent</code>或者<code>webapp</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//处理器方法返回String, 表示完整路径，不能配置视图解析器</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;returnString-view2.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">doReturnView2</span><span class="params">(HttpServletRequest request, String name, <span class="type">int</span> age)</span>&#123;</span><br><span class="line">    request.setAttribute(<span class="string">&quot;myname&quot;</span>, name);</span><br><span class="line">    request.setAttribute(<span class="string">&quot;myage&quot;</span>, age);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;/WEB-INF/view/show.jsp&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-11-2-返回-void、Object"><a href="#2-11-2-返回-void、Object" class="headerlink" title="2.11.2 返回 void、Object"></a>2.11.2 返回 <code>void</code>、<code>Object</code></h4><ul><li><strong>void</strong> <strong>用于处理ajax</strong></li></ul><p>需要使用<code>ajax</code>，导入<code>jquery-3.5.1.js</code> 以及 <code>pom</code>中加入依赖包（<code>jackson-databind</code> 和<code>jackson-core</code>）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>前端：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;js/jquery-3.5.1.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">function</span> <span class="title function_">button_data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    $.<span class="title function_">ajax</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">url</span>:<span class="string">&quot;returnVoidAjax.do&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">age</span>:<span class="string">&quot;21&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">type</span>:<span class="string">&quot;post&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">dataType</span>:<span class="string">&quot;json&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">success</span>:<span class="keyword">function</span>(<span class="params">msg</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">alert</span>(msg.<span class="property">name</span> + <span class="string">&quot;,&quot;</span> + msg.<span class="property">age</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dataType</span>:<span class="string">&quot;json&quot;</span>,<span class="comment">//是指定控制返回的类型，如果没有它，jquery默认也是当成json处理</span></span><br></pre></td></tr></table></figure><p>但处理器中<code>response</code>没有设置响应头，则数据无法传到前端</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button id=<span class="string">&quot;btn&quot;</span> onclick=<span class="string">&quot;button_data()&quot;</span>&gt;发起ajax请求&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>控制器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;returnVoidAjax.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">returnVoidAjax</span><span class="params">(HttpServletResponse response, String name, Integer age)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">    student.setName(name);</span><br><span class="line">    student.setAge(age);</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">ObjectMapper</span> <span class="variable">om</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">    json = om.writeValueAsString(student);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置响应头，设备响应编码，不设置会乱码</span></span><br><span class="line">    response.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">    <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span>  response.getWriter();</span><br><span class="line">    pw.print(json);</span><br><span class="line"></span><br><span class="line">    pw.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应头：增加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置响应头，设备响应编码，不设置会乱码</span></span><br><span class="line">response.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br></pre></td></tr></table></figure><p>后显示：</p><p><img src="https://yupeng-tuchuang.oss-cn-shenzhen.aliyuncs.com/156d3838-2dec-45aa-8360-70afffcc0998.png" alt="img"></p><p><code>json</code>格式字符串转成<code>json</code>对象</p><p><img src="https://yupeng-tuchuang.oss-cn-shenzhen.aliyuncs.com/7b15803c-f2cb-497b-8fdd-b51d66f1aa94.png" alt="img"></p><p>没有增加显示：</p><p><img src="https://yupeng-tuchuang.oss-cn-shenzhen.aliyuncs.com/57d3ec45-bc61-46b7-8f8c-c232e751a46d.png" alt="img"></p><p>导致的乱码：</p><p><img src="https://yupeng-tuchuang.oss-cn-shenzhen.aliyuncs.com/0bb3fc98-4b4c-422f-9d24-9673981e0fc8.png" alt="img"></p><p>虽然前端显示出的数据正常，但<code>F12</code>控制台中<code>response</code>的<code>json</code>格式的字符串和<code>preview</code>的<code>json</code>对象</p><p><code>response</code>从服务器返回的是<code>json</code>格式的字符串{name:”张三”, age: 21}</p><p>因为<code>jquery</code>可以把<code>json</code>格式字符串转换成<code>json</code>对象,并赋值给<code>success</code>中的形参<code>msg</code></p><p>但是<code>request</code>的请求头是默认有的：</p><p><img src="https://yupeng-tuchuang.oss-cn-shenzhen.aliyuncs.com/afddc5cf-4168-473c-8546-c09f07c27542.png" alt="img"></p><ul><li><strong><code>Object</code></strong></li></ul><p>例如<code>String</code>, <code>Integer</code>, <code>Map</code>, <code>List</code>, <code>Student</code>等等都是对象</p><p>对象有属性， 属性就是数据，所以返回<code>Object</code>表示数据，和视图无关</p><p>可以使用对象表示的数据，响应<code>ajax</code>请求。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--加入&lt;mvc:annotation-driven&gt; 注解驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;returnObjectAjax.do&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Student <span class="title function_">returnStudentAjax</span><span class="params">(String name, Integer age)</span>&#123;</span><br><span class="line">    <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">    student.setName(name);</span><br><span class="line">    student.setAge(age);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> student;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">button_data</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>:<span class="string">&quot;returnObjectAjax.do&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>:&#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&quot;张三同学&quot;</span>,</span><br><span class="line">            <span class="attr">age</span>:<span class="string">&quot;21&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">type</span>:<span class="string">&quot;post&quot;</span>,</span><br><span class="line">        <span class="attr">dataType</span>:<span class="string">&quot;json&quot;</span>,</span><br><span class="line">        <span class="attr">success</span>:<span class="keyword">function</span>(<span class="params">resp</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(msg.<span class="property">name</span> + <span class="string">&quot;,&quot;</span> + msg.<span class="property">age</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="2-11-3-返回-List-lt-Object-gt"><a href="#2-11-3-返回-List-lt-Object-gt" class="headerlink" title="2.11.3 返回 List&lt;Object&gt;"></a>2.11.3 返回 <code>List&lt;Object&gt;</code></h4><p>与<code>Object</code>类似</p><p>控制器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;returnObjectArrayAjax.do&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Student&gt; <span class="title function_">returnStudentArrayAjax</span><span class="params">(String name, Integer age)</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    List&lt;Student&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">    student.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    student.setAge(<span class="number">21</span>);</span><br><span class="line">    list.add(student);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    student = <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">    student.setName(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">    student.setAge(<span class="number">24</span>);</span><br><span class="line">    list.add(student);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">button_data</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>:<span class="string">&quot;returnObjectArrayAjax.do&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>:&#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&quot;张三同学&quot;</span>,</span><br><span class="line">            <span class="attr">age</span>:<span class="string">&quot;21&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">type</span>:<span class="string">&quot;post&quot;</span>,</span><br><span class="line">        <span class="attr">dataType</span>:<span class="string">&quot;json&quot;</span>,</span><br><span class="line">        <span class="attr">success</span>:<span class="keyword">function</span>(<span class="params">resp</span>)&#123;</span><br><span class="line">            $.<span class="title function_">each</span>(resp,<span class="keyword">function</span> (<span class="params">i, n</span>)&#123;</span><br><span class="line">                <span class="title function_">alert</span>(n.<span class="property">name</span> + <span class="string">&quot; , &quot;</span> + n.<span class="property">age</span> + <span class="string">&quot;/&quot;</span> )</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="2-11-4-返回-String-文本数据"><a href="#2-11-4-返回-String-文本数据" class="headerlink" title="2.11.4 返回 String 文本数据"></a>2.11.4 返回 <code>String</code> 文本数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">returnString</span><span class="params">(HttpServletResponse response)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;返回String类型&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="comment">//url:&quot;returnVoidAjax.do&quot;,</span></span><br><span class="line">    <span class="comment">// url:&quot;returnObjectAjax.do&quot;,</span></span><br><span class="line">    <span class="comment">//url:&quot;returnObjectArrayAjax.do&quot;,</span></span><br><span class="line">    <span class="attr">url</span>:<span class="string">&quot;returnString.do&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&quot;张三同学&quot;</span>,</span><br><span class="line">        <span class="attr">age</span>:<span class="string">&quot;21&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">type</span>:<span class="string">&quot;post&quot;</span>,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 这里不能用上json了，因为文本数据转换不了json对象</span></span><br><span class="line"><span class="comment">    * 如果文本数据是 &quot;&#123;name:&quot;zs&quot;,age:&quot;21&quot;&#125;&quot;</span></span><br><span class="line"><span class="comment">    * 则可以转换</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="attr">dataType</span>:<span class="string">&quot;text&quot;</span>,</span><br><span class="line">    <span class="attr">success</span>:<span class="keyword">function</span>(<span class="params">resp</span>)&#123;</span><br><span class="line">        <span class="title function_">alert</span>(resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="2-11-5-json-数据手动处理"><a href="#2-11-5-json-数据手动处理" class="headerlink" title="2.11.5 json 数据手动处理"></a>2.11.5 json 数据手动处理</h4><p>需要<code>jackson-core</code>的两个包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;returnVoidAjax.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">returnVoidAjax</span><span class="params">(HttpServletResponse response, String name, Integer age)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">    student.setName(name);</span><br><span class="line">    student.setAge(age);</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">ObjectMapper</span> <span class="variable">om</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">    json = om.writeValueAsString(student);</span><br><span class="line"></span><br><span class="line">    response.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">    <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span>  response.getWriter();</span><br><span class="line">    pw.print(json);</span><br><span class="line"></span><br><span class="line">    pw.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-11-6-ResponseBody的-json-数据处理原理"><a href="#2-11-6-ResponseBody的-json-数据处理原理" class="headerlink" title="2.11.6 @ResponseBody的 json 数据处理原理"></a>2.11.6 @ResponseBody的 json 数据处理原理</h4><ul><li><strong>实现步骤</strong></li></ul><ol><li>加入处理<code>json</code>的工具库的依赖</li></ol><p><code>springmvc</code>默认使用的<code>jackson</code></p><ol start="2"><li>在springmvc配置文件之间加入<code>&lt;mvc:annotation-driven&gt;</code> 注解驱动</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">json = om.writeValueAsString(student);</span><br></pre></td></tr></table></figure><ol start="3"><li>在处理器的方法的上面加入<code>@ResponseBody</code>注解</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">response.setContexType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">pw.println(json);</span><br></pre></td></tr></table></figure><p><code>springmvc</code>处理器方法的返回<code>Object</code>,可以转为<code>json</code>输出到浏览器，响应<code>ajax</code>的内部原理</p><p>1.<code>&lt;mvc:annotation-driven&gt;</code>注解驱动</p><p>注解驱动实现的功能是完成<code>java</code>对象到<code>json</code>、<code>xml</code>、<code>text</code>、<code>二进制</code>等数据格式的转换的7个实现类对象，包括MappingJackson2HttpMessageConvertor(使用<code>jackson</code>工具库中的<code>ObjectMapper</code>实现<code>java</code>对象转为<code>json</code>对象 )</p><p><code>HttpMessageConveter</code>接口：消息转换器</p><p>功能：定义了<code>java</code>转为<code>json</code>，<code>xml</code>等数据格式的方法。这个接口有很多实现类。</p><p>这些实现类完成<code>java</code>对象到<code>json</code>、<code>java</code>对象到<code>xml</code>、<code>java</code>对象到二进制数据的转换</p><p>下面有两个方法是控制器类把结果输出给浏览器时使用的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">canWrite</span><span class="params">(Class&lt;?&gt; var1, <span class="meta">@Nullable</span> MediaType var2)</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">write</span><span class="params">(T var1, <span class="meta">@Nullable</span> MediaType var2, HttpOutputMessage var3)</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例如处理器方法</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;returnObject.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Student <span class="title function_">returnVoidAjax</span><span class="params">(HttpServletResponse response, String name, Integer age)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">    student.setName(name);</span><br><span class="line">    student.setAge(age);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> student;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>)<span class="symbol">canWrite:</span>作用检查处理器方法的返回值，能不能转为var2表示的数据格式。</span><br><span class="line">检查student(name, age)能不能转为var2表示的数据格式，如果检查能转成json，返回<span class="literal">true</span></span><br><span class="line">MediaType：表示数据格式的，例如json、xml等等</span><br><span class="line">StringHttpMessageConverter</span><br><span class="line">MappingJackson2HttpMessageConverter</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span>)<span class="symbol">write:</span> 把处理器方法的返回值对象，调用jackson中的ObjectMapper转为json字符串</span><br><span class="line">json = om.writeValueAsString(student);</span><br></pre></td></tr></table></figure><p>未加入注解驱动时的状态：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--加入&lt;mvc:annotation-driven&gt; 注解驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><p>自动实例化<code>MessageConverter</code>4个实现类</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.http.converter.ByteArrayHttpMessageConverter, </span><br><span class="line">org.springframework.http.converter.StringHttpMessageConverter, org.springframework.http.converter.xml.SourceHttpMessageConverter, org.springframework.http.converter.support.AllEncompassingFormHttpMessageConverter</span><br></pre></td></tr></table></figure><p>加入注解驱动时的状态：</p><p>自动实例化<code>MessageConverter</code>7个实现类</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.http.converter.ByteArrayHttpMessageConverter, </span><br><span class="line">org.springframework.http.converter.StringHttpMessageConverter, **org.springframework.http.converter.ResourceHttpMessageConverter,** </span><br><span class="line">**org.springframework.http.converter.ResourceRegionHttpMessageConverter,** org.springframework.http.converter.xml.SourceHttpMessageConverter, org.springframework.http.converter.support.AllEncompassingFormHttpMessageConverter, **org.springframework.http.converter.json.MappingJackson2HttpMessageConverter**</span><br></pre></td></tr></table></figure><h4 id="2-11-7-乱码问题"><a href="#2-11-7-乱码问题" class="headerlink" title="2.11.7 乱码问题"></a>2.11.7 乱码问题</h4><p>通过请求过来mapping设置响应头</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;returnString.do&quot;, produces = &quot;text/plain;charset=utf-8&quot;)</span></span><br></pre></td></tr></table></figure><p>设置前（默认）</p><p><img src="https://yupeng-tuchuang.oss-cn-shenzhen.aliyuncs.com/58ab19a6-3a96-4a02-8ee1-9018851cf89a.png" alt="img"></p><p><img src="https://yupeng-tuchuang.oss-cn-shenzhen.aliyuncs.com/c4b0498f-9bcb-430b-80b3-6339b1b95f70.png" alt="img"></p><p><img src="https://yupeng-tuchuang.oss-cn-shenzhen.aliyuncs.com/526aa3e2-358a-4c43-a1b9-225aeaeeae16.png" alt="img"></p><p>设置后：</p><p><img src="https://yupeng-tuchuang.oss-cn-shenzhen.aliyuncs.com/044aa562-ed78-4acf-9e91-3f8fe8f89090.png" alt="img"></p><p><img src="https://yupeng-tuchuang.oss-cn-shenzhen.aliyuncs.com/452406ff-a9db-45da-8876-1ca3a364fffa.png" alt="img"></p><p><img src="https://yupeng-tuchuang.oss-cn-shenzhen.aliyuncs.com/8a867b30-14b7-4d4c-9244-b356abdef32f.png" alt="img"></p><h3 id="2-12-RESTFul-风格"><a href="#2-12-RESTFul-风格" class="headerlink" title="2.12 RESTFul 风格"></a>2.12 RESTFul 风格</h3><p><code>REST</code>风格：软件编程风格</p><p><code>Springmvc</code>:</p><p><code>GET</code> : 查</p><p><code>POST</code>: 增</p><p><code>DELETE</code> : 删</p><p><code>PUT</code> : 改</p><p>普通浏览器     只支持<code>get / post</code>  方式请求， 其他请求方式 如 <code>delete / put</code> 需借助过滤器</p><p><strong>过滤器的约定：</strong></p><ul><li><p>过滤的是<code>input</code>标签；</p></li><li><p>标签中类型为隐藏域，而且name必须为”<code>_method</code>“</p></li><li><p>请求方式为<code>post</code></p></li><li><p>根据其<code>value</code>的值来判断</p></li></ul><p>如果<code>value</code>为<code>delete</code> 则将请求改为<code>delete</code>，如果为<code>put</code>，改为<code>put</code></p><ul><li><p>不指定方法请求方式，默认为<code>get</code></p></li><li><p>使用<code>restful</code>风格时，不建议使用其他方式传参，比如”<code>?id=1</code>“，不建议混合使用<code>restful</code>和一般方式，即使可以使用</p></li></ul><p><code>ant</code>风格的请求路径：</p><p><code>？</code>：单字符</p><p>*： 任意字符（0或多个）</p><p><code>**</code>： 任意目录</p><h4 id="2-12-1-Get"><a href="#2-12-1-Get" class="headerlink" title="2.12.1 Get"></a>2.12.1 Get</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;handler/testRest/1234&quot;</span> method=<span class="string">&quot;get&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;get&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;testRest/&#123;id&#125;&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">welcome4</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;get: 改&quot;</span> + id);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-12-2-Post"><a href="#2-12-2-Post" class="headerlink" title="2.12.2 Post"></a>2.12.2 Post</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;handler/testPost/1234&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;hidden&quot;</span> name=<span class="string">&quot;_method&quot;</span> value=<span class="string">&quot;POST&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;testRest/&#123;id&#125;&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">welcome1</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;post: 增&quot;</span> + id);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-12-3-Delete"><a href="#2-12-3-Delete" class="headerlink" title="2.12.3 Delete"></a>2.12.3 Delete</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;handler/testDelete/1234&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;hidden&quot;</span> name=<span class="string">&quot;_method&quot;</span> value=<span class="string">&quot;DELETE&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;testRest/&#123;id&#125;&quot;, method = RequestMethod.DELETE)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">welcome2</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;delete: 删&quot;</span> + id);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-12-4-Put"><a href="#2-12-4-Put" class="headerlink" title="2.12.4 Put"></a>2.12.4 Put</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;handler/testPut/1234&quot;</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;hidden&quot;</span> name=<span class="string">&quot;_method&quot;</span> value=<span class="string">&quot;PUT&quot;</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;testRest/&#123;id&#125;&quot;, method = RequestMethod.PUT)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">welcome3</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;put: 改&quot;</span> + id);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-12-5-声明隐藏域过滤器"><a href="#2-12-5-声明隐藏域过滤器" class="headerlink" title="2.12.5 声明隐藏域过滤器"></a>2.12.5 声明隐藏域过滤器</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>hiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>hiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>版本：</p><p>1.<code>tomcat7</code>版本及以下，<code>tomcat</code>默认不支持<code>RESTful</code>风格的<code>DELETE</code>和<code>PUT</code>, 配置过滤器后<code>tomcat</code>就可以访问了</p><p>2.<code>tomcat8</code>版本即以上，配置过滤器后，执行表单后会跳转到<code>405</code>页面，说明高版本的<code>tomcat</code>是不支持<code>RESTful</code>风格</p><p>方法：在跳转成功的<code>jsp</code>页面，添加错误页面参数<code>isErrorPage=“true”</code></p><p>不配置过滤器默认是支持<code>RESTful</code>风格，也就是不用自己配置过滤器</p><h2 id="3-SSM-整合开发"><a href="#3-SSM-整合开发" class="headerlink" title="3. SSM 整合开发"></a>3. SSM 整合开发</h2><h3 id="3-1-Spring-容器和SpringMVC-容器"><a href="#3-1-Spring-容器和SpringMVC-容器" class="headerlink" title="3.1 Spring 容器和SpringMVC 容器"></a>3.1 Spring 容器和SpringMVC 容器</h3><p>依赖包：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1-b03<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>另加：用于注解<code>@Resource</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.annotation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsr250-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--build中添加以下，把java下的xml文件配置一起打包到target中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>如果xml文件写在与<code>dao</code>同包名下的<code>java</code>资源中，则需要以上<code>build</code>指定<code>xml</code>到打包到<code>target</code>，否则<br>将报错<code>--Request processing failed; nested exception is org.apache.ibatis.binding.BindingException:</code><br><code>mybatis和mapper绑定失败</code></li></ol><p><img src="https://yupeng-tuchuang.oss-cn-shenzhen.aliyuncs.com/a6e4aa3b-4a29-4c94-af85-dab7549528a4.png" alt="img"></p><ol start="2"><li>如果<code>xml</code>文件写在<code>resources</code>中，则只需新建同包名的<code>xml</code>即可</li></ol><p><img src="https://yupeng-tuchuang.oss-cn-shenzhen.aliyuncs.com/e300724d-9596-4e3a-943c-bce2ce002fc4.png" alt="img"><img src="https://yupeng-tuchuang.oss-cn-shenzhen.aliyuncs.com/242e90c9-73de-450a-9d09-c0dc8d4ada00.png" alt="img"></p><h3 id="3-2-整合内置-tomcat"><a href="#3-2-整合内置-tomcat" class="headerlink" title="3.2 整合内置 tomcat"></a>3.2 整合内置 tomcat</h3><p>为什么要整合内置<code>tomcat</code>?</p><p>内置<code>tomcat</code>可以在别人部署项目时不用纠结到使用<code>tomcat</code>版本的问题</p><p>即可以在没有<code>tomcat</code>环境下使用</p><p>步骤：</p><ul><li>1.导入依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">port</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">server</span>&gt;</span>tomcat7<span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">useBodyEncodingForURI</span>&gt;</span>true<span class="tag">&lt;/<span class="name">useBodyEncodingForURI</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">uriEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">uriEncoding</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>手动配置<code>maven</code>启动内置<code>tomcat</code></li></ul><p><img src="https://yupeng-tuchuang.oss-cn-shenzhen.aliyuncs.com/630ea270-274b-4737-8e30-3c4defcebe02.png" alt="img"></p><p><img src="https://yupeng-tuchuang.oss-cn-shenzhen.aliyuncs.com/094fd1bd-ce43-45bc-8474-65ed163cfdde.png" alt="img">    </p><p><img src="https://yupeng-tuchuang.oss-cn-shenzhen.aliyuncs.com/ab7800b2-3cc5-4bfa-afbb-c22cfec53697.png" alt="img"></p><p>最后直接运行即可</p><h3 id="3-3-xml-配置"><a href="#3-3-xml-配置" class="headerlink" title="3.3 xml 配置"></a>3.3 xml 配置</h3><p><strong>1.dispatcherServlet.xml : 中央调度器</strong></p><p>（1）声明注解<code>@controller</code>所在包的扫描器；</p><p>（2）内部资源视图解析器；</p><p>（3）声明<code>mvc</code>注解驱动；</p><p><strong>2.applicationContext.xml : springIOC容器</strong></p><p>（1）声明<code>db.properties</code>所在位置；</p><p>（2）声明数据源；</p><p>（3）声明<code>SqlSessionFactoryBean</code>,创建<code>SqlSessionFactory</code>；</p><p>（4）声明<code>mapper</code>所在包扫描器，自动创建<code>dao</code>对象；</p><p>（5）声明注解<code>@Service</code>所在包的扫描器</p><p><strong>3.mybatiis.xml : mybatis容器</strong></p><p>（1）声明别名</p><p>（2）挂载所有<code>mapper</code>配置文件，配置文件的路径默认在<code>resources</code>下（pom没有声明<code>java</code>中对<code>xml</code>文件的打包）</p><p><strong>4.mapper.xml : mapper容器</strong></p><p>（1）配置<code>namespace</code>,用于绑定<code>Dao</code>接口的，即面向接口编程</p><p>（2）增删查改标签</p><h3 id="3-4-Ajax-请求"><a href="#3-4-Ajax-请求" class="headerlink" title="3.4 Ajax 请求"></a>3.4 Ajax 请求</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;js/jquery-3.5.1.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    $(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">loadStudentData</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    $(<span class="string">&quot;#btnLoader&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">loadStudentData</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">function</span> <span class="title function_">loadStudentData</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    $.<span class="title function_">ajax</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">url</span>:<span class="string">&quot;student/queryStudents.do&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">type</span>:<span class="string">&quot;post&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">dataType</span>:<span class="string">&quot;json&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">success</span>:<span class="keyword">function</span> (<span class="params">data</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;#info&quot;</span>).<span class="title function_">html</span>(<span class="string">&quot;&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $.<span class="title function_">each</span>(data, <span class="keyword">function</span>(<span class="params">i,n</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                $(<span class="string">&quot;#info&quot;</span>).<span class="title function_">append</span>(<span class="string">&quot;&lt;tr&gt;&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    .<span class="title function_">append</span>(<span class="string">&quot;&lt;td&gt;&quot;</span> + n.<span class="property">id</span> + <span class="string">&quot;&lt;/td&gt;&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    .<span class="title function_">append</span>(<span class="string">&quot;&lt;td&gt;&quot;</span> + n.<span class="property">name</span> + <span class="string">&quot;&lt;/td&gt;&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    .<span class="title function_">append</span>(<span class="string">&quot;&lt;td&gt;&quot;</span> + n.<span class="property">age</span> + <span class="string">&quot;&lt;/td&gt;&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    .<span class="title function_">append</span>(<span class="string">&quot;&lt;/tr&gt;&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="3-5-三层整合"><a href="#3-5-三层整合" class="headerlink" title="3.5 三层整合"></a>3.5 三层整合</h3><h4 id="3-5-1-Controller"><a href="#3-5-1-Controller" class="headerlink" title="3.5.1 Controller"></a>3.5.1 Controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/student&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> IStudentService studentService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册学生</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/addStudent.do&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">addStudent</span><span class="params">(Student student)</span>&#123;</span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">tips</span> <span class="operator">=</span> <span class="string">&quot;注册失败&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">nums</span> <span class="operator">=</span> studentService.addStudent(student);</span><br><span class="line">        <span class="keyword">if</span>(nums &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//注册成功</span></span><br><span class="line">            tips = <span class="string">&quot;学生【&quot;</span> + student.getName() + <span class="string">&quot;】注册成功&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//添加数据</span></span><br><span class="line">        mv.addObject(<span class="string">&quot;tips&quot;</span>, tips);</span><br><span class="line">        <span class="comment">//指定结果页面</span></span><br><span class="line">        mv.setViewName(<span class="string">&quot;result&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/queryStudents.do&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Student&gt; <span class="title function_">queryStudents</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        List&lt;Student&gt; students = studentService.findStudents();</span><br><span class="line">        System.out.println(students);</span><br><span class="line">        <span class="keyword">return</span> students;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-5-2-Service"><a href="#3-5-2-Service" class="headerlink" title="3.5.2 Service"></a>3.5.2 Service</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/student&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> IStudentService studentService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册学生</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/addStudent.do&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">addStudent</span><span class="params">(Student student)</span>&#123;</span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">tips</span> <span class="operator">=</span> <span class="string">&quot;注册失败&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">nums</span> <span class="operator">=</span> studentService.addStudent(student);</span><br><span class="line">        <span class="keyword">if</span>(nums &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//注册成功</span></span><br><span class="line">            tips = <span class="string">&quot;学生【&quot;</span> + student.getName() + <span class="string">&quot;】注册成功&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//添加数据</span></span><br><span class="line">        mv.addObject(<span class="string">&quot;tips&quot;</span>, tips);</span><br><span class="line">        <span class="comment">//指定结果页面</span></span><br><span class="line">        mv.setViewName(<span class="string">&quot;result&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/queryStudents.do&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Student&gt; <span class="title function_">queryStudents</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        List&lt;Student&gt; students = studentService.findStudents();</span><br><span class="line">        System.out.println(students);</span><br><span class="line">        <span class="keyword">return</span> students;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-5-3-Dao"><a href="#3-5-3-Dao" class="headerlink" title="3.5.3 Dao"></a>3.5.3 Dao</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insertStudent</span><span class="params">(Student student)</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;Student&gt; <span class="title function_">selectStudents</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-5-4-xml"><a href="#3-5-4-xml" class="headerlink" title="3.5.4 xml"></a>3.5.4 xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- namespace :该mapper.xml的 唯一标识</span></span><br><span class="line"><span class="comment">用于绑定Dao接口的，即面向接口编程</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;org.zhkucst.dao.StudentDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 后续通过 namespace.id --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- parameterType:输入参数的类型</span></span><br><span class="line"><span class="comment">    resultType:查询返回值的类型，返回类型 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectStudents&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line">        select id, name, age from student</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertStudent&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line">        insert into student(name,age) values(#&#123;name&#125;,#&#123;age&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-5-5前端"><a href="#3-5-5前端" class="headerlink" title="3.5.5前端"></a>3.5.5前端</h4><p>index.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line"><span class="type">String</span> <span class="variable">basePath</span> <span class="operator">=</span> request.getScheme() + <span class="string">&quot;://&quot;</span> +</span><br><span class="line">    request.getServerName() + <span class="string">&quot;:&quot;</span> + request.getServerPort() +</span><br><span class="line">    request.getContextPath() + <span class="string">&quot;/&quot;</span>;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;base href=<span class="string">&quot;&lt;%=basePath%&gt;/&quot;</span>&gt;</span><br><span class="line">        &lt;title&gt;功能入口&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;div align=<span class="string">&quot;center&quot;</span>&gt;</span><br><span class="line">            &lt;p&gt;SSM整合&lt;/p&gt;</span><br><span class="line">            &lt;img src=<span class="string">&quot;imges/ssm.jpg&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;table&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td&gt;&lt;a href=<span class="string">&quot;addStudent.jsp&quot;</span>&gt;注册学生&lt;/a&gt;&lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td&gt;&lt;a href=<span class="string">&quot;listStudent.jsp&quot;</span>&gt;浏览学生&lt;/a&gt;&lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">            &lt;/table&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>addStudent.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line"><span class="type">String</span> <span class="variable">basePath</span> <span class="operator">=</span> request.getScheme() + <span class="string">&quot;://&quot;</span> +</span><br><span class="line">    request.getServerName() + <span class="string">&quot;:&quot;</span> + request.getServerPort() +</span><br><span class="line">    request.getContextPath() + <span class="string">&quot;/&quot;</span>;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;base href=<span class="string">&quot;&lt;%=basePath%&gt;/&quot;</span>&gt;</span><br><span class="line">        &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div align=<span class="string">&quot;center&quot;</span>&gt;</span><br><span class="line">            &lt;form action=<span class="string">&quot;student/addStudent.do&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">                &lt;table&gt;</span><br><span class="line">                    &lt;tr&gt;</span><br><span class="line">                        &lt;td&gt;姓名&lt;/td&gt;</span><br><span class="line">                        &lt;td&gt;&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;name&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">                    &lt;/tr&gt;</span><br><span class="line">                    &lt;tr&gt;</span><br><span class="line">                        &lt;td&gt;年龄&lt;/td&gt;</span><br><span class="line">                        &lt;td&gt;&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;age&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">                    &lt;/tr&gt;</span><br><span class="line">                    &lt;tr&gt;</span><br><span class="line">                        &lt;td&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/td&gt;</span><br><span class="line">                        &lt;td&gt;&lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;注册&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">                    &lt;/tr&gt;</span><br><span class="line">                &lt;/table&gt;</span><br><span class="line">            &lt;/form&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>listStudent.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line"><span class="type">String</span> <span class="variable">basePath</span> <span class="operator">=</span> request.getScheme() + <span class="string">&quot;://&quot;</span> +</span><br><span class="line">    request.getServerName() + <span class="string">&quot;:&quot;</span> + request.getServerPort() +</span><br><span class="line">    request.getContextPath() + <span class="string">&quot;/&quot;</span>;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;base href=<span class="string">&quot;&lt;%=basePath%&gt;/&quot;</span>&gt;</span><br><span class="line">        &lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;js/jquery-3.5.1.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">        &lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            $(function()&#123;</span><br><span class="line">                loadStudentData();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                $(<span class="string">&quot;#btnLoader&quot;</span>).click(function ()&#123;</span><br><span class="line">                    loadStudentData();</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            function <span class="title function_">loadStudentData</span><span class="params">()</span>&#123;</span><br><span class="line">                $.ajax(&#123;</span><br><span class="line">                    url:<span class="string">&quot;student/queryStudents.do&quot;</span>,</span><br><span class="line">                    type:<span class="string">&quot;post&quot;</span>,</span><br><span class="line">                    dataType:<span class="string">&quot;json&quot;</span>,</span><br><span class="line">                    success:function (data)&#123;</span><br><span class="line">                        $(<span class="string">&quot;#info&quot;</span>).html(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                        $.each(data, function(i,n)&#123;</span><br><span class="line">                            $(<span class="string">&quot;#info&quot;</span>).append(<span class="string">&quot;&lt;tr&gt;&quot;</span>)</span><br><span class="line">                                .append(<span class="string">&quot;&lt;td&gt;&quot;</span> + n.id + <span class="string">&quot;&lt;/td&gt;&quot;</span>)</span><br><span class="line">                                .append(<span class="string">&quot;&lt;td&gt;&quot;</span> + n.name + <span class="string">&quot;&lt;/td&gt;&quot;</span>)</span><br><span class="line">                                .append(<span class="string">&quot;&lt;td&gt;&quot;</span> + n.age + <span class="string">&quot;&lt;/td&gt;&quot;</span>)</span><br><span class="line">                                .append(<span class="string">&quot;&lt;/tr&gt;&quot;</span>)</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">        &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div align=<span class="string">&quot;center&quot;</span>&gt;</span><br><span class="line">            &lt;table style=<span class="string">&quot;border:1px solid&quot;</span>&gt;</span><br><span class="line">                &lt;thead style=<span class="string">&quot;border:1px solid&quot;</span>&gt;</span><br><span class="line">                    &lt;tr&gt;</span><br><span class="line">                        &lt;td&gt;学号&lt;/td&gt;</span><br><span class="line">                        &lt;td&gt;姓名&lt;/td&gt;</span><br><span class="line">                        &lt;td&gt;年龄&lt;/td&gt;</span><br><span class="line">                    &lt;/tr&gt;</span><br><span class="line">                &lt;/thead&gt;</span><br><span class="line">                &lt;tbody id=<span class="string">&quot;info&quot;</span> style=<span class="string">&quot;border:1px solid&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                &lt;/tbody&gt;</span><br><span class="line">            &lt;/table&gt;</span><br><span class="line">            &lt;input id=<span class="string">&quot;btnLoader&quot;</span> type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;查询数据&quot;</span>&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>result.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    result.jps 结果页面 注册结果：$&#123;tips&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="4-转发和重定向"><a href="#4-转发和重定向" class="headerlink" title="4. 转发和重定向"></a>4. 转发和重定向</h2><h3 id="4-1-转发"><a href="#4-1-转发" class="headerlink" title="4.1 转发"></a>4.1 转发</h3><p>转发和重定向是不受视图解析器影响的，就当没有视图解析器</p><p><code>controller</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;doForward.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">doForward</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line"></span><br><span class="line">    mv.addObject(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;欢迎使用springmvcweb开发&quot;</span>);</span><br><span class="line">    mv.addObject(<span class="string">&quot;fun&quot;</span>, <span class="string">&quot;执行的是dodoForward方法&quot;</span>);</span><br><span class="line">    mv.setViewName(<span class="string">&quot;forward:/WEB-INF/view/show.jsp&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> mv;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><p>1.转发可以访问<code>/WEB-INF/</code>目录下的视图以及其他文件</p><p>2.转发如果携带了数据（请求是实例化在服务器中，数据保存在该<code>request</code>中）</p><p>可以在其他视图中视图<code>EL</code>表达式<code>$&#123;requestScope.name&#125;</code>获取属性值为“<code>name</code>”的值</p><p>3.也可以通过<code>request.getAttribute(&quot;name&quot;)</code>获取，两者等价</p><h3 id="4-2-重定向"><a href="#4-2-重定向" class="headerlink" title="4.2 重定向"></a>4.2 重定向</h3><p><code>controller</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;doRedirect.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">doRedirect</span><span class="params">(String name, Integer age)</span>&#123;</span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line"></span><br><span class="line">    mv.addObject(<span class="string">&quot;myname&quot;</span>, name);</span><br><span class="line">    mv.addObject(<span class="string">&quot;myage&quot;</span>, age);</span><br><span class="line">    mv.setViewName(<span class="string">&quot;redirect:/hello.jsp&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> mv;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.视图：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h3&gt;hello.jsp&lt;/h3&gt;</span><br><span class="line">    &lt;h3&gt;myname数据<span class="number">1</span>：$&#123;param.myname&#125;&lt;/h3&gt;</span><br><span class="line">    &lt;h3&gt;myage数据<span class="number">2</span>：$&#123;param.myage&#125;&lt;/h3&gt;</span><br><span class="line">    &lt;h3&gt;myage数据<span class="number">2</span>：&lt;%=request.getParameter(<span class="string">&quot;myname&quot;</span>)%&gt;&lt;/h3&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>总结：</p><p>1.重定向是第二次请求转发，请求的数据会丢失，不会保留在服务器的<code>request</code>中，是拿了一个新的请求</p><p>2.重定向如果携带了数据，携带的数据不是保存在服务器中，而是在新的请求的形参中，例如：<code>http://locahost:8080/MyProject?name=zs</code></p><p>3.重定向到新的视图中，可以通过<code>$&#123;param.name&#125;</code>获取形参中的变量值，注意，只能获取4个基本类型+<code>String</code>，</p><p>其他类型会以地址<code>@***</code>显示</p><p>4.也可以通过request.getParameter(“name”)获取属性值为“<code>name</code>”的值</p><p>5.注意，通过视图传到控制器，再重定向的，视图中的参数值是获取不到的，两个请求不一样，第一个请求</p><p>结束后已经自动销毁</p><h3 id="4-3-e额外知识"><a href="#4-3-e额外知识" class="headerlink" title="4.3 e额外知识"></a>4.3 e额外知识</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$&#123;param.<span class="property">name</span>&#125; == request.<span class="title function_">getParameter</span>(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">$&#123;requestScope.<span class="property">name</span>&#125; == request.<span class="title function_">getAttribute</span>(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">$&#123;sessionScope.<span class="property">name</span>&#125; == session.<span class="title function_">getAttribute</span>(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">$&#123;applicationScope.<span class="property">name</span>&#125; == application.<span class="title function_">getAttribute</span>(<span class="string">&quot;name&quot;</span>)</span><br></pre></td></tr></table></figure><p><code>session</code>和<code>applicaton</code>如果要在同一个请求中，可以通过<code>request.getSession()</code>和 <code>request.getSession().getServletContext()</code>获取得到</p><p>如果在同一视图，直接<code>appliction.setAttribute()</code>、<code>session.setAttribute()</code>就可以了</p><h2 id="5-集中统一处理异常"><a href="#5-集中统一处理异常" class="headerlink" title="5. 集中统一处理异常"></a>5. 集中统一处理异常</h2><h3 id="5-1-理论"><a href="#5-1-理论" class="headerlink" title="5.1 理论"></a>5.1 理论</h3><p>异常处理：</p><ul><li><strong>通过注解实现异常统一处理：@ExceptionHandler</strong></li></ul><p>springmvc框架采用的是统一、全局的异常处理。</p><p>把controller中的所有异常处理都集中到一个地方。采用的是<code>aop</code>的思想，把业务逻辑和异常处理代码分开，解耦合。</p><p>使用两个注解</p><ol><li><p><code>@ExceptionHandler</code></p></li><li><p>@ControllerAdvice</p></li></ol><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">异常处理步骤：</span><br><span class="line"><span class="number">1</span>.新建maven web项目</span><br><span class="line"><span class="number">2</span>.加入依赖</span><br><span class="line"><span class="number">3</span>.新建一个自定义异常类 MyUserException , 再定义它的子类NameException, AgeException</span><br><span class="line"><span class="number">4</span>.在controller抛出NameException , AgeException</span><br><span class="line"><span class="number">5</span>.创建一个普通类，作用全局异常处理类</span><br><span class="line">    <span class="number">1</span>)在类的上面加入<span class="variable">@controllerAdvice</span></span><br><span class="line">    <span class="number">2</span>)在类中定义方法，方法的上面加入<span class="variable">@ExceptionHandle</span></span><br><span class="line"><span class="number">6</span>.创建springmvc的配置文件</span><br><span class="line">    <span class="number">1</span>)组件扫描器，扫描<span class="variable">@Controller</span>注解</span><br><span class="line">    <span class="number">2</span>)组件扫描器，扫描<span class="variable">@ControllerAdvice</span>所在的包名</span><br><span class="line">    <span class="number">3</span>)声明注解驱动</span><br></pre></td></tr></table></figure><p>结果图：</p><p><img src="file://C:\Users\fyp01\Documents\FocusNote\assets\43f7dfb0-ec87-47fe-8935-4a37f6d4ab57.png" alt="img"></p><p>原理：</p><p>自定义普通类，通过继承<code>Exception</code>使它成为异常类，然后再用注解让<code>springmvc</code>对它管理：</p><p>发生异常，有<code>springmvc</code>来抛异常，不交给<code>jvm</code>虚拟机</p><p><strong>总结：</strong></p><ul><li><p>如果有方法抛出一个异常，对该异常的处理有两种方法，则优先级：最短优先</p></li><li><p>如果一个方法用于处理异常，并且只处理当前类中的异常：<code>@ExceptionHandler</code></p></li><li><p>如果一个方法用于处理异常，并且处理所有类中的异常，类前加<code>@ControllerAdvice</code>, 处理异常的方法前加<code>@ExceptionHandler</code></p></li></ul><p><strong>优先级：</strong></p><ol><li>使用<code>@ExceptionHandler</code>处理本<code>Controller</code>内部异常优先级最高；</li><li>使用<code>@ExceptionHandler</code>+<code>@ControllerAdvice</code>处理外部<code>Controller</code>异常优先级第二； </li><li>自定义实现<code>HandlerExceptionResolver</code>接口的类优先级第三；</li><li><code>spring-context.xml</code>中配置<code>SimpleMappingExceptionResolver</code>优先级第四；</li><li><code>web.xml</code>配置<code>error-page</code>优先级第五；</li><li>不做任何处理，会跳转到<code>tomcat</code>默认的异常页面；</li></ol><ul><li><strong>自定义异常显示页面：@ResponseStatus</strong></li></ul><p><code>ResponseStatusExceptionResolver</code>:自定义异常显示页面 @ResponseStatus</p><p>自定义异常显示页面：<code>@ResponseStatus(value=HttpStatus.FORBIDDEN, reason=&quot;数组越界222&quot;)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@public</span> <span class="keyword">class</span> <span class="title class_">MyArrayIndexOutofBoundsException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span>&#123;<span class="comment">//自定义异常类</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@ResponseStatus</code>也可以标注在方法前： </p><p>自定义异常类：</p><p><img src="https://yupeng-tuchuang.oss-cn-shenzhen.aliyuncs.com/697fe1d6-bde9-47be-854b-b00c70066bc8.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseStatus(value = HttpStatus.FORBIDDEN, reason = &quot;数组越界222&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyArrayIndexOutofBoundException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://yupeng-tuchuang.oss-cn-shenzhen.aliyuncs.com/d565c99b-4ef6-4ea2-9435-2cd7633e51e4.png" alt="img"></p><ul><li><strong>异常处理的实现类：DefaultHandleExceptionResolver</strong></li></ul><p><code>DefaultHandleExceptionResolver:SpringMVC</code>一些常见异常的基础上（<code>300,500,405</code>），新增一些异常，例如：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">* <span class="variable">@since</span> <span class="number">3.0</span></span><br><span class="line">* <span class="variable">@see</span> org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler</span><br><span class="line">* <span class="variable">@see</span> <span class="comment">#handleNoSuchRequestHandlingMethod</span></span><br><span class="line">* <span class="variable">@see</span> <span class="comment">#handleHttpRequestMethodNotSupported ： 如果请求限制为post，实际请求为get，则会触发此异常</span></span><br><span class="line">* <span class="variable">@see</span> <span class="comment">#handleHttpMediaTypeNotSupported</span></span><br><span class="line">* <span class="variable">@see</span> <span class="comment">#handleMissingServletRequestParameter</span></span><br><span class="line">* <span class="variable">@see</span> <span class="comment">#handleServletRequestBindingException</span></span><br><span class="line">* <span class="variable">@see</span> <span class="comment">#handleTypeMismatch</span></span><br><span class="line">* <span class="variable">@see</span> <span class="comment">#handleHttpMessageNotReadable</span></span><br><span class="line">* <span class="variable">@see</span> <span class="comment">#handleHttpMessageNotWritable</span></span><br><span class="line">* <span class="variable">@see</span> <span class="comment">#handleMethodArgumentNotValidException</span></span><br><span class="line">* <span class="variable">@see</span> <span class="comment">#handleMissingServletRequestParameter</span></span><br><span class="line">* <span class="variable">@see</span> <span class="comment">#handleMissingServletRequestPartException</span></span><br><span class="line">* <span class="variable">@see</span> <span class="comment">#handleBindException</span></span><br></pre></td></tr></table></figure><p>这些实现了框架已经实现了，只要出现该异常就会触发</p><ul><li><strong>通过配置实现异常处理：SimpleMappingExceptionResolver</strong></li></ul><p>配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- SimpleMappingExceptionResolver:以配置的方式处理异常 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 可以省略，默认值为exception --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;exceptionAttribute&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;exceptionMappings&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 相当于catch(ArithmeticException ex)&#123;跳转:error&#125; --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;java.lang.ArithmeticException&quot;</span>&gt;</span>error<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>控制器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;testSimpleMappingException&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testSimpleMappingException</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="number">1</span>/<span class="number">0</span>);<span class="comment">//ArithmeticException</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两种方式异常总结：</p><p>1.通过继承+注解<code>@ExceptionHandler</code>统一处理异常</p><p>2.通过配置实现异常处理，与1无异</p><p>3.1和2同时实现，同种异常只由1捕获，即1优先级高于2</p><h3 id="5-2-全局异常处理类"><a href="#5-2-全局异常处理类" class="headerlink" title="5.2 全局异常处理类"></a>5.2 全局异常处理类</h3><p>全局异常处理类相当于一个控制器，只是之前的控制器是控制用户输入数据处理，</p><p>而全局异常处理类是控制用户操作出错处理的控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.zhkucst.handle;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> org.zhkucst.exception.AgeException;</span><br><span class="line"><span class="keyword">import</span> org.zhkucst.exception.NameException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ControllerAdvice:控制器增强（给控制器诶增强功能，异常处理功能）</span></span><br><span class="line"><span class="comment"> *  定义：在类的上面</span></span><br><span class="line"><span class="comment"> *  特点：必须让框架指定这个注解所在的包名，需要在springmvc配置文件声明组件扫描器</span></span><br><span class="line"><span class="comment"> *  指定<span class="doctag">@ControllerAdvice</span>所在的包名</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = NameException.class)</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">doNameException</span><span class="params">(Exception exception)</span>&#123;</span><br><span class="line">        <span class="comment">//处理NameException异常</span></span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">        mv.addObject(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;姓名必须是zs，其他用户不能访问&quot;</span>);</span><br><span class="line">        mv.addObject(<span class="string">&quot;ex&quot;</span>,exception);</span><br><span class="line">        mv.setViewName(<span class="string">&quot;nameError&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = AgeException.class)</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">doAgeException</span><span class="params">(Exception exception)</span>&#123;</span><br><span class="line">        <span class="comment">//处理NameException异常</span></span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">        mv.addObject(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;你的年龄不能大雨80&quot;</span>);</span><br><span class="line">        mv.addObject(<span class="string">&quot;ex&quot;</span>,exception);</span><br><span class="line">        mv.setViewName(<span class="string">&quot;ageError&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">doOtherException</span><span class="params">(Exception exception)</span>&#123;</span><br><span class="line">        <span class="comment">//处理NameException异常</span></span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">        mv.addObject(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;其他错误!!&quot;</span>);</span><br><span class="line">        mv.addObject(<span class="string">&quot;ex&quot;</span>,exception);</span><br><span class="line">        mv.setViewName(<span class="string">&quot;defaultError&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-自定义具体处理类"><a href="#5-3-自定义具体处理类" class="headerlink" title="5.3 自定义具体处理类"></a>5.3 自定义具体处理类</h3><p>步骤：</p><p>写一个自定义父类，继承<code>Exception</code></p><p>再分别写具体的异常类</p><p>1.<code>MyUserException</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.zhkucst.exception;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyUserExcepton</span> <span class="keyword">extends</span> <span class="title class_">Exception</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyUserExcepton</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyUserExcepton</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.<code>NameException</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.zhkucst.exception;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NameException</span> <span class="keyword">extends</span> <span class="title class_">MyUserExcepton</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NameException</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NameException</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.<code>AgeException</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.zhkucst.exception;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AgeException</span> <span class="keyword">extends</span> <span class="title class_">MyUserExcepton</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AgeException</span><span class="params">()</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AgeException</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-4-前端"><a href="#5-4-前端" class="headerlink" title="5.4 前端"></a>5.4 前端</h3><p>1.<code>nameError</code></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h3&gt;nameError.jsp&lt;/h3&gt;</span><br><span class="line">    &lt;h3&gt;msg数据：$&#123;msg&#125;&lt;/h3&gt;</span><br><span class="line">    &lt;h3&gt;message数据：$&#123;ex.message&#125;&lt;/h3&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>2.<code>ageError</code></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h3&gt;ageError.jsp&lt;/h3&gt;</span><br><span class="line">    &lt;h3&gt;msg数据：$&#123;msg&#125;&lt;/h3&gt;</span><br><span class="line">    &lt;h3&gt;message数据：$&#123;ex.message&#125;&lt;/h3&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>3.<code>defaultError</code></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h3&gt;defaultError.jsp&lt;/h3&gt;</span><br><span class="line">    &lt;h3&gt;msg数据：$&#123;msg&#125;&lt;/h3&gt;</span><br><span class="line">    &lt;h3&gt;message数据：$&#123;ex.message&#125;&lt;/h3&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="5-5-处理器"><a href="#5-5-处理器" class="headerlink" title="5.5 处理器"></a>5.5 处理器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;some.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">doSome</span><span class="params">(String name, Integer age)</span> <span class="keyword">throws</span> MyUserExcepton &#123;</span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!<span class="string">&quot;zs&quot;</span>.equals(name))&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NameException</span>(<span class="string">&quot;姓名不正确！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(age == <span class="literal">null</span> || age &gt; <span class="number">80</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AgeException</span>(<span class="string">&quot;年龄比较大！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mv.addObject(<span class="string">&quot;myname&quot;</span>, name);</span><br><span class="line">    mv.addObject(<span class="string">&quot;myage&quot;</span>, age);</span><br><span class="line">    mv.setViewName(<span class="string">&quot;show&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> mv;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-拦截器"><a href="#6-拦截器" class="headerlink" title="6. 拦截器"></a>6. 拦截器</h2><h3 id="6-1-do-和-action-的请求调度"><a href="#6-1-do-和-action-的请求调度" class="headerlink" title="6.1 *.do 和 *.action 的请求调度"></a>6.1 *.do 和 *.action 的请求调度</h3><p>规则不仅仅只有<code>*.do</code>和<code>*.action</code>，自定义也可以</p><p><img src="https://yupeng-tuchuang.oss-cn-shenzhen.aliyuncs.com/462ae275-e9a1-41c1-8a9f-9e0e2d83b557.png" alt="img"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- springmvc的前端控制器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>tony-video-admin-mng<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- contextConfigLocation不是必须的， 如果不配置contextConfigLocation， springmvc的配置文件默认在：WEB-INF/servlet的name+&quot;-servlet.xml&quot; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>tony-video-admin-mng<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.action<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>请求方可以是视图也可以是控制器</p><ul><li>1.请求方为视图：</li><li>2.请求方为控制器：</li></ul><p>通过<code>&lt;jsp:forward page=&quot;$&#123;base&#125;/center.action&quot;&gt;&lt;/jsp:forward&gt;</code></p><p>或通过<code>form</code>表单请求，请求的表单<code>action</code>可以不写<code>.action</code>，但浏览器直接请求需要写后缀<code>.action</code>，<code>base</code>取当前页面所在的路径，经过中央调度器处理后，即上面在<code>web.xml</code>配置<code>*.action</code>的所有请求给中央调度器，解析完后如果控制器上有配置<code>requestMapping</code>会捕捉给控制器，控制器上的<code>requestMapping</code>的<code>value</code>属性可以不写<code>.action</code>后缀，这是中央调度器的解析协议。没有就会转给视图，最后才会报<code>404</code></p><h3 id="6-2-拦截器的介绍"><a href="#6-2-拦截器的介绍" class="headerlink" title="6.2 拦截器的介绍"></a>6.2 拦截器的介绍</h3><ul><li><p>拦截器是springmvc中的一种，需要实现HandlerInterceptor接口</p></li><li><p>拦截器和过滤器类似，功能方向侧重点不同</p><ul><li><p>过滤器是用来过滤请求超时，设置编码字符集等工作；</p></li><li><p>拦截器是拦截用户的请求，对请求做判断处理的。</p></li></ul></li><li><p>拦截器是全局的，可以对多个Controller做拦截</p><ul><li><p>一个项目中可以有0个或多个拦截器，他们在一起拦截用户的请求;</p></li><li><p>拦截器常用在：用户登录处理，权限检查，记录日志。</p></li></ul></li><li><p>拦截器的使用步骤</p><ul><li><p>定义类实现HandlerInterceptor接口</p></li><li><p>在springmvc配置文件中，声明拦截器，让框架指定拦截器的存在</p></li></ul></li><li><p>拦截器的执行时间</p><ul><li><p>在请求处理之前，也就是controller类中的方法执行之前先被拦截；</p></li><li><p>在控制器方法执行之后也会执行拦截器</p></li><li><p>在请求处理完成之后也会执行拦截器</p></li></ul></li></ul><p>拦截器：看做是多个Controller中公用的功能，集中到拦截器统一处理，使用的是aop的思想</p><h3 id="6-3-拦截器三个方法"><a href="#6-3-拦截器三个方法" class="headerlink" title="6.3 拦截器三个方法"></a>6.3 拦截器三个方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.zhkucst.handle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> btime;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * preHandle叫做预处理方法</span></span><br><span class="line"><span class="comment">     * 参数：</span></span><br><span class="line"><span class="comment">     * Object handle：被拦截的控制对象</span></span><br><span class="line"><span class="comment">     * 返回值boolean</span></span><br><span class="line"><span class="comment">     * true:</span></span><br><span class="line"><span class="comment">     * false:</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 特点：</span></span><br><span class="line"><span class="comment">     *  1.方法在控制方法（MyController的doSome）之前先执行的</span></span><br><span class="line"><span class="comment">     *      用户的请求首先到达此方法</span></span><br><span class="line"><span class="comment">     *  2.在这个   方法中可以获取请求的信息，验证请求是否符合要求</span></span><br><span class="line"><span class="comment">     *      可以验证用户是否登录，验证用户是否有权限访问某个连接地址（url）</span></span><br><span class="line"><span class="comment">     *      如果验证失败，可以戳断请求，请求不能被处理</span></span><br><span class="line"><span class="comment">     *      如果验证成功，可以放行请求，此时控制器方法才能执行。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        btime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;拦截器的MyInterceptor的preHandle()&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * postHandle:后处理器方法</span></span><br><span class="line"><span class="comment">     * 参数：</span></span><br><span class="line"><span class="comment">     *  Object handler:被拦截的处理器对象MyController</span></span><br><span class="line"><span class="comment">     *  ModeAndView mv:处理器方法的返回值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *  特点：</span></span><br><span class="line"><span class="comment">     *   1.在处理器方法之后执行的（MyController.doSome()）</span></span><br><span class="line"><span class="comment">     *   2.能够获取处理器方法的返回值ModeAndView,可以修改ModeAndView中的</span></span><br><span class="line"><span class="comment">     *   数据和视图，可以影响到最后的执行结果</span></span><br><span class="line"><span class="comment">     *   3.主要是对原来的执行结果做第二次修正</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">                           HttpServletResponse response,</span></span><br><span class="line"><span class="params">                           Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;拦截器的MyInterceptor的postHandle()&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(modelAndView != <span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="number">11</span>);</span><br><span class="line">            modelAndView.addObject(<span class="string">&quot;mydata&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">            modelAndView.setViewName(<span class="string">&quot;other&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * +afterCompletion:最后执行的方法</span></span><br><span class="line"><span class="comment">     * 参+数：</span></span><br><span class="line"><span class="comment">     *  Ob+ject handle:被拦截的处理器对象</span></span><br><span class="line"><span class="comment">     *  Exception ex：程序中发生的异常</span></span><br><span class="line"><span class="comment">     *  特点：</span></span><br><span class="line"><span class="comment">     *   1.在请求处理完成后执行的，框架中规定是当你的视图处理完成后，对视图执行了forward,就认为请求处理完成</span></span><br><span class="line"><span class="comment">     *   2.一般做资源回收工作，程序请求过程中创建了一些对象，在这里可以</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">etime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;拦截器的MyInterceptor的afterCompletion()&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;计算机从preHandle到请求处理完成的时间:&quot;</span> + (etime - btime));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-4-拦截器的声明"><a href="#6-4-拦截器的声明" class="headerlink" title="6. 4 拦截器的声明"></a>6. 4 拦截器的声明</h3><p>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--声明拦截器：拦截器可以有0或多个--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--声明第一个拦截器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指定拦截的路径--&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span>        </span><br><span class="line">        <span class="comment">&lt;!--指定不拦截的路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:execlude-mapping</span> <span class="attr">path</span>=<span class="string">&quot;/handler/testUpload&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--声明拦截器对象--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.zhkucst.handle.MyInterceptor&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-5-处理步骤"><a href="#6-5-处理步骤" class="headerlink" title="6.5 处理步骤"></a>6.5 处理步骤</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">拦截处理步骤：</span><br><span class="line"><span class="number">1</span>.新建maven web项目</span><br><span class="line"><span class="number">2</span>.加入依赖</span><br><span class="line"><span class="number">3</span>.创建Controller类</span><br><span class="line"><span class="number">4</span>.创建一个普通类，作为拦截器使用</span><br><span class="line">    <span class="number">1</span>)实现HandlerInterceptor接口</span><br><span class="line">    <span class="number">2</span>)实现接口中的三个方法</span><br><span class="line"><span class="number">5</span>.创建show.jsp</span><br><span class="line"><span class="number">6</span>.创建springmvc的配置文件</span><br><span class="line">    <span class="number">1</span>)组件扫描器，扫描<span class="variable">@Controller</span>注解</span><br><span class="line">    <span class="number">2</span>)声明拦截器，并指定拦截的请求uri地址</span><br></pre></td></tr></table></figure><h3 id="6-6-多拦截器"><a href="#6-6-多拦截器" class="headerlink" title="6.6 多拦截器"></a>6.6 多拦截器</h3><p>多拦截器的初始化和执行顺序按照声明顺序，声明在前的先初始化</p><p>拦截器的初始化是存放在一个ArrayList数组中，数组的顺序跟先后添加是一致的</p><p>先初始化的拦截器先拦截，后初始化的后拦截</p><p><strong>第一个拦截器preHandle：true ；第二个拦截器preHandle：false 执行结果：</strong></p><p>1拦截器的<code>MyInterceptor</code>的<code>preHandle()</code></p><p>2拦截器的<code>MyInterceptor</code>的<code>preHandle()</code></p><p>1拦截器的<code>MyInterceptor</code>的<code>afterCompletion()</code></p><p>原因：1.第二个拦截器没有放行，被拦截下来的处理器方法没有执行，<code>postHandle()</code>不会执行</p><p>​          2.第一个放行，故而会执行<code>afterCompletion()</code></p><p><strong>第一个拦截器preHandle：true ；第二个拦截器preHandle：true 执行结果：</strong></p><p>1拦截器的<code>MyInterceptor</code>的<code>preHandle()</code></p><p>2拦截器的<code>MyInterceptor</code>的<code>preHandle()</code></p><p>===执行<code>doSome</code>===</p><p>2拦截器的<code>MyInterceptor</code>的<code>postHandle()</code></p><p>1拦截器的<code>MyInterceptor</code>的<code>postHandle()</code></p><p>2拦截器的<code>MyInterceptor</code>的<code>afterCompletion()</code></p><p>1拦截器的<code>MyInterceptor</code>的<code>afterCompletion()</code></p><p><strong>第一个拦截器preHandle：false ；第二个拦截器preHandle：true | false 执行结果：</strong></p><p>1拦截器的<code>MyInterceptor</code>的<code>preHandle()</code></p><p>原因：第一个拦截器不放行，自然第二个拦截器也不会执行，处理器方法不会执行，后面的<code>postHandle</code>、<code>afterCompletion</code>都不会执行</p><h3 id="6-7-拦截器和过滤器的区别"><a href="#6-7-拦截器和过滤器的区别" class="headerlink" title="6.7 拦截器和过滤器的区别"></a>6.7 拦截器和过滤器的区别</h3><p>1.过滤器是servlet中的对象，拦截器是框架中的对象</p><p>2.过滤器实现Filter接口的对象，拦截器是实现HandleInterceptor接口</p><p>3.过滤器是用来设置request,response的参数，属性的，侧重对数据过滤的拦截器是用来验证请求的，能截断请求</p><p>4.过滤器是在拦截器之前先执行的</p><p>5.过滤器是tomcat服务器创建的对象，拦截器是springmvc容器中创建的对象</p><p>6.过滤器是一个执行时间点，拦截器有三个执行时间点</p><p>7.过滤器可以处理jsp,js,,html等等，拦截器是侧重拦截对Controller的对象，如果你的请求不能被DispatcherServlet接收，这个请求不会执行拦截器内容</p><p>8.拦截器拦截普通类方法执行，过滤器过滤servlet请求响应</p><h2 id="7-其他处理器"><a href="#7-其他处理器" class="headerlink" title="7. 其他处理器"></a>7. 其他处理器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplication</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line"><span class="type">StudentService</span> <span class="variable">service</span> <span class="operator">=</span> (StudentService) ctx.getBean(<span class="string">&quot;service&quot;</span>);</span><br></pre></td></tr></table></figure><p><code>springmvc</code>内部请求的处理流程：也就是<code>springmvc</code>接收请求，到处理完成的过程</p><p><strong>1.用户发起请求some.do</strong></p><p><strong>2.DispatcherSerrvlet接收请求some.do,把请求转发给处理器映射</strong></p><p>处理器映射器：springmvc框架中的一种对象，框架把实现了<code>HandlerMapping</code>接口的类都叫做映射器（多个）</p><p>处理器映射器作用：根据请求，从<code>springmvc</code>容器对象中获取处理器对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">MyController</span> <span class="variable">controller</span> <span class="operator">=</span> ctx.getBean(<span class="string">&quot;some.do&quot;</span>)</span><br></pre></td></tr></table></figure><p>框架把找到的处理器对象放到一个叫做处理器执行链（<code>HandleExecutionChain</code>）的类中保存</p><p><code>HandlerExecutionChain</code>：类中保存着：</p><p>(1) 处理器对象（<code>MyController</code>）;</p><p>(2) 项目中的所有的拦截器<code>List&lt;HandlerInterceptor&gt; interceptorList</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">HandlerExecutionChain</span> <span class="variable">mapperHandler</span> <span class="operator">=</span> getHandler(processedRequest)</span><br></pre></td></tr></table></figure><p><strong>3.DispatcherServlet把2中的HandlerExecutionChain中的处理器对象交给了处理器适配器对象（多个）</strong></p><p>处理器适配器：springmvc框架中的对象，需要实现HandlerAdapter接口</p><p>处理器适配器作用：执行处理器方法（调用<code>MyController.doSome()</code> 得到返回值<code>ModeAndView</code>）</p><p>中央调度器调用适配器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">HandlerAdapter</span> <span class="variable">ha</span> <span class="operator">=</span> getHandlerAdapter(mappedHandler.getHndler())</span><br></pre></td></tr></table></figure><p>执行处理器方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv = ha.handle(processedRequest, response, mapperHadler.getHandler())*</span><br></pre></td></tr></table></figure><p><strong>4.DispatherServlet把3中获取的ModeAndView交给了视图解析器对象</strong></p><p>​    视图解析器：springmvc中的对象，需要实现ViewResolver接口（可以有多个）</p><p>​    视图解析器作用：组成视图完整路径，在框架中<code>jsp</code>,    <code>html</code>不是<code>string</code>表示，而是使用<code>View</code>和他的实现类表示视图</p><p>​    <code>InternalResourceView</code>：视图类，    表示jsp文件，视图解析器会创建<code>InternalResourceView</code>类对象</p><p><strong>5.DispatcherServlet把4步骤中创建的View对象获取到，调用View类自己的方法，把Model数据放入到requesst作用域</strong></p><p>图解：</p><p><img src="file://C:\Users\fyp01\Documents\FocusNote\assets\515278c9-a47e-4c3c-8f10-a436207069e1.png?t=1658452664101" alt="img"></p><p>​    </p><h2 id="8-表单标签"><a href="#8-表单标签" class="headerlink" title="8. 表单标签"></a>8. 表单标签</h2><p>表单标签：</p><p>​    自定义标签：<code>el</code>、<code>jstl</code></p><p>​    <code>Spring EL</code>：</p><p><strong>1.支持各种类型的请求方式（查询doGet, 增加doPost, 删除doDelete，修改doPut）</strong></p><p>（1）编写<code>method=&quot;put|delete&quot;</code></p><p>  (2)    过滤器：为了让 浏览器能够支持<code>put</code>和<code>delete</code>请求</p><p><code>get post</code></p><p><code>put delete</code> -&gt;过滤器 <code>HiddenHttpMethodFilter</code></p><p><code>HiddenHttpMethodFilter</code>会将全部请求 名为 “<code>_method</code>“ 的隐藏域 进行 <code>put | delete</code> 处理</p><p>如果使用的是<code>SpringMVC</code>标签：</p><p><code>method=&quot;put | delete&quot;</code></p><p>如果不是<code>SpringMVC</code>标签：是传统的<code>html</code>标签：</p><p><code>method=&quot;post&quot;</code></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;hidden&quot;</span> name=<span class="string">&quot;_method&quot;</span> value=<span class="string">&quot;put | delete&quot;</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;form:form action=<span class="string">&quot;controller/testMethod&quot;</span> method=<span class="string">&quot;get&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;查看&quot;</span>&gt;</span><br><span class="line">&lt;/form:form&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;form:form action=<span class="string">&quot;controller/testMethod&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;增加&quot;</span>&gt;</span><br><span class="line">&lt;/form:form&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;form:form action=<span class="string">&quot;controller/testMethod&quot;</span> method=<span class="string">&quot;delete&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;删除&quot;</span>&gt;</span><br><span class="line">&lt;/form:form&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;form:form action=<span class="string">&quot;controller/testMethod&quot;</span> method=<span class="string">&quot;put&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;修改&quot;</span>&gt;</span><br><span class="line">&lt;/form:form&gt;</span><br></pre></td></tr></table></figure><p>优点：省略步骤：隐藏域</p><p><strong>可参考原生态的RESTful风格</strong>        </p><p>  <strong>2.可以将对象和 表单绑定起来</strong></p><p><code>SpringMVC</code>项目：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 环境搭建：</span><br><span class="line"><span class="number">2</span>. 引入标签库：&lt;%@ taglib prefix=<span class="string">&quot;form&quot;</span>  uri=<span class="string">&quot;http://www.springframework.org/tags/form&quot;</span>%&gt;</span><br><span class="line"><span class="number">3</span>. 使用</span><br></pre></td></tr></table></figure><p><strong>input：</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form:form&gt;</span><br><span class="line">    姓名：&lt;form:input path=<span class="string">&quot;stuName&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">    年龄：&lt;form:input path=<span class="string">&quot;stuAge&quot;</span>/&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">&lt;/form:form&gt;</span><br></pre></td></tr></table></figure><p>1.默认实例化<code>bean</code>标签的<code>id</code>值为<code>command</code>，<code>map.put</code>的k值必须为<code>command</code></p><p>2.自定义，<code>modelAttribute=&quot;person&quot;</code>，通过<code>form</code>中该属性可以指定<code>map.put</code>的<code>k</code>值</p><p>3.<code>path</code>：绑定中对象的属性值</p><p>控制器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/controller&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource(name = &quot;studentServiceImpl&quot;)</span></span><br><span class="line">    IStudentService studentService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> IStudentService <span class="title function_">getStudentService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> studentService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/testFormTag&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testFormTag</span><span class="params">(Map&lt;String, Object&gt; map)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> studentService.queryStudentByStuNo(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        map.put(<span class="string">&quot;command&quot;</span>,student);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>mapper</code>:</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=<span class="string">&quot;selectStudents&quot;</span> resultType=<span class="string">&quot;student&quot;</span>&gt;</span><br><span class="line">    select stuno,stuname,stuage from student</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p><code>entity</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer stuNo;</span><br><span class="line">    <span class="keyword">private</span> String stuName;</span><br><span class="line">    <span class="keyword">private</span> Integer stuAge;</span><br></pre></td></tr></table></figure><p><strong>checkbox和checkboxes：</strong></p><p><code>checkbox</code>：</p><p>​    自动绑定<code>request</code>域中的值</p><p>​    <strong>a.通过boolean值绑定</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form:form modelAttribute=<span class="string">&quot;stu&quot;</span>&gt;</span><br><span class="line">    &lt;form:checkbox path=<span class="string">&quot;stuSex&quot;</span>/&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">&lt;/form:form&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;testCheckBox&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testCheckBox</span><span class="params">(Map&lt;String,Object&gt; map)</span>&#123;</span><br><span class="line">    <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">    student.setStuSex(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    map.put(<span class="string">&quot;stu&quot;</span>,student);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>b.绑定 集合（List、Set）、数组的中枢</strong></p><p><code>checkboxes</code>：多个<code>checkbox</code>的组合</p><p><code>path</code>：选中的选项</p><p><code>items</code>：所有的选项</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;form:form modelAttribute=<span class="string">&quot;stu&quot;</span>&gt;</span><br><span class="line">    &lt;form:checkbox path=<span class="string">&quot;hobbies&quot;</span> value=<span class="string">&quot;basketball&quot;</span>/&gt;</span><br><span class="line">    &lt;form:checkbox path=<span class="string">&quot;hobbies&quot;</span> value=<span class="string">&quot;football&quot;</span>/&gt;</span><br><span class="line">    &lt;form:checkbox path=<span class="string">&quot;hobbies&quot;</span> value=<span class="string">&quot;pingpong&quot;</span>/&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">&lt;/form:form&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;testCheckBoxes&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testCheckBoxes</span><span class="params">(Map&lt;String, Object&gt; map)</span>&#123;</span><br><span class="line">    <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">    List&lt;String&gt; hobbies = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    hobbies.add(<span class="string">&quot;football&quot;</span>);</span><br><span class="line">    hobbies.add(<span class="string">&quot;basketball&quot;</span>);</span><br><span class="line"></span><br><span class="line">    student.setHobbies(hobbies);</span><br><span class="line"></span><br><span class="line">    map.put(<span class="string">&quot;stu&quot;</span>,student);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>等价于：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form:form modelAttribute=<span class="string">&quot;stu&quot;</span>&gt;</span><br><span class="line">    &lt;form:checkboxes path=<span class="string">&quot;hobbies&quot;</span> items=<span class="string">&quot;$&#123;allHobbies&#125;&quot;</span>/&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">&lt;/form:form&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;testCheckBoxes&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testCheckBoxes</span><span class="params">(Map&lt;String, Object&gt; map)</span>&#123;</span><br><span class="line">    <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">    <span class="comment">//选中选项</span></span><br><span class="line">    List&lt;String&gt; hobbies = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    hobbies.add(<span class="string">&quot;football&quot;</span>);</span><br><span class="line">    hobbies.add(<span class="string">&quot;basketball&quot;</span>);</span><br><span class="line">    hobbies.add(<span class="string">&quot;pingpong&quot;</span>);</span><br><span class="line">    <span class="comment">//全部选项</span></span><br><span class="line">    <span class="comment">/* List&lt;String&gt; allHobbies = new ArrayList&lt;&gt;();</span></span><br><span class="line"><span class="comment">    allHobbies.add(&quot;football&quot;);</span></span><br><span class="line"><span class="comment">    allHobbies.add(&quot;basketball&quot;);</span></span><br><span class="line"><span class="comment">    allHobbies.add(&quot;pingpong&quot;);</span></span><br><span class="line"><span class="comment">    allHobbies.add(&quot;d&quot;);*/</span></span><br><span class="line">    Map&lt;String, String&gt; allHobbies = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    allHobbies.put(<span class="string">&quot;football&quot;</span>,<span class="string">&quot;足球&quot;</span>);</span><br><span class="line">    allHobbies.put(<span class="string">&quot;basketball&quot;</span>,<span class="string">&quot;篮球&quot;</span>);</span><br><span class="line">    allHobbies.put(<span class="string">&quot;pingpong&quot;</span>,<span class="string">&quot;乒乓球&quot;</span>);</span><br><span class="line">    allHobbies.put(<span class="string">&quot;d&quot;</span>,<span class="string">&quot;其他&quot;</span>);</span><br><span class="line">    student.setHobbies(hobbies);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    map.put(<span class="string">&quot;stu&quot;</span>,student);</span><br><span class="line">    map.put(<span class="string">&quot;allHobbies&quot;</span>,allHobbies);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>radiobuttons：</strong></p><p>同理</p><p><strong>select:</strong></p><p>方式一：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form select path=<span class="string">&quot;默认的值&quot;</span> items=<span class="string">&quot;所有的可选项&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>方式二：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form:select path=<span class="string">&quot;默认的值&quot;</span>&gt;</span><br><span class="line">    &lt;form:option value=<span class="string">&quot;football&quot;</span> 足球&gt;&lt;/form:option&gt;</span><br><span class="line">    &lt;form:option value=<span class="string">&quot;basketball&quot;</span>&gt;&lt;/form:option&gt;</span><br><span class="line">    &lt;form:option value=<span class="string">&quot;pingpong&quot;</span>&gt;&lt;/form:option&gt;</span><br><span class="line">&lt;/form:select&gt;</span><br></pre></td></tr></table></figure><p>方式三：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;form:select path=<span class="string">&quot;默认的值&quot;</span>&gt;</span><br><span class="line">    &lt;form:options items=<span class="string">&quot;$&#123;allBallMap&#125;&quot;</span>&gt;&lt;/form:options&gt;</span><br><span class="line">&lt;/form:select&gt;</span><br></pre></td></tr></table></figure><p>总结：</p><p>如果方式二、方式三同时存在，则使用方式二</p><p>如果方式一、方式二同时存在，则使用方式一</p><p>原生态优先级高于框架，而且最原生态的<code>&lt;option&gt;</code>没有绑定的功能 </p><p><strong>c.（了解）嵌套对象的toString()的返回值</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer stuNo;</span><br><span class="line">    <span class="keyword">private</span> String stuName;</span><br><span class="line">    <span class="keyword">private</span> Integer stuAge;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> stuSex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Other other;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Other</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;pingpong&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;form:form modelAttribute=<span class="string">&quot;stu&quot;</span>&gt;</span><br><span class="line">    &lt;%--&lt;form:checkbox path=<span class="string">&quot;other&quot;</span> value=<span class="string">&quot;basketball&quot;</span>/&gt;</span><br><span class="line">    &lt;form:checkbox path=<span class="string">&quot;other&quot;</span> value=<span class="string">&quot;football&quot;</span>/&gt;</span><br><span class="line">        &lt;form:checkbox path=<span class="string">&quot;other&quot;</span> value=<span class="string">&quot;pingpong&quot;</span>/&gt;--%&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">&lt;/form:form&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;testCheckBoxes&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testCheckBoxes</span><span class="params">(Map&lt;String, Object&gt; map)</span>&#123;</span><br><span class="line">    <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">    <span class="type">Other</span> <span class="variable">other</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Other</span>();</span><br><span class="line">    student.setOther(other);</span><br><span class="line"></span><br><span class="line">    map.put(<span class="string">&quot;stu&quot;</span>,student);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-声明和配置&quot;&gt;&lt;a href=&quot;#1-声明和配置&quot; class=&quot;headerlink&quot; title=&quot;1. 声明和配置&quot;&gt;&lt;/a&gt;1. 声明和配置&lt;/h2&gt;&lt;h3 id=&quot;1-1-自定义容器配置文件&quot;&gt;&lt;a href=&quot;#1-1-自定义容器配置文件&quot; cla</summary>
      
    
    
    
    <category term="Java框架" scheme="http://fyupeng.github.io/categories/Java%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="Spring" scheme="http://fyupeng.github.io/tags/Spring/"/>
    
    <category term="MVC" scheme="http://fyupeng.github.io/tags/MVC/"/>
    
  </entry>
  
  <entry>
    <title>Spring</title>
    <link href="http://fyupeng.github.io/2022/07/01/Spring/"/>
    <id>http://fyupeng.github.io/2022/07/01/Spring/</id>
    <published>2022-07-01T12:13:06.000Z</published>
    <updated>2022-07-01T12:16:24.056Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-解耦合发展史、控制反转、依赖注入"><a href="#1-解耦合发展史、控制反转、依赖注入" class="headerlink" title="1. 解耦合发展史、控制反转、依赖注入"></a>1. 解耦合发展史、控制反转、依赖注入</h2><h3 id="1-1-开发Spring程序（IOC）"><a href="#1-1-开发Spring程序（IOC）" class="headerlink" title="1.1 开发Spring程序（IOC）"></a>1.1 开发Spring程序（IOC）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>)</span><br><span class="line">    <span class="comment">//执行从springIOC容器中获取一个 id 为student的对象</span></span><br><span class="line">    <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> （Student）context.getBean(<span class="string">&quot;student&quot;</span>);</span><br></pre></td></tr></table></figure><p>可以发现，springioc容器 帮我们 new 了对象，并且给对象赋了值</p><h3 id="1-2-SpringIOC发展史"><a href="#1-2-SpringIOC发展史" class="headerlink" title="1.2 SpringIOC发展史"></a>1.2 SpringIOC发展史</h3><h4 id="1-2-1-new对象"><a href="#1-2-1-new对象" class="headerlink" title="1.2.1 new对象"></a>1.2.1 new对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">student.setXxx();</span><br></pre></td></tr></table></figure><h4 id="1-2-2-简单工厂"><a href="#1-2-2-简单工厂" class="headerlink" title="1.2.2 简单工厂"></a>1.2.2 简单工厂</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">MyFactory</span> <span class="variable">myFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyFactory</span>();</span><br><span class="line">myFactory.learn(String name);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CourseFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ICourse <span class="title function_">getCourse</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="comment">//获取ioc容器</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(name.equals(<span class="string">&quot;java&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> (ICourse) context.getBean(<span class="string">&quot;javaCourse&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (ICourse) context.getBean(<span class="string">&quot;HtmlCourse&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-3-ioc（超级工厂）"><a href="#1-2-3-ioc（超级工厂）" class="headerlink" title="1.2.3 ioc（超级工厂）"></a>1.2.3 ioc（超级工厂）</h4><ul><li>先配置<code>applicationContext.xnl</code>文件中的<code>&lt;bean&gt;</code>标签中的<code>student</code>、<code>javaCourse</code>、`htmlCourse``</li><li>``student`类中添加方法：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">learn</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">    <span class="type">ICourse</span> <span class="variable">course</span> <span class="operator">=</span> (ICourse) context.getBean(name);</span><br><span class="line"></span><br><span class="line">    course.learn();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>test测试类中添加方法后调用：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">learnCourseWithIoc</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">    <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) context.getBean(<span class="string">&quot;student&quot;</span>);</span><br><span class="line">    student.learn(<span class="string">&quot;javaCourse&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    learnCourseWithIoc();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-IOC也可以称为DI-依赖注入"><a href="#1-3-IOC也可以称为DI-依赖注入" class="headerlink" title="1.3 IOC也可以称为DI(依赖注入)"></a>1.3 <code>IOC</code>也可以称为<code>DI</code>(依赖注入)</h3><p>控制反转：将 创建对象、属性值 的方式 进行了 翻转，从<code>new</code>、<code>setXxx()</code> 翻转为了 从springIOC容器 <code>getBean()</code><br>依赖注入：将属性值注入给了属性，将属性注入给了bean,将bean注入给了ioc容器;</p><p>总结：ioc/di, 无论要什么对象， 都可以去<code>springioc</code>容器中获取， 而不需要自己操作（<code>new/setXxx()</code>）</p><h2 id="2-三种方式的依赖注入"><a href="#2-三种方式的依赖注入" class="headerlink" title="2. 三种方式的依赖注入"></a>2. 三种方式的依赖注入</h2><p>IOC容器赋值：</p><ul><li><p>简单类型：8个基本+String</p></li><li><p>value：如果是对象类型</p></li><li><p>ref：“需要引用的id值”</p></li></ul><p>因此实现了 对象与对象之间的    依赖关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">context.getBean(需要获取的bean的id值)</span><br></pre></td></tr></table></figure><h3 id="2-1-1-set注入：通过setXxx-赋值"><a href="#2-1-1-set注入：通过setXxx-赋值" class="headerlink" title="2.1.1 .set注入：通过setXxx()赋值"></a>2.1.1 .set注入：通过setXxx()赋值</h3><p>赋值，默认使用的是<code>set()</code>方法；</p><p>依赖注入底层是通过反射实现对的。</p><h3 id="2-2-2-构造器注入：通过构造方法赋值"><a href="#2-2-2-构造器注入：通过构造方法赋值" class="headerlink" title="2.2.2 构造器注入：通过构造方法赋值"></a>2.2.2 构造器注入：通过构造方法赋值</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;ls&quot;</span> <span class="attr">type</span>=<span class="string">&quot;String&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要注意：如果<code>&lt;constructor-arg&gt;</code> 的顺序    与构造方法参数的顺序不一致，则需要通过<code>type</code>或者<code>index</code>或<code>name</code>指定</p><h3 id="2-2-3-p命名空间的注入"><a href="#2-2-3-p命名空间的注入" class="headerlink" title="2.2.3 p命名空间的注入"></a>2.2.3 p命名空间的注入</h3><p>引入命名空间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>简单类型：p:属性名=“属性值”</p></li><li><p>引用类型（除了String外)：p：属性名-ref=”引用的id”</p></li></ul><p><strong>注意</strong>多个 <code>p</code> 赋值的时候 要有空格。</p><p>注意：无论是<code>String</code>还是i<code>n/short/long</code>, 在赋值时都是    <code>value=&quot;值&quot;</code></p><p>因此建议此种情况 需要配合<code>name\type</code>进行区分</p><h2 id="3-集合和特殊类型注入"><a href="#3-集合和特殊类型注入" class="headerlink" title="3. 集合和特殊类型注入"></a>3. 集合和特殊类型注入</h2><h3 id="3-1-集合类型注入"><a href="#3-1-集合类型注入" class="headerlink" title="3.1 集合类型注入"></a>3.1 集合类型注入</h3><p>示例：</p><p>​        注入各种数据类型：<code>List</code>、<code>Set</code>、<code>map</code>、<code>properties</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;collectionDemo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.student.entity.AllCollectionType&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>足球<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>篮球<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>乒乓球<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;array&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">   &lt;array&gt;</span></span><br><span class="line"><span class="comment">    &lt;value&gt;足球1&lt;/value&gt;</span></span><br><span class="line"><span class="comment">    &lt;value&gt;篮球1&lt;/value&gt;</span></span><br><span class="line"><span class="comment">    &lt;value&gt;乒乓球1&lt;/value&gt;</span></span><br><span class="line"><span class="comment">   &lt;/array&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>足球1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>篮球1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>乒乓球1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;set&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  </span></span><br><span class="line"><span class="comment">   &lt;set&gt;</span></span><br><span class="line"><span class="comment">    &lt;value&gt;足球2&lt;/value&gt;</span></span><br><span class="line"><span class="comment">    &lt;value&gt;篮球2&lt;/value&gt;</span></span><br><span class="line"><span class="comment">    &lt;value&gt;乒乓球2&lt;/value&gt;</span></span><br><span class="line"><span class="comment">   &lt;/set&gt;</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>足球2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>篮球2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>乒乓球2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>foot3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>足球3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>basket3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>篮球3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>pp3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>乒乓球3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;props&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;foot4&quot;</span>&gt;</span>足球4<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;basket4&quot;</span>&gt;</span>篮球4<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;pp4&quot;</span>&gt;</span>乒乓球4<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>被注入的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.student.entity;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AllCollectionType</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list;</span><br><span class="line">    <span class="keyword">private</span> String[] array;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; set;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; map;</span><br><span class="line">    <span class="keyword">private</span> Properties props;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setList</span><span class="params">(List&lt;String&gt; list)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] getArray() &#123;</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setArray</span><span class="params">(String[] array)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.array = array;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Set&lt;String&gt; <span class="title function_">getSet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> set;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSet</span><span class="params">(Set&lt;String&gt; set)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.set = set;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, String&gt; <span class="title function_">getMap</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMap</span><span class="params">(Map&lt;String, String&gt; map)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.map = map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Properties <span class="title function_">getProps</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> props;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setProps</span><span class="params">(Properties props)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.props = props;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">strContent</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(String str : array) &#123;</span><br><span class="line">            strContent += str + <span class="string">&quot;,&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;list:&quot;</span> + <span class="built_in">this</span>.list + <span class="string">&quot;set:&quot;</span> + <span class="built_in">this</span>.set + <span class="string">&quot;map:&quot;</span> + <span class="built_in">this</span>.map + <span class="string">&quot;pros:&quot;</span> + <span class="built_in">this</span>.props + <span class="string">&quot;array:&quot;</span> + strContent;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-特殊值的注入"><a href="#3-2-特殊值的注入" class="headerlink" title="3.2 特殊值的注入"></a>3.2 特殊值的注入</h3><ul><li>给对象类型赋值 null</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">null</span>/&gt;</span>  <span class="comment">&lt;!--    注意没有&lt;value&gt;    --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>赋空值 “”</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 在ioc中定义bean的前提：该bean的    类    必须提供了    无参构造</p><h2 id="4-自动装配"><a href="#4-自动装配" class="headerlink" title="4. 自动装配"></a>4. 自动装配</h2><p>只适用于 ref类型，约定由于配置</p><p>自动配置：    </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;course&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.student.entity.Course&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;constructor&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;bean id=&quot;course&quot; class=&quot;org.student.entity.Course&quot; p:courseName=&quot;hadoop&quot; p:courseHour=&quot;300&quot; p:teacher-ref=&quot;teacher&quot;&gt; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 通过set方式赋值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;courseName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;java&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;courseHour&quot;</span> <span class="attr">value</span>=<span class="string">&quot;200&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  &lt;property name=&quot;teacher&quot; ref=&quot;teacher&quot;&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.student.entity.Teacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 通过set方式赋值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zs&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;21&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>byName</code>：自动寻找其他<code>bean</code>的<code>id</code>值 = 该<code>Course</code>类的属性名</li></ul><p><code>byName</code>本质是<code>byId</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.student.entity.Course&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br></pre></td></tr></table></figure><ul><li><p><code>byType</code>：其他<code>bean</code>的类型<code>class</code>是否与该<code>Course</code>类的<code>ref</code>属性类型一致</p><p><strong>注意：</strong>此种方法必须满足当前<code>IOC</code>容器中， 只能有一个<code>bean</code>满足条件</p></li><li><p><code>constructor</code>：其他bena的类型（class）是否与    该course类的构造方法参数的类型一致，此种方式的本质就是<code>byType</code></p></li></ul><p>可以在头文件中一次性将<code>ioc</code>容器中的所有<code>bean</code>统一设置成自动装配：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">default-autowire</span>=<span class="string">&quot;default&quot;</span></span></span><br><span class="line"><span class="tag">       &gt;</span><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>自动装配虽然可以减少代码量，但是会降低程序的可读性，使用时需要谨慎。</p><h2 id="5-使用注解声明式事务"><a href="#5-使用注解声明式事务" class="headerlink" title="5. 使用注解声明式事务"></a>5. 使用注解声明式事务</h2><p>使用注解定义<code>bean</code>：通过注解的形式将<code>bean</code>以及相应的属性值放入<code>ioc</code>容器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;org.student.dao&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>spring</code>在启动的时候，会根据<code>base-package</code>在 该包中扫描所有类，查找这些类是否有标明注解，有注解就将它注入<code>ioc</code>容器中</p><p>头文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> </span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>@Componment细化：</p><ul><li><p>dao层注解：<code>@Respository</code></p></li><li><p>service层注解：<code>@Service</code></p></li><li><p>控制器层注解：@Controller</p></li></ul><p>使用注解实现事务（声明是事务）</p><p>目标：通过事务使以下方法    要么全成功，要么全失败</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addStudent</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//增加班级</span></span><br><span class="line">    <span class="comment">//增加学</span></span><br><span class="line">    <span class="comment">//crud</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-1-jar包"><a href="#5-1-jar包" class="headerlink" title="5.1 jar包"></a>5.1 jar包</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spring-tx-<span class="number">4.3</span>.<span class="number">9</span>.<span class="variable constant_">RELEASE</span>.jar</span><br><span class="line">ojdbc.jar</span><br><span class="line">commons-dbcp.jar <span class="comment"># 连接池使用的数据源</span></span><br><span class="line">commons-pool.jar  <span class="comment"># 连接池</span></span><br><span class="line">spring-jdbc-<span class="number">4.3</span>.<span class="number">9</span>.<span class="variable constant_">RELEASE</span>.jar</span><br><span class="line">aopalliance.jar</span><br></pre></td></tr></table></figure><h3 id="5-2-配置"><a href="#5-2-配置" class="headerlink" title="5.2 配置"></a>5.2 配置</h3><p>jdbc\mybatis\spring</p><p>增加事务命名空间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> </span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>增加对事务的支持：依赖<code>&lt;bean id=&quot;txManager&quot;/&gt;</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 增加对事务的支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;txManager&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置事务管理器<code>txManager</code>依赖的<code>jar</code>包：<code>spring-jdbc-4.3.9.RELEASE.jar</code> 依赖<code>&lt;bean id=&quot;dataSource&quot;/&gt;</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置事务管理器txManager --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;txManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置数据库相关事务：依赖<code>jar</code>包（<code>commons-dbcp.jar</code> 连接池使用的数据源）</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置数据库相关事务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.commons.dbcp.BasicDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;oracle.jdbc.OracleDriver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:oracle:thin@127.0.0.1:1521:ORCL&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;scott&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tiger&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxActive&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxIdle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;6&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-3-使用"><a href="#5-3-使用" class="headerlink" title="5.3 使用"></a>5.3 使用</h3><p>将需要成为事务的方法前增加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(readOnly = false, propagation = Propagation.REQUIRED)</span></span><br></pre></td></tr></table></figure><h2 id="6-AOP-面向切面编程"><a href="#6-AOP-面向切面编程" class="headerlink" title="6. AOP 面向切面编程"></a>6. AOP 面向切面编程</h2><p>一个普通的类  -&gt; 有特定功能的类</p><ul><li>继承</li><li>实现</li><li>注解</li><li>配置</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFilter</span> extends/<span class="keyword">implements</span> <span class="title class_">Xx</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-1-前置通知"><a href="#6-1-前置通知" class="headerlink" title="6.1 前置通知"></a>6.1 前置通知</h3><p>需要头文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>jar</code> 包</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aopaliance.jar</span><br><span class="line">aspectjweaver.jar</span><br></pre></td></tr></table></figure><ul><li>配置</li></ul><ol><li>配置<code>addStudent()</code>方法和前置通知类的<code>bean</code></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- addStudent()所在方法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.student.service.impl.StudentServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;studentDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;studentDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- “前置通知”类 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ========连接线的一方======== --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;logBefore&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.student.aop.LogBefore&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>将<code>addStudent()</code>方法和前置通知类关联</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 将addStudent()和 通知进行关联 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置切入点（在哪里执行通知） --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ========连接线的另一方======== --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">&quot;execution(public void org.student.service.impl.StudentServiceImpl.deleteStudent(int)) or execution(public void org.student.service.impl.StudentServiceImpl.addStudent(org.student.entity.Student))&quot;</span> <span class="attr">id</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;logBefore&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>编写</li></ul><p><code>aop</code>：每当执行<code>add()</code>之前自动执行一个方法<code>log()</code></p><p><code>add()</code>：业务方法</p><p><code>log()</code>：自动执行的通知，即<code>aop</code>前置通知</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Xxx</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//@Test</span></span><br><span class="line">    <span class="comment">//a()&#123;&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果出现异常：类似<code>java.lang.NoClassDefFoundError：org/apach....</code>则说明缺少<code>jar</code>类</p><h3 id="6-2-后置通知"><a href="#6-2-后置通知" class="headerlink" title="6.2 后置通知"></a>6.2 后置通知</h3><ul><li><p>通知类：普通实现接口</p></li><li><p>业务类、业务方法：<code>StudentServiceImpl</code>中的<code>addStudent()</code></p></li><li><p>配置：</p></li></ul><ol><li><p>将业务类、通知    纳入<code>springIOC</code>容器</p></li><li><p>定义切入点（一端）、定义通知类（另一端），通过<code>pointcut-ref</code>将两端连接起来</p></li></ol><ul><li>配置<code>addStudent()</code>方法和    后置通知类的<code>bean</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- addStudent()所在方法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.student.service.impl.StudentServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;studentDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;studentDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;logAfter&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.student.aop.LogAfter&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>将addStudent（）方法和    前置通知类关联</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 将addStudent()和 通知进行关联 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 切入点（连接线的一端）：业务类的具体方法 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">&quot;execution(public * org.student.service.impl.StudentServiceImpl.addStudent(..))&quot;</span> <span class="attr">id</span>=<span class="string">&quot;pointcut2&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;logAfter&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut2&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-3-异常通知"><a href="#6-3-异常通知" class="headerlink" title="6.3 异常通知"></a>6.3 异常通知</h3><p>根据异常通知接口的定义可以发现，异常通知的实现类必须编写以下方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">(Mehthod,  args,  target,ThrowableSubclass)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">(ThrowableSubclass)</span></span><br></pre></td></tr></table></figure><ul><li>配置<code>addStudent()</code>方法和后置通知类的<code>bean</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- addStudent()所在方法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.student.service.impl.StudentServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;studentDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;studentDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;logException&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.student.aop.LogException&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>将<code>addStudent()</code>方法和后置通知类关联</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 将addStudent()和 通知进行关联 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 切入点（连接线的一端）：业务类的具体方法 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">&quot;execution(public * org.student.service.impl.StudentServiceImpl.addStudent(..))&quot;</span> <span class="attr">id</span>=<span class="string">&quot;pointcut3&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;logException&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut3&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-4-环绕通知"><a href="#6-4-环绕通知" class="headerlink" title="6.4 环绕通知"></a>6.4 环绕通知</h3><p>在目标方法的前后、异常发生时、最终等各个地方都可以进行的通知，最强大的一个通知；</p><p>可以获取目标方法的全部控制权（目标方法是否执行、执行之前、执行之后、参数、返回值等）</p><p>在使用环绕通知时，目标方法的一切信息都可以通过<code>invocation</code>参数获取的</p><ul><li>配置<code>addStudent()</code>方法和后置通知类的<code>bean</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- addStudent()所在方法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.student.service.impl.StudentServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;studentDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;studentDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;logAround&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.student.aop.LogAround&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>将2.将<code>addStudent()</code>方法和前置通知类关联</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 将addStudent()和 通知进行关联 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 切入点（连接线的一端）：业务类的具体方法 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">&quot;execution(public * org.student.service.impl.StudentServiceImpl.addStudent(..))&quot;</span> <span class="attr">id</span>=<span class="string">&quot;pointcut4&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;logAround&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut4&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="7-基于注解形式的AOP实现"><a href="#7-基于注解形式的AOP实现" class="headerlink" title="7. 基于注解形式的AOP实现"></a>7. 基于注解形式的AOP实现</h2><p>使用注解实现通知<code>aop</code></p><ul><li><p><code>jar</code>包</p><p>与实现接口    的方式相同</p></li><li><p>配置</p><p>将业务类、通知纳入<code>springIOC</code>容器</p><p>开启注解<code>AOP</code>的支持 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br></pre></td></tr></table></figure><p>业务类<code>addStudent</code> – 通知</p></li><li><p>编写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span> <span class="comment">//声明该类是一个通知</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogBeforeAnnotation</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>通过注解形式将对象增加到<code>ioc</code>容器时，需要设置扫描器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;org.student.aop&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><p>扫描器会将指定的包中的<code>@Componet</code>、<code>@Service</code>、<code>@Responsitory</code>、<code>@Controller</code>修饰的类产生的对象增加到 <code>ioc</code> 容器中</p><p><code>@Aspect</code> 不需要加入扫描器，只需要开启即可：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过注解形式    实现的<code>aop</code>，如果想获取目标对象的一些参数，则需要使用一个对象：<code>JoinPoint</code></p><ul><li><p>声明返回值的参数名：参数名变量不能随便写，要写成 <code>returningValue</code></p></li><li><p>注解形式实现<code>aop</code>时，通知的方法的参数不能多、少</p></li></ul></li></ul><h3 id="7-1-前置通知"><a href="#7-1-前置通知" class="headerlink" title="7.1 前置通知"></a>7.1 前置通知</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//前置通知</span></span><br><span class="line"><span class="meta">@Before(&quot;execution(public * addStudent(..))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myBefore</span><span class="params">(JoinPoint jp)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;《注解形式：前置通知》:目标对象：&quot;</span> + jp.getTarget() + <span class="string">&quot;,方法名：&quot;</span> + jp.getSignature() + <span class="string">&quot;,参数列表：&quot;</span> + Arrays.toString(jp.getArgs()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-2-后置通知"><a href="#7-2-后置通知" class="headerlink" title="7.2 后置通知"></a>7.2 后置通知</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//后置通知</span></span><br><span class="line"><span class="meta">@AfterReturning( pointcut = &quot;execution(public * addStudent(..))&quot;, returning = &quot;returningValue&quot; )</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myAfter</span><span class="params">(JoinPoint  jp, Object returningValue)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;《注解形式：后置通知》:目标对象：&quot;</span> + jp.getTarget() + <span class="string">&quot;,方法名：&quot;</span> + jp.getSignature() + <span class="string">&quot;,参数列表：&quot;</span> + Arrays.toString(jp.getArgs()) + <span class="string">&quot;,返回值:&quot;</span> + returningValue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-3-环绕通知"><a href="#7-3-环绕通知" class="headerlink" title="7.3 环绕通知"></a>7.3 环绕通知</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//环绕通知</span></span><br><span class="line"><span class="meta">@Around(&quot;execution(public * addStudent(..))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myAround</span><span class="params">(ProceedingJoinPoint jp)</span> &#123;</span><br><span class="line">    <span class="comment">//方法执行之前</span></span><br><span class="line">    System.out.println(<span class="string">&quot;《注解形式：环绕通知：方法执行之前》&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//方法执行时</span></span><br><span class="line">        System.out.println(<span class="string">&quot;《注解形式：环绕通知：方法执行时》&quot;</span>);</span><br><span class="line">        jp.proceed();</span><br><span class="line">        <span class="comment">//方法执行之后</span></span><br><span class="line">        System.out.println(<span class="string">&quot;《注解形式：环绕通知：方法执行之后》&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(Throwable e) &#123;</span><br><span class="line">        <span class="comment">//发生异常时</span></span><br><span class="line">        System.out.println(<span class="string">&quot;《注解形式：环绕通知：发生异常时》&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//最终通知</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-4-异常通知"><a href="#7-4-异常通知" class="headerlink" title="7.4 异常通知"></a>7.4 异常通知</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//异常通知:如果只捕获特定类型的异常</span></span><br><span class="line"><span class="meta">@AfterThrowing( pointcut = &quot;execution(public * addStudent(..))&quot;, throwing = &quot;e&quot; )</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myException</span><span class="params">(NullPointerException e)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;&amp;&amp;&amp;&amp;&amp;《注解形式：异常通知：》异常信息：&quot;</span> + e.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-5-最终通知"><a href="#7-5-最终通知" class="headerlink" title="7.5 最终通知"></a>7.5 最终通知</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//最终通知</span></span><br><span class="line"><span class="meta">@After(&quot;execution(public * addStudent(..))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myAfter</span><span class="params">(JoinPoint jp)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;《注解形式：最终通知：》&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-基于-Schema-形式的-AOP"><a href="#8-基于-Schema-形式的-AOP" class="headerlink" title="8. 基于 Schema 形式的 AOP"></a>8. 基于 Schema 形式的 AOP</h2><p>通过配置将 类 → 通知</p><p>基于Schema配置类似于实现接口的方式</p><ul><li><p>接口方式通知：<code>public class LogAfter implements AfterReturningAdvice</code></p></li><li><p><code>Schema</code>方式通知：</p><ul><li><p>编写一个普通类<code>public class LogAfter&#123;&#125;</code></p></li><li><p>将该类通过配置，转为一个”通知“</p></li></ul></li></ul><p>如果要获取目标对象信息：</p><p>注解、<code>schema</code>：<code>JoinPoint</code></p><p>接口：<code>Method method, Object[] args, Object target</code></p><h3 id="8-1-前置通知"><a href="#8-1-前置通知" class="headerlink" title="8.1 前置通知"></a>8.1 前置通知</h3><p><code>schema</code>形式和注解形式相似，不同之处：注解形式使用了注册<code>@After</code>， <code>schemal</code>形式进行了多余配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(JoinPoint jp)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;《Sechema形式：前置通知》:目标对象：&quot;</span> + jp.getTarget() + <span class="string">&quot;,方法名：&quot;</span> + jp.getSignature() + <span class="string">&quot;,参数个数：&quot;</span> + jp.getArgs().length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-2-后置通知"><a href="#8-2-后置通知" class="headerlink" title="8.2 后置通知"></a>8.2 后置通知</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">(JoinPoint jp, Object returnValue)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;《Sechema形式：后置通知》:目标对象：&quot;</span> + jp.getTarget() + <span class="string">&quot;,方法名：&quot;</span> + jp.getSignature() + <span class="string">&quot;,参数个数：&quot;</span> + jp.getArgs().length + <span class="string">&quot;,返回值：&quot;</span> + returnValue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-3-环绕通知"><a href="#8-3-环绕通知" class="headerlink" title="8.3 环绕通知"></a>8.3 环绕通知</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint jp)</span> &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;《Sechema形式：环绕通知》：前置通知&quot;</span>);</span><br><span class="line">        result = jp.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;《Sechema形式：环绕通知》：后置通知&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">catch</span>(Throwable e) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;《Sechema形式：环绕通知》：异常通知&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;《Sechema形式：环绕通知》：最终通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-4-异常通知"><a href="#8-4-异常通知" class="headerlink" title="8.4 异常通知"></a>8.4 异常通知</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">whenException</span><span class="params">(JoinPoint jp, NullPointerException e)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;《Sechema形式：异常通知》:目标对象：&quot;</span> + jp.getTarget() + <span class="string">&quot;,方法名：&quot;</span> + jp.getSignature() + <span class="string">&quot;,参数个数：&quot;</span> + jp.getArgs().length +<span class="string">&quot;,异常信息：&quot;</span> + e.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-5-最终通知"><a href="#8-5-最终通知" class="headerlink" title="8.5 最终通知"></a>8.5 最终通知</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">(JoinPoint jp)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;《Sechema形式：最终通知》:目标对象：&quot;</span> + jp.getTarget() + <span class="string">&quot;,方法名：&quot;</span> + jp.getSignature() + <span class="string">&quot;,参数个数：&quot;</span> + jp.getArgs().length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-6-配置"><a href="#8-6-配置" class="headerlink" title="8.6 配置"></a>8.6 配置</h3><p>对 5 种通知的统一配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;logSchema&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.student.aop.LogSchema&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">&quot;execution(public * org.student.service.impl.StudentServiceImpl.addStudent(..))&quot;</span> <span class="attr">id</span>=<span class="string">&quot;pcSchema&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;logSchema&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pcSchema&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">&quot;afterReturning&quot;</span> <span class="attr">returning</span>=<span class="string">&quot;returnValue&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pcSchema&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">&quot;whenException&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pcSchema&quot;</span> <span class="attr">throwing</span>=<span class="string">&quot;e&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">&quot;around&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pcSchema&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="9-Spring-开发-Web-项目"><a href="#9-Spring-开发-Web-项目" class="headerlink" title="9. Spring 开发 Web 项目"></a>9. Spring 开发 Web 项目</h2><p><code>Spring</code>开发<code>Web</code>项目及拆分<code>Spring</code>配置文件</p><p><code>Web</code>项目如何初始化<code>SpringIOC</code>容器：思路：当服务启动时（<code>tomcat</code>），通过监听器将<code>SpringIOC</code>容器初始化一次</p><p>因此用<code>spring</code>开发<code>web</code>项目    至少需要7个<code>jar</code>：<code>spring-java</code>的6个<code>jar</code> + <code>spring-web.jar</code>，</p><p><strong>注意：</strong>  web项目的jar包 是存在<code>WEB-INF/lib</code>中</p><p><img src="https://yupeng-tuchuang.oss-cn-shenzhen.aliyuncs.com/64583b25-d94b-4b3e-859d-34ad1b889a3b.png" alt="img"></p><p>配置 <code>web.xml</code> 文件</p><p>核心代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 容器默认约束时，不用配置位置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置spring-web.jar提供的监听器，此监听器 可以在服务器启动时 初始化IOC容器，</span></span><br><span class="line"><span class="comment">   初始化IOC容器（applicationContext.xml）,必须告诉监听器 此容器的位置。通过context-param  </span></span><br><span class="line"><span class="comment">          默认约束的位置：WEB-INF/applicationContext.xml </span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><p>完整 web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;</span> <span class="attr">id</span>=<span class="string">&quot;WebApp_ID&quot;</span> <span class="attr">version</span>=<span class="string">&quot;3.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>SpringWebProject<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置spring-web.jar提供的监听器，此监听器 可以在服务器启动时 初始化IOC容器，</span></span><br><span class="line"><span class="comment">初始化IOC容器（applicationContext.xml）,必须告诉监听器 此容器的位置。通过context-param</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="10-拆分Spring-配置文件"><a href="#10-拆分Spring-配置文件" class="headerlink" title="10. 拆分Spring 配置文件"></a>10. 拆分Spring 配置文件</h2><h3 id="10-1-java项目"><a href="#10-1-java项目" class="headerlink" title="10.1 java项目"></a>10.1 java项目</h3><ul><li><p>applicationContext1.xml</p></li><li><p>applicationContext2.xml</p></li><li><p>applicationContext3.xml</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="10-2-Web项目"><a href="#10-2-Web项目" class="headerlink" title="10.2 Web项目"></a>10.2 Web项目</h3><p><strong>根据什么拆分？</strong></p><ul><li><p>i.三层结构</p><ul><li><p>UI(<code>html/css/jsp</code>、<code>Servlet</code>) <code>applicationController.xml</code></p></li><li><p><code>Service</code>：<code>applicationService.xml</code></p></li><li><p><code>Dao</code>：<code>applicationDao.xml</code></p></li><li><p>公共    数据库：<code>applicationDB.xml</code></p></li></ul></li><li><p>ii.功能结构</p><ul><li><p>学生相关配置：<code>applicationContextStudent.xml</code> <code>&lt;bean id=&quot;&quot; class=&quot;&quot;&gt;&lt;/bean&gt;</code></p></li><li><p>班级相关配置：<code>applicationContextClass.xml</code></p></li></ul></li></ul><p><strong>合并</strong>：如何将多个配置文件加载</p><p><strong>在web中配置</strong></p><p>三种方法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--第一种：--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span></span><br><span class="line">        classpath:applicationContext.xml,</span><br><span class="line">        classpath:applicationContext-Dao.xml,</span><br><span class="line">        classpath:applicationContext-Service.xml,</span><br><span class="line">        classpath:applicationContext-Controller.xml</span><br><span class="line">    <span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--第二种：--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span></span><br><span class="line">        classpath:applicationContext.xml,</span><br><span class="line">        classpath:applicationContext-*.xml</span><br><span class="line">    <span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--第三种：--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span></span><br><span class="line">        classpath:applicationContext.xml</span><br><span class="line">    <span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--在第一个文件中配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;applicationContext-Dao.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;applicationContext-Service.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;applicationContext-Controller.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="10-3-结构"><a href="#10-3-结构" class="headerlink" title="10.3 结构"></a>10.3 结构</h3><p><img src="https://yupeng-tuchuang.oss-cn-shenzhen.aliyuncs.com/bc65cee1-b3f5-4504-830c-1a22d2b959f7.png" alt="img"></p><h2 id="11-Servlet-容器与-IOC-容器"><a href="#11-Servlet-容器与-IOC-容器" class="headerlink" title="11. Servlet 容器与 IOC 容器"></a>11. Servlet 容器与 IOC 容器</h2><p>核心代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*通过servlet获取ioc容器*/</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> WebApplicationContextUtils.getWebApplicationContext(<span class="built_in">this</span>.getServletContext());</span><br><span class="line"><span class="comment">/*获取studentService的bean*/</span></span><br><span class="line">studentService = (IStudentService) context.getBean(<span class="string">&quot;studentService&quot;</span>);</span><br></pre></td></tr></table></figure><p><code>servlet</code>的<code>init()</code>函数在触发链接或访问<code>servlet</code>时才执行，执行完才执行method函数（<code>doGet</code>或<code>doPost</code>）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.student.servlet;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.WebApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.support.WebApplicationContextUtils;</span><br><span class="line"><span class="keyword">import</span> org.student.service.IStudentService;</span><br><span class="line"><span class="keyword">import</span> org.student.service.impl.StudentServiceImpl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class queryStudentByIdServlet</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/queryStudentByIdServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">queryStudentByIdServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    IStudentService studentService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStudentService</span><span class="params">(IStudentService studentService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.studentService = studentService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        <span class="comment">//ApplicationContext context = new ClassPathXmlApplicationContext(&quot;applicationContext-Service.xml&quot;);</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> WebApplicationContextUtils.getWebApplicationContext(<span class="built_in">this</span>.getServletContext());</span><br><span class="line"></span><br><span class="line">        studentService = (IStudentService) context.getBean(<span class="string">&quot;studentService&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> studentService.queryStudentById();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</span></span><br><span class="line"></span><br><span class="line">        request.setAttribute(<span class="string">&quot;name&quot;</span>, name);</span><br><span class="line">        request.getRequestDispatcher(<span class="string">&quot;result.jsp&quot;</span>).forward(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="12-注解形式的依赖注入"><a href="#12-注解形式的依赖注入" class="headerlink" title="12. 注解形式的依赖注入"></a>12. 注解形式的依赖注入</h2><h3 id="12-1-service"><a href="#12-1-service" class="headerlink" title="12.1 service"></a>12.1 service</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//&lt;bean id=&quot;studentService&quot; class=&quot;org.student.service.impl.StudentServiceImpl&quot;&gt;</span></span><br><span class="line"><span class="meta">@Service(&quot;studentService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IStudentService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span> <span class="comment">//自动装配，byType</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;stuDao&quot;)</span> <span class="comment">//byName(根据名字，两个都加)</span></span><br><span class="line">    <span class="keyword">private</span> IStudentDao studentDao;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;studentService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IStudentService</span> &#123;</span><br><span class="line">    &lt;!--使用resource能对名字和类型进行匹配</span><br><span class="line">        要求：</span><br><span class="line">        <span class="number">1.</span>必须有tomcat的支持（一般web才使用）,</span><br><span class="line">        或者使用pom导入依赖javax.annotation</span><br><span class="line">        <span class="number">2.</span>不需要写set方法来反射（xml配置的需要）</span><br><span class="line">    --&gt;</span><br><span class="line">    <span class="meta">@Resource(name = &quot;stuDao&quot;)</span></span><br><span class="line"><span class="keyword">private</span> IStudentDao studentDao;</span><br></pre></td></tr></table></figure><h3 id="12-2-dao"><a href="#12-2-dao" class="headerlink" title="12.2 dao"></a>12.2 dao</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//&lt;bean id=&quot;studentDao&quot; class=&quot;org.student.dao.impl.StudentDaoImpl&quot;/&gt;</span></span><br><span class="line"><span class="meta">@Repository(&quot;studentDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">IStudentDao</span>&#123;</span><br></pre></td></tr></table></figure><h3 id="12-3-servlet"><a href="#12-3-servlet" class="headerlink" title="12.3 servlet"></a>12.3 servlet</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//&lt;bean id=&quot;studentServlet&quot; class=&quot;org.student.servlet.queryStudentByIdServlet&quot;/&gt;</span></span><br><span class="line"><span class="meta">@Controller(&quot;studentServlet&quot;)</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/queryStudentByIdServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">queryStudentByIdServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br></pre></td></tr></table></figure><h2 id="13-Spring-整合-MyBatis-以及-SqlSessionDaoSupport-整合方式"><a href="#13-Spring-整合-MyBatis-以及-SqlSessionDaoSupport-整合方式" class="headerlink" title="13. Spring 整合 MyBatis 以及 SqlSessionDaoSupport 整合方式"></a>13. Spring 整合 MyBatis 以及 SqlSessionDaoSupport 整合方式</h2><p>Spring - MyBatis</p><h3 id="13-1-思路"><a href="#13-1-思路" class="headerlink" title="13.1 思路"></a>13.1 思路</h3><p><code>SqlSessionFactory</code> →  <code>SqlSession</code>  → <code>StudentMapper</code> → <code>CRUD</code></p><p>可以发现， <code>MyBatis</code> 最终是通过<code>SqlSessionFactory</code>来操作数据库，</p><p><code>Spring</code>整合<code>MyBatis</code>其实就是 将 <code>MyBatis</code>的<code>SqlSessionFactory</code>交给<code>Spring</code></p><p>SM整合步骤：</p><ul><li>jar包</li></ul><table><thead><tr><th>mybatis-spring.jar</th><th>spring-tx.jar</th><th>spring-jdbc.jar</th><th>spring-expression.jar</th></tr></thead><tbody><tr><td>spring-context-support.jar</td><td>spring-core.jar</td><td>spring-context.jar</td><td>spring-beanss.jar</td></tr><tr><td>spring-aop.jar</td><td>spring-web.jar</td><td>commons-logging.jar</td><td>commons.dbcp.jar</td></tr><tr><td>ojdbc.jar mybatis.jar</td><td>log4.jar</td><td>commons-pool.jar</td><td></td></tr></tbody></table><ul><li><p>类-表</p></li><li><p><code>MyBatis</code>配置文件<code>conf.xml</code></p></li><li><p>通过<code>mapper.xml</code>将 类、表建立映射关系</p></li><li><p>之前使用<code>MyBatis.xml</code> → <code>SqlSessionFactory</code></p></li></ul><p>现在整合的时候，需要通过<code>Spring</code>管理<code>SqlSessionFactory</code>，因此 产生<code>SqlSessionFactory</code>所需要的的数据库</p><p>信息不再放入<code>conf.xml</code>，而需要放入<code>spring</code>配置文件中</p><p>配置<code>spring</code>配置文件（<code>applicationContext.xml</code>）</p><ul><li>使用<code>Spring-MyBatis</code>整合产物开发程序</li></ul><h3 id="13-2-目标"><a href="#13-2-目标" class="headerlink" title="13.2 目标"></a>13.2 目标</h3><p>通过<code>spring</code>产生<code>mybatis</code>最终操作需要的 动态<code>mapper</code>对象（<code>Student</code>）</p><p>需要先配置<code>applicationContext</code>依赖注入<code>bean</code></p><h4 id="dao"><a href="#dao" class="headerlink" title="dao"></a>dao</h4><p>不需要<code>session</code>的<code>commit</code>和<code>close</code>操作，自动提交</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addStudent</span><span class="params">(Student student)</span> &#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> <span class="built_in">super</span>.getSqlSession();</span><br><span class="line">    <span class="type">StudentMapper</span> <span class="variable">studentMapper</span> <span class="operator">=</span> session.getMapper(StudentMapper.class);</span><br><span class="line">    studentMapper.addStudent(student);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="service"><a href="#service" class="headerlink" title="service"></a>service</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addStudent</span><span class="params">(Student student)</span> &#123;</span><br><span class="line">    studentMapper.addStudent(student);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="test"><a href="#test" class="headerlink" title="test"></a>test</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">    <span class="type">IStudentService</span> <span class="variable">studentService</span> <span class="operator">=</span> (IStudentService) context.getBean(<span class="string">&quot;studentService&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">    student.setStuNo(<span class="number">3</span>);</span><br><span class="line">    student.setStuName(<span class="string">&quot;zds&quot;</span>);</span><br><span class="line">    student.setStuAge(<span class="number">33</span>);</span><br><span class="line"></span><br><span class="line">    studentService.addStudent(student);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13-3-图解"><a href="#13-3-图解" class="headerlink" title="13.3 图解"></a>13.3 图解</h3><p><img src="https://yupeng-tuchuang.oss-cn-shenzhen.aliyuncs.com/e69d390b-fe3f-49b9-8062-6d8f7909f5aa.png" alt="img"></p><h3 id="13-4-spring-配置文件"><a href="#13-4-spring-配置文件" class="headerlink" title="13.4 spring 配置文件"></a>13.4 spring 配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;config&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;locations&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:db.properties<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  上述方法现在提倡使用下面的写法</span></span><br><span class="line"><span class="comment">          1.要求：mapper文件名和 dao接口名必须完全一样，包括大小写</span></span><br><span class="line"><span class="comment">          2.mapper和接口必须在同一目录</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.student.service.impl.StudentServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;studentMapper&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;studentMapper&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentMapper&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.student.dao.impl.StudentDaoImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.commons.dbcp.BasicDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxActive&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;maxActive&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxIdle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;maxIdle&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 加载mybatis配置文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:conf.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 加载mapper.xml路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org/student/mapper/*.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="13-5-Spring产生-动态mapper对象-有3种方法"><a href="#13-5-Spring产生-动态mapper对象-有3种方法" class="headerlink" title="13.5 Spring产生 动态mapper对象 有3种方法"></a>13.5 Spring产生 动态<code>mapper</code>对象 有3种方法</h3><h4 id="第一种方法-SqlSessionDaoSupport"><a href="#第一种方法-SqlSessionDaoSupport" class="headerlink" title="第一种方法 - SqlSessionDaoSupport"></a>第一种方法 - SqlSessionDaoSupport</h4><p><code>Dao</code>层实现类 继承 <code>SqlSessionDaoSupport</code>类</p><p><code>sqlSessionDaoSupport</code>类提供了一个属性 <code>SqlSession</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 第一种方式生成mapper对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentMapper&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.student.dao.impl.StudentDaoImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>sqlSession</code>工厂<code>bean</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 加载mybatis配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:conf.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>数据源<code>bean</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.commons.dbcp.BasicDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxActive&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;maxActive&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxIdle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;maxIdle&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="第二种方式-MapperFactoryBean"><a href="#第二种方式-MapperFactoryBean" class="headerlink" title="第二种方式 - MapperFactoryBean"></a>第二种方式 - MapperFactoryBean</h4><p>省略掉 第一种方式的 实现类</p><p>直接使用MyBatis提供的 <code>Mapper</code>实现类：<code>org.mybatis.spring.mapper.MapperFactoryBean</code></p><p><strong>缺点：</strong>每一个<code>mapper</code>都需要一个</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 第二种方式生成mapper对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentMapper&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperInterface&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.student.mapper.StudentMapper&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>sqlSession</code>工厂<code>bean</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 加载mybatis配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:conf.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>数据源<code>bean</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.commons.dbcp.BasicDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxActive&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;maxActive&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxIdle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;maxIdle&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="第三种方式-MapperScannerConfigured"><a href="#第三种方式-MapperScannerConfigured" class="headerlink" title="第三种方式 - MapperScannerConfigured"></a>第三种方式 - MapperScannerConfigured</h4><p>批量配置<code>实现类</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 第三种方式生成mapper对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.student.mapper&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>sqlSession</code>工厂<code>bean</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 加载mybatis配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:conf.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>数据源<code>bean</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.commons.dbcp.BasicDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxActive&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;maxActive&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxIdle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;maxIdle&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：</p><p>第二种和第三种方式中：</p><p>第二种的<code>sqlSession</code>工厂<code>sqlSessionFactory</code>为对象类型，属性值用引用<code>ref</code></p><p>第三种的<code>sqlSession</code>工厂<code>sqlSessionFactoryBeanName</code>是<code>String</code>类型，属性值用<code>value</code></p><h4 id="web-配置文件"><a href="#web-配置文件" class="headerlink" title="web 配置文件"></a>web 配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;</span> <span class="attr">id</span>=<span class="string">&quot;WebApp_ID&quot;</span> <span class="attr">version</span>=<span class="string">&quot;3.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>SpringWebProject<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--  classpath:applicationContext.xml,--&gt;</span></span><br><span class="line">            classpath:applicationContext-*.xml </span><br><span class="line">            <span class="comment">&lt;!-- classpath:applicationContext-Dao.xml,</span></span><br><span class="line"><span class="comment">    classpath:applicationContext-Service.xml,</span></span><br><span class="line"><span class="comment">    classpath:applicationContext-Controller.xml--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置spring-web.jar提供的监听器，此监听器 可以在服务器启动时 初始化IOC容器，</span></span><br><span class="line"><span class="comment">   初始化IOC容器（applicationContext.xml）,必须告诉监听器 此容器的位置。通过context-param  </span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​                          </p><p>​          </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-解耦合发展史、控制反转、依赖注入&quot;&gt;&lt;a href=&quot;#1-解耦合发展史、控制反转、依赖注入&quot; class=&quot;headerlink&quot; title=&quot;1. 解耦合发展史、控制反转、依赖注入&quot;&gt;&lt;/a&gt;1. 解耦合发展史、控制反转、依赖注入&lt;/h2&gt;&lt;h3 id=</summary>
      
    
    
    
    <category term="Java框架" scheme="http://fyupeng.github.io/categories/Java%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="Spring" scheme="http://fyupeng.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB</title>
    <link href="http://fyupeng.github.io/2022/06/25/MongoDB/"/>
    <id>http://fyupeng.github.io/2022/06/25/MongoDB/</id>
    <published>2022-06-25T07:50:51.000Z</published>
    <updated>2022-06-25T07:54:19.810Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><h2 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h2><p>MongoDB是一种NOSQL（Not Only Sql）数据库</p><p>数据表 -&gt;JDBC读取-&gt;POJO（VO、PO）-&gt;控制层转化为JSON数据-&gt;客户端</p><table><thead><tr><th>No</th><th>关系型数据库</th><th>非关系型数据库</th></tr></thead><tbody><tr><td>1</td><td>数据库</td><td>数据库（类似于MySQL）</td></tr><tr><td>2</td><td>表</td><td>集合</td></tr><tr><td>3</td><td>行</td><td>文档</td></tr><tr><td>4</td><td>列</td><td>成员</td></tr><tr><td>5</td><td>主键</td><td>Object ID（自动维护）</td></tr></tbody></table><p>在整个行业之中，MongoDB数据库是发展最好的一个NoSQL数据库，因为它与Node.JS捆绑在一起了，也就是如果你要从事Node.JS开发，那么一定要使用MongDB，而Node.JS（基于javaScript）在国内最成功的应用 –taobao</p><p>MongoDB之所以能够更好的发展也取决于：面向集合的存储过程、模式自由（无模式）、方便的进行数据的存储扩充、</p><p>支持索引、支持短暂数据保留、具有完整的数据状态监控、基于BSON应用</p><h2 id="业务应用场景："><a href="#业务应用场景：" class="headerlink" title="业务应用场景："></a>业务应用场景：</h2><p>High performace - 对数据库并发读写的需求</p><p>Huge Storage - 对海量数据的高效率存储和访问的需求</p><p>High Scalablity &amp;&amp; High Avaliablity - 对数据库的高扩展性和高可用性的需求</p><h1 id="二、安装与配置"><a href="#二、安装与配置" class="headerlink" title="二、安装与配置"></a>二、安装与配置</h1><p><a href="www.mongodb.com">下载</a></p><h2 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h2><p>进入bin目录打开cmd配置db：</p><p>先创建data/db目录存放数据，再手动命令行配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">monogd --dbpath ..\data\db</span><br></pre></td></tr></table></figure><p>或</p><p>b编写/config/mongod.conf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#The directoy where the mongod instance stores its data.Default Value is &quot;\data\db&quot; on windows.</span><br><span class="line">dbpath=D:\study\software\MongoDB\MongoDB-4.2.15\data\db</span><br></pre></td></tr></table></figure><p>第一种：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod -f ../config/mongd.conf</span><br></pre></td></tr></table></figure><p>第二种：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --config ../config/mongod.conf</span><br></pre></td></tr></table></figure><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p>创建data和log目录，配置指定该db目录和log日志文件路径</p><p>配置/usr/local/mongodb/single/mongod.conf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">systemLog:</span><br><span class="line">  destination: file</span><br><span class="line">  path: &quot;/usr/local/mongodb-4.2.15/single/log/mongod.log&quot;</span><br><span class="line">  logAppend: true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">storage:</span><br><span class="line">  dbPath: &quot;/usr/local/mongodb-4.2.15/single/data/db&quot;</span><br><span class="line">  journal:</span><br><span class="line">    enabled: true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">processManagement:</span><br><span class="line">  fork: true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">net:</span><br><span class="line">  bindIp: localhost,172.30.77.41</span><br><span class="line">  port: 27017</span><br></pre></td></tr></table></figure><p>配置完成后启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongodb-4.2.15]<span class="comment"># bin/mongod -f ./single/mongod.conf</span></span><br></pre></td></tr></table></figure><p>提示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">forked process: 208809</span><br><span class="line">child process started successfully, parent exiting</span><br></pre></td></tr></table></figure><p>登录数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/mongo</span><br></pre></td></tr></table></figure><h1 id="三、数据库的创建与删除"><a href="#三、数据库的创建与删除" class="headerlink" title="三、数据库的创建与删除"></a>三、数据库的创建与删除</h1><p>创建：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use articledb</span><br></pre></td></tr></table></figure><p>删除：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.dropDatabase()</span><br></pre></td></tr></table></figure><p>查看当前数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db</span><br></pre></td></tr></table></figure><h1 id="四、集合操作"><a href="#四、集合操作" class="headerlink" title="四、集合操作"></a>四、集合操作</h1><p>查看集合</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> collections</span><br></pre></td></tr></table></figure><h1 id="五、文档操作"><a href="#五、文档操作" class="headerlink" title="五、文档操作"></a>五、文档操作</h1><h2 id="插入："><a href="#插入：" class="headerlink" title="插入："></a>插入：</h2><p>插入单个文档</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.comment.insert(&#123;&quot;article&quot;:&quot;10000&quot;,&quot;content&quot;:&quot;今天天气真好&quot;,&quot;userid&quot;:&quot;1001&quot;,&quot;status&quot;:<span class="keyword">null</span>&#125;)</span><br></pre></td></tr></table></figure><p>插入多条文档</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">db.comment.insertMany(</span><br><span class="line">[&#123;&quot;article&quot;:&quot;10000&quot;,&quot;content&quot;:&quot;今天天气真好&quot;,&quot;userid&quot;:&quot;1001&quot;,&quot;status&quot;:<span class="keyword">null</span>&#125;,</span><br><span class="line">&#123;&quot;article&quot;:&quot;10000&quot;,&quot;content&quot;:&quot;今天天气真好&quot;,&quot;userid&quot;:&quot;1002&quot;,&quot;status&quot;:<span class="keyword">null</span>&#125;,</span><br><span class="line">&#123;&quot;article&quot;:&quot;10000&quot;,&quot;content&quot;:&quot;今天天气真好&quot;,&quot;userid&quot;:&quot;1003&quot;,&quot;status&quot;:<span class="keyword">null</span>&#125;,</span><br><span class="line">&#123;&quot;article&quot;:&quot;10000&quot;,&quot;content&quot;:&quot;今天天气真好&quot;,&quot;userid&quot;:&quot;1005&quot;,&quot;status&quot;:<span class="keyword">null</span>&#125;,</span><br><span class="line">&#123;&quot;article&quot;:&quot;10000&quot;,&quot;content&quot;:&quot;今天天气真好&quot;,&quot;userid&quot;:&quot;1005&quot;,&quot;status&quot;:<span class="keyword">null</span>&#125;,</span><br><span class="line">])</span><br></pre></td></tr></table></figure><p>还可以使用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">try&#123;</span><br><span class="line">db.comment.insertMany(</span><br><span class="line">[&#123;&quot;article&quot;:&quot;10000&quot;,&quot;content&quot;:&quot;今天天气真好&quot;,&quot;userid&quot;:&quot;1001&quot;,&quot;status&quot;:<span class="keyword">null</span>&#125;,</span><br><span class="line">&#123;&quot;article&quot;:&quot;10000&quot;,&quot;content&quot;:&quot;今天天气真好&quot;,&quot;userid&quot;:&quot;1002&quot;,&quot;status&quot;:<span class="keyword">null</span>&#125;,</span><br><span class="line">&#123;&quot;article&quot;:&quot;10000&quot;,&quot;content&quot;:&quot;今天天气真好&quot;,&quot;userid&quot;:&quot;1003&quot;,&quot;status&quot;:<span class="keyword">null</span>&#125;,</span><br><span class="line">&#123;&quot;article&quot;:&quot;10000&quot;,&quot;content&quot;:&quot;今天天气真好&quot;,&quot;userid&quot;:&quot;1005&quot;,&quot;status&quot;:<span class="keyword">null</span>&#125;,</span><br><span class="line">&#123;&quot;article&quot;:&quot;10000&quot;,&quot;content&quot;:&quot;今天天气真好&quot;,&quot;userid&quot;:&quot;1005&quot;,&quot;status&quot;:<span class="keyword">null</span>&#125;,</span><br><span class="line">]);</span><br><span class="line">&#125;catch(e)&#123;</span><br><span class="line">  print(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查询："><a href="#查询：" class="headerlink" title="查询："></a>查询：</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.comment.find()</span><br></pre></td></tr></table></figure><p>代参查询满足条件，可能不止一条</p><p>带一个参数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.comment.find(&#123;userid:&quot;1003&quot;&#125;)</span><br></pre></td></tr></table></figure><p>带多个参数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.comment.find(&#123;article:&quot;10000&quot;&#125;,&#123;userid:&quot;1003&quot;&#125;)</span><br></pre></td></tr></table></figure><p>查询一条</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.comment.findOne(&#123;userid:&quot;1002&quot;&#125;)</span><br></pre></td></tr></table></figure><h2 id="更新："><a href="#更新：" class="headerlink" title="更新："></a>更新：</h2><p>覆盖更新，json对象会更新覆盖（会失去没有修改过的json对象）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.comment.update(&#123;_id:ObjectId(&quot;61221f645f7003e989379e40&quot;)&#125;, &#123;status:&quot;1&quot;&#125;)</span><br></pre></td></tr></table></figure><p>比如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;61221f645f7003e989379e40&quot;), &quot;article&quot; : &quot;10000&quot;, &quot;content&quot; : &quot;今天天气真好&quot;, &quot;userid&quot; : &quot;1001&quot;, &quot;status&quot; : <span class="keyword">null</span> &#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;61221f645f7003e989379e40&quot;), &quot;status&quot; : &quot;1&quot; &#125;</span><br></pre></td></tr></table></figure><p>非覆盖更新（原json对象保持不变）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.comment.update(&#123;_id:ObjectId(&quot;61221f645f7003e989379e41&quot;)&#125;, &#123;$<span class="keyword">set</span>:&#123;status:&quot;1&quot;&#125;&#125;)</span><br></pre></td></tr></table></figure><p>比如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;61221f645f7003e989379e41&quot;), &quot;article&quot; : &quot;10000&quot;, &quot;content&quot; : &quot;今天天气真好&quot;, &quot;userid&quot; : &quot;1002&quot;, &quot;status&quot; : <span class="keyword">null</span> &#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;61221f645f7003e989379e41&quot;), &quot;article&quot; : &quot;10000&quot;, &quot;content&quot; : &quot;今天天气真好&quot;, &quot;userid&quot; : &quot;1002&quot;, &quot;status&quot; : &quot;1&quot; &#125;</span><br></pre></td></tr></table></figure><p>如果查询结果有多个，想把它们都修改了，参数后面跟上一个json对象 {multi: true}  ，表明全部修改，默认只修改第一条</p><p>根据id自增字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.comment.update(&#123;_id:&quot;612376cde9acd86e0584f8cd&quot;&#125;,&#123;$inc:&#123;likenum:NumberInt(<span class="number">1</span>)&#125;&#125;)</span><br></pre></td></tr></table></figure><h2 id="删除："><a href="#删除：" class="headerlink" title="删除："></a>删除：</h2><p>查询到满足条件的都删除</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.comment.remove(&#123;userid:&quot;1002&quot;&#125;)</span><br></pre></td></tr></table></figure><h1 id="六、文档分页查询"><a href="#六、文档分页查询" class="headerlink" title="六、文档分页查询"></a>六、文档分页查询</h1><h2 id="统计查询："><a href="#统计查询：" class="headerlink" title="统计查询："></a>统计查询：</h2><p>返回查询的条数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.comment.<span class="built_in">count</span>()</span><br></pre></td></tr></table></figure><h2 id="分页列表查询："><a href="#分页列表查询：" class="headerlink" title="分页列表查询："></a>分页列表查询：</h2><p>返回查询的前三条数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.comment.find().limit(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>跳过前两条数据，返回查询的三条数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.comment.find().limit(<span class="number">3</span>).<span class="keyword">skip</span>(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h2 id="排序查询："><a href="#排序查询：" class="headerlink" title="排序查询："></a>排序查询：</h2><p>对某一成员进行排序</p><p>1.升序：{userid:1}</p><p>2.降序：{userid:-1}</p><p>单个排序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.comment.find().sort(&#123;userid:<span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure><p>多个排序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.comment.find().sort(&#123;userid:<span class="number">1</span>&#125;,status:&quot;-1&quot;)</span><br></pre></td></tr></table></figure><h1 id="七、文档的更多查询"><a href="#七、文档的更多查询" class="headerlink" title="七、文档的更多查询"></a>七、文档的更多查询</h1><h2 id="模糊查询-正则表达式复杂查询："><a href="#模糊查询-正则表达式复杂查询：" class="headerlink" title="模糊查询/正则表达式复杂查询："></a>模糊查询/正则表达式复杂查询：</h2><p>db,collection.find(field:/正则表达式/) </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.comment.find(&#123;content:<span class="operator">/</span>天气<span class="operator">/</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="比较查询："><a href="#比较查询：" class="headerlink" title="比较查询："></a>比较查询：</h2><p>db.集合名称.find({“field”:{$gt: value }})  //大于</p><p>db.集合名称.find({“field”:{$lt: value }})  //大于</p><p>db.集合名称.find({“field”:{$gte: value }}) //大于等于</p><p>db.集合名称.find({“field”:{$lte: value }})  //小于等于</p><p>db.集合名称.find({“field”:{$ne: value }})  //不等于</p><p>包含：</p><p>db.集合名称.find({userid:{$in:[“1003”,”1004”]}})</p><p>不包含</p><p>db.集合名称.find({userid:{$nin:[“1003”,”1004”]}})</p><h2 id="条件查询："><a href="#条件查询：" class="headerlink" title="条件查询："></a>条件查询：</h2><p>and：和</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">db.集合名称.find(&#123;$<span class="keyword">and</span>:  [  </span><br><span class="line">&#123;likenum:&#123;$lt:NumberInt(<span class="number">700</span>)&#125;&#125;,</span><br><span class="line">&#123;likenum:&#123;$lt:NumberInt(<span class="number">2000</span>)&#125;&#125;  </span><br><span class="line">]     </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>or：或</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">db.集合名称.find(&#123;$<span class="keyword">or</span>:  [  </span><br><span class="line">&#123;likenum:&#123;$lt:NumberInt(<span class="number">700</span>)&#125;&#125;,</span><br><span class="line">&#123;likenum:&#123;$gt:NumberInt(<span class="number">2000</span>)&#125;&#125;  </span><br><span class="line">]     </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="八、索引管理操作"><a href="#八、索引管理操作" class="headerlink" title="八、索引管理操作"></a>八、索引管理操作</h1><h2 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引:"></a>创建索引:</h2><p>单字段：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.comment.createIndex(&#123;userid:<span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure><p>多字段索引：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.comment.createIndex(&#123;userid:<span class="number">1</span>,content:<span class="number">-1</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="获取索引："><a href="#获取索引：" class="headerlink" title="获取索引："></a>获取索引：</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.comment.getIndexes()</span><br></pre></td></tr></table></figure><h2 id="移除索引："><a href="#移除索引：" class="headerlink" title="移除索引："></a>移除索引：</h2><p>按照规则：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.comment.dropIndex(&#123;userid:<span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure><p>按照name:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.comment.dropIndex(&quot;userid_1_content_-1&quot;)</span><br></pre></td></tr></table></figure><p>移除所有索引，除了默认索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.comment.dropIndexes()</span><br></pre></td></tr></table></figure><h1 id="九、索引的使用"><a href="#九、索引的使用" class="headerlink" title="九、索引的使用"></a>九、索引的使用</h1><h2 id="执行计划："><a href="#执行计划：" class="headerlink" title="执行计划："></a>执行计划：</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.comment.find(&#123;userid:&quot;1003&quot;&#125;).explain()</span><br></pre></td></tr></table></figure><p>没有使用索引：集合扫描</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;winningPlan&quot; : &#123;</span><br><span class="line">&quot;stage&quot; : &quot;COLLSCAN&quot;,</span><br></pre></td></tr></table></figure><p>使用索引：索引扫描、再从集合抓取</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;winningPlan&quot; : &#123;</span><br><span class="line">&quot;stage&quot; : &quot;FETCH&quot;,</span><br><span class="line">&quot;inputStage&quot; : &#123;</span><br><span class="line">&quot;stage&quot; : &quot;IXSCAN&quot;,</span><br></pre></td></tr></table></figure><h2 id="涵盖的查询："><a href="#涵盖的查询：" class="headerlink" title="涵盖的查询："></a>涵盖的查询：</h2><p>不去集合查询，而直接查询索引返回，数据从索引拿到</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.comment.find(&#123;userid:&quot;1003&quot;&#125;,&#123;userid:<span class="number">1</span>,_id:<span class="number">0</span>&#125;)</span><br></pre></td></tr></table></figure><h1 id="十、findBy属性字段分页查询"><a href="#十、findBy属性字段分页查询" class="headerlink" title="十、findBy属性字段分页查询"></a>十、findBy属性字段分页查询</h1><p>继承接口findBy属性方法，从而调用框架方法查询分页</p><h2 id="dao接口："><a href="#dao接口：" class="headerlink" title="dao接口："></a>dao接口：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CommentRepository</span> <span class="keyword">extends</span> <span class="title class_">MongoRepository</span>&lt;Comment, String&gt; &#123;</span><br><span class="line">    Page&lt;Comment&gt; <span class="title function_">findByParentid</span><span class="params">(String parentid, Pageable pageable)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="service实现："><a href="#service实现：" class="headerlink" title="service实现："></a>service实现：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> Page&lt;Comment&gt; <span class="title function_">findCommentByParentid</span><span class="params">(String parentid, <span class="type">int</span> page, <span class="type">int</span> size)</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> commentRepository.findByParentid(parentid, PageRequest.of(page, size));</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="page的索引从0开始，size是页面大小"><a href="#page的索引从0开始，size是页面大小" class="headerlink" title="page的索引从0开始，size是页面大小"></a>page的索引从0开始，size是页面大小</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindCommentByParentid</span><span class="params">()</span>&#123;</span><br><span class="line">    Page&lt;Comment&gt; page = commentService.findCommentByParentid(<span class="string">&quot;3&quot;</span>, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">    System.out.println(page.getTotalElements());</span><br><span class="line">    System.out.println(page.getContent());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="十一、mongoTemplate实现点赞"><a href="#十一、mongoTemplate实现点赞" class="headerlink" title="十一、mongoTemplate实现点赞"></a>十一、mongoTemplate实现点赞</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateCommentLikenum</span><span class="params">(String id)</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询条件</span></span><br><span class="line">    <span class="type">Query</span> <span class="variable">query</span> <span class="operator">=</span> Query.query(Criteria.where(<span class="string">&quot;_id&quot;</span>).is(id));</span><br><span class="line">    System.out.println(query);</span><br><span class="line">    <span class="comment">//更新条件</span></span><br><span class="line">    <span class="type">Update</span> <span class="variable">update</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Update</span>();</span><br><span class="line">    update.inc(<span class="string">&quot;likenum&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">UpdateResult</span> <span class="variable">updateResult</span> <span class="operator">=</span> mongoTemplate.updateFirst(query, update, Comment.class);</span><br><span class="line">    System.out.println(updateResult);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUbpdateCommentLikenum</span><span class="params">()</span>&#123;</span><br><span class="line">    commentService.updateCommentLikenum(<span class="string">&quot;612376cde9acd86e0584f8cd&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="十二、副本集"><a href="#十二、副本集" class="headerlink" title="十二、副本集"></a>十二、副本集</h1><h2 id="副本集三个角色："><a href="#副本集三个角色：" class="headerlink" title="副本集三个角色："></a>副本集三个角色：</h2><p>主要成员（Primary）：主要接收所有写操作，就是主节点。</p><p>副本成员（Replicate）：从主节点通过复制操作以维护相同的数据集，即备份数据，不可写操作，但可以读操作（需要配置），是默认的一种从节点类型。</p><p>仲裁者（Arbiter）：不保留任何数据的副本，只具有投票选举作用，当然也可以将仲裁服务器维护为副本集的一部分，即副本成员同时也可以是仲裁者，也是一种从节点类型。</p><h2 id="副本集的创建："><a href="#副本集的创建：" class="headerlink" title="副本集的创建："></a>副本集的创建：</h2><p>副本集架构目标：一主一副本一仲裁</p><p>（1）首先先做安全认证</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">openssl rand -<span class="built_in">base64</span> 90 -out /etc/mongodb/mongodb-keyfile</span><br><span class="line">groupadd mongodb</span><br><span class="line">useradd -g mongodb monngodb </span><br><span class="line"><span class="built_in">chown</span> -R mongodb.mongodb /etc/mongodb/mongodb-keyfile <span class="comment">#禁止访问安全证书</span></span><br><span class="line"><span class="built_in">chmod</span> 600 /etc/mongodb/mongodb-keyfile <span class="comment">#只允许root用户读写，本地和其他用户无权限</span></span><br></pre></td></tr></table></figure><h2 id="主节点："><a href="#主节点：" class="headerlink" title="主节点："></a><strong>主节点：</strong></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /usr/local/mongodb-4.2.15/replica_sets/myrs_27017/log \ &amp;</span><br><span class="line"><span class="built_in">mkdir</span> -p /usr/local/mongodb-4.2.15/replica_sets/myrs_27017/data/db</span><br></pre></td></tr></table></figure><p>27017（mongod.conf）:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">#SystemLog Options</span><br><span class="line">systemLog:</span><br><span class="line">#MongoDB发送所有日志输出的目标指定为文件 </span><br><span class="line">  destination: file</span><br><span class="line">  #mongod或mongos应向其发送所有诊断日志记录信息的日志文件的路径 </span><br><span class="line">  path: &quot;/usr/local/mongodb-4.2.15/replica_sets/myrs_27017/log/mongod.log&quot;</span><br><span class="line">  #当mongos或mongod实例重新启动时，mongos或mongod会将新条目附加到现有日志文件的末尾</span><br><span class="line">  logAppend: true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#storage Options</span><br><span class="line">storage:</span><br><span class="line">  #mongod实例存储其数据的目录。storage.dbPath设置仅适用于mongod。 </span><br><span class="line">  dbPath: &quot;/usr/local/mongodb-4.2.15/replica_sets/myrs_27017/data/db&quot;</span><br><span class="line">  journal:</span><br><span class="line">  #启用或禁用持久性日志以确保数据文件保持有效和可恢复。 </span><br><span class="line">    enabled: true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#processManagement Options</span><br><span class="line">processManagement:</span><br><span class="line">  #启用在后台运行mongos或mongod进程的守护进程模式。 </span><br><span class="line">  fork: true</span><br><span class="line">  #指定用于保存mongos或mongod进程的进程ID的文件位置，其中mongos或mongod将写入其PID </span><br><span class="line">  pidFilePath: &quot;/mongodb/replica_sets/myrs_27017/log/mongod.pid&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#net Options</span><br><span class="line">net:</span><br><span class="line">  #服务实例绑定所有IP，有副作用，副本集初始化的时候，节点名字会自动设置为本地域名，而不是ip </span><br><span class="line">  #bindIpAll: true </span><br><span class="line">  #服务实例绑定的IP </span><br><span class="line">  bindIp: localhost,172.30.77.41</span><br><span class="line">  #bindIp #绑定的端口 </span><br><span class="line">  port: 27017</span><br><span class="line">#安全认证</span><br><span class="line">security:</span><br><span class="line">  authorization: enabled</span><br><span class="line">  keyFile: &quot;/etc/mongodb/mongodb-keyfile&quot;</span><br><span class="line">#replication Options</span><br><span class="line">replication:</span><br><span class="line">  #副本集的名称</span><br><span class="line">  replSetName: myrs</span><br></pre></td></tr></table></figure><p>启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/mongodb-4.2.15/bin/mongod -f /usr/local/mongodb-4.2.15/replica_sets/myrs_27017/mongod.conf </span><br></pre></td></tr></table></figure><h2 id="副本节点："><a href="#副本节点：" class="headerlink" title="副本节点："></a><strong>副本节点：</strong></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /usr/local/mongodb-4.2.15/replica_sets/myrs_27018/log \ &amp;</span><br><span class="line"><span class="built_in">mkdir</span> -p /usr/local/mongodb-4.2.15/replica_sets/myrs_27018/data/db</span><br></pre></td></tr></table></figure><p>27018（mongod.conf）:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">#SystemLog Options</span><br><span class="line">systemLog:</span><br><span class="line">#MongoDB发送所有日志输出的目标指定为文件 </span><br><span class="line">  destination: file</span><br><span class="line">  #mongod或mongos应向其发送所有诊断日志记录信息的日志文件的路径 </span><br><span class="line">  path: &quot;/usr/local/mongodb-4.2.15/replica_sets/myrs_27018/log/mongod.log&quot;</span><br><span class="line">  #当mongos或mongod实例重新启动时，mongos或mongod会将新条目附加到现有日志文件的末尾</span><br><span class="line">  logAppend: true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#storage Options</span><br><span class="line">storage:</span><br><span class="line">  #mongod实例存储其数据的目录。storage.dbPath设置仅适用于mongod。 </span><br><span class="line">  dbPath: &quot;/usr/local/mongodb-4.2.15/replica_sets/myrs_27018/data/db&quot;</span><br><span class="line">  journal:</span><br><span class="line">  #启用或禁用持久性日志以确保数据文件保持有效和可恢复。 </span><br><span class="line">    enabled: true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#processManagement Options</span><br><span class="line">processManagement:</span><br><span class="line">  #启用在后台运行mongos或mongod进程的守护进程模式。 </span><br><span class="line">  fork: true</span><br><span class="line">  #指定用于保存mongos或mongod进程的进程ID的文件位置，其中mongos或mongod将写入其PID </span><br><span class="line">  pidFilePath: &quot;/usr/local/mongodb-4.2.15/replica_sets/myrs_27018/log/mongod.pid&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#net Options</span><br><span class="line">net:</span><br><span class="line">  #服务实例绑定所有IP，有副作用，副本集初始化的时候，节点名字会自动设置为本地域名，而不是ip </span><br><span class="line">  #bindIpAll: true </span><br><span class="line">  #服务实例绑定的IP </span><br><span class="line">  bindIp: localhost,172.30.77.41</span><br><span class="line">  #bindIp #绑定的端口 </span><br><span class="line">  port: 27018</span><br><span class="line">#安全认证</span><br><span class="line">security:</span><br><span class="line">  authorization: enabled</span><br><span class="line">  keyFile: &quot;/etc/mongodb/mongodb-keyfile&quot;</span><br><span class="line">#replication Options</span><br><span class="line">replication:</span><br><span class="line">  #副本集的名称</span><br><span class="line">  replSetName: myrs</span><br></pre></td></tr></table></figure><p>启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/mongob-4.2.15/bin/mongod -f /usr/local/mongodb-4.2.15/replica_sets/myrs_27018/mongod.conf </span><br></pre></td></tr></table></figure><h2 id="仲裁节点："><a href="#仲裁节点：" class="headerlink" title="仲裁节点："></a><strong>仲裁节点：</strong></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /usr/local/mongodb-4.2.15/replica_sets/myrs_27019/log \ &amp;</span><br><span class="line"><span class="built_in">mkdir</span> -p /usr/local/mongodb-4.2.15/replica_sets/myrs_27019/data/db</span><br></pre></td></tr></table></figure><p>27019（mongod.conf）:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">#SystemLog Options</span><br><span class="line">systemLog:</span><br><span class="line">#MongoDB发送所有日志输出的目标指定为文件 </span><br><span class="line">  destination: file</span><br><span class="line">  #mongod或mongos应向其发送所有诊断日志记录信息的日志文件的路径 </span><br><span class="line">  path: &quot;/usr/local/mongodb-4.2.15/replica_sets/myrs_27019/log/mongod.log&quot;</span><br><span class="line">  #当mongos或mongod实例重新启动时，mongos或mongod会将新条目附加到现有日志文件的末尾</span><br><span class="line">  logAppend: true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#storage Options</span><br><span class="line">storage:</span><br><span class="line">  #mongod实例存储其数据的目录。storage.dbPath设置仅适用于mongod。 </span><br><span class="line">  dbPath: &quot;/usr/local/mongodb-4.2.15/replica_sets/myrs_27019/data/db&quot;</span><br><span class="line">  journal:</span><br><span class="line">  #启用或禁用持久性日志以确保数据文件保持有效和可恢复。 </span><br><span class="line">    enabled: true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#processManagement Options</span><br><span class="line">processManagement:</span><br><span class="line">  #启用在后台运行mongos或mongod进程的守护进程模式。 </span><br><span class="line">  fork: true</span><br><span class="line">  #指定用于保存mongos或mongod进程的进程ID的文件位置，其中mongos或mongod将写入其PID </span><br><span class="line">  pidFilePath: &quot;/usr/local/mongodb-4.2.15/replica_sets/myrs_27019/log/mongod.pid&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#net Options</span><br><span class="line">net:</span><br><span class="line">  #服务实例绑定所有IP，有副作用，副本集初始化的时候，节点名字会自动设置为本地域名，而不是ip </span><br><span class="line">  #bindIpAll: true </span><br><span class="line">  #服务实例绑定的IP </span><br><span class="line">  bindIp: localhost,172.30.77.41</span><br><span class="line">  #bindIp #绑定的端口 </span><br><span class="line">  port: 27019</span><br><span class="line">#安全认证</span><br><span class="line">security:</span><br><span class="line">  authorization: enabled</span><br><span class="line">  keyFile: &quot;/etc/mongodb/mongodb-keyfile&quot;</span><br><span class="line">#replication Options</span><br><span class="line">replication:</span><br><span class="line">  #副本集的名称</span><br><span class="line">  replSetName: myrs</span><br></pre></td></tr></table></figure><p>启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/mongodb-4.2.15/bin/mongod -f /usr/local/mongodb-4.2.15/replica_sets/myrs_27019/mongod.conf </span><br></pre></td></tr></table></figure><h1 id="初始化副本集："><a href="#初始化副本集：" class="headerlink" title="初始化副本集："></a>初始化副本集：</h1><p>客户端登录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./mongo --host=172.30.77.41 --port=27017</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> rs.initiate()</span><br></pre></td></tr></table></figure><p>切记，其他节点不要初始化，或者</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">config<span class="operator">=</span></span><br><span class="line">&#123;</span><br><span class="line">_id:<span class="string">&#x27;mongo_rep&#x27;</span>,members:[</span><br><span class="line">&#123;_id:<span class="number">0</span>, host:<span class="string">&#x27;192.168.163.125:27017&#x27;</span>&#125;,</span><br><span class="line">&#123;_id:<span class="number">1</span>, host:<span class="string">&#x27;192.168.163.126:27017&#x27;</span>&#125;,</span><br><span class="line">&#123;_id:<span class="number">2</span>, host:<span class="string">&#x27;192.168.163.127:27017&#x27;</span>&#125;,</span><br><span class="line">&#123;_id:<span class="number">3</span>, host:<span class="string">&#x27;192.168.163.128:27017&#x27;</span>&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">rs.initiate(config)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rs.conf()</span><br></pre></td></tr></table></figure><p>建立角色和账号, 用于管理副本集</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">use admin</span><br><span class="line">db.createUser(</span><br><span class="line">     &#123;</span><br><span class="line">       <span class="keyword">user</span>:&quot;root&quot;,</span><br><span class="line">       pwd:&quot;root&quot;,</span><br><span class="line">       roles:[&#123;role:&quot;root&quot;,db:&quot;admin&quot;&#125;]</span><br><span class="line">     &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.auth(&quot;root&quot;,&quot;root&quot;) #验证身份才能使用命令</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.getUsers()</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>“_id”：“myrs”：副本集的配置数据存储的主键值，默认就是副本集的名字</li><li>“members”：副本集成员数组，此时只有一个“host”：“172.30.77.41”，该成员不是仲裁节点：“arbiterOnly”：false，优先级（权重值）：”priority”：1</li><li>“setting”：副本集的参数配置</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rs.status()</span><br></pre></td></tr></table></figure><p>查看节点的状态</p><h1 id="添加副本从节点："><a href="#添加副本从节点：" class="headerlink" title="添加副本从节点："></a>添加副本从节点：</h1><p>注意添加其他节点时，要被添加的节点必须未初始化，否则将会报错Received heartbeat from member with the same，id值一样，副本集中节点之间的id值不能相同，具有唯一性，否则导致混乱，所有报错，初始化会默认为0，故不能初始化</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rs.add(&quot;172.30.77.41:27018&quot;)</span><br></pre></td></tr></table></figure><h1 id="添加仲裁节点："><a href="#添加仲裁节点：" class="headerlink" title="添加仲裁节点："></a>添加仲裁节点：</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rs.addArb(&quot;172.30.77.41:27019&quot;)</span><br></pre></td></tr></table></figure><h1 id="读写操作："><a href="#读写操作：" class="headerlink" title="读写操作："></a>读写操作：</h1><p>主节点可以读写操作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.comment.insert(&#123;&quot;articleid&quot;:&quot;1001&quot;,&quot;content&quot;:&quot;今天天气真好阳光明媚&quot;,&quot;userid&quot;:&quot;1001&quot;,&quot;nickname&quot;:&quot;Rose&quot;,&quot;createdatetime&quot;:&quot;new Date()&quot;&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.comment.find()</span><br></pre></td></tr></table></figure><p>从节点只能读操作：</p><p>先承认是副本集中的从节点</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rs.slaveOk()</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> dbs</span><br></pre></td></tr></table></figure><p>现在就实现了读写分离，主节点读写操作，从节点读操作</p><p>如果需要取消作为从节点的读操作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>缺省默认为<span class="literal">true</span></span><br><span class="line">rs.slaveOk(<span class="literal">false</span>)</span><br></pre></td></tr></table></figure><p>仲裁节点不会同步数据，不能读写操作，只能选举</p><h1 id="主节点选举原则："><a href="#主节点选举原则：" class="headerlink" title="主节点选举原则："></a>主节点选举原则：</h1><ul><li>主节点故障</li><li>主节点网络不可达（默认心跳10秒）</li><li>人工干预（rs.stepDown(600)）</li></ul><p>选举规则：</p><ul><li>票数大多数，票数相同时数据新的选举为主节点</li><li>节点优先级（权重）</li></ul><h1 id="十三、用户角色权限"><a href="#十三、用户角色权限" class="headerlink" title="十三、用户角色权限"></a>十三、用户角色权限</h1><p><img src="https://yupeng-tuchuang.oss-cn-shenzhen.aliyuncs.com/fd9924f3-cd1a-4087-8515-6cce5ee289e6.png" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h1&gt;&lt;h2 id=&quot;简介：&quot;&gt;&lt;a href=&quot;#简介：&quot; class=&quot;headerlink&quot; title=&quot;简介：&quot;&gt;&lt;/a&gt;简介</summary>
      
    
    
    
    <category term="Java笔记" scheme="http://fyupeng.github.io/categories/Java%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="MongoDB" scheme="http://fyupeng.github.io/tags/MongoDB/"/>
    
    <category term="数据库" scheme="http://fyupeng.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>JDBC</title>
    <link href="http://fyupeng.github.io/2022/06/25/JDBC/"/>
    <id>http://fyupeng.github.io/2022/06/25/JDBC/</id>
    <published>2022-06-25T07:50:42.000Z</published>
    <updated>2022-06-25T07:51:55.452Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、原理篇"><a href="#一、原理篇" class="headerlink" title="一、原理篇"></a>一、原理篇</h1><h2 id="1-JDBC：Java-DataBase-Connectivity"><a href="#1-JDBC：Java-DataBase-Connectivity" class="headerlink" title="1.JDBC：Java DataBase Connectivity"></a>1.JDBC：Java DataBase Connectivity</h2><p>可以为多种关系型数据库DBMS 提供统一的访问形式，用Java来操作数据库</p><h2 id="2-JDBC-API-主要功能："><a href="#2-JDBC-API-主要功能：" class="headerlink" title="2.JDBC API 主要功能："></a>2.JDBC API 主要功能：</h2><p>三件事，具体时通过以下类/接口实现：<br>DriverManager：管理jdbc驱动<br>Connection：连接（通过DriverManager产生）<br>Statement(PreparedStatement)：增删查改 （通过Connection产生）<br>CallableStatement：调用数据库中的 存储过程/存储函数<br>Result：返回的结果集（上面的Statement等产生）</p><p>Connection产生操作数据库的对象：<br>Connection产生Statement对象：createStatement（）<br>Connection产生PreparedStatement对象：PrepareStatement（）<br>Connection产生CallableStatement对象：prepareCall（）</p><p>Statement操作数据库：<br>增删改：executeUpdate（）<br>查询：executeQuery（）</p><p>ResultSet：保存结果集 select * from xxx<br>next（）：光标下移，判断是否有下一条数据；true/false<br>previous（）：true/false</p><p>PrepareStatement操作数据库：<br>public interface PreparedStatement extends Statement<br>因此<br>增删改：executeUpdate（）<br>查询：executeQuery（）<br>赋值操作：setXxx（）</p><p>PrepareStatement与Statement在使用时的区别：<br>1.Statement：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sql</span><br><span class="line">executeUpdate（sql）</span><br></pre></td></tr></table></figure><p>2.preparedStatement：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sql（可能存在占位符？）</span><br><span class="line"><span class="comment">//在创建PreparedStatement 对象时，将sql预编译 prepareStatment(sql)</span></span><br><span class="line">executeUpdate()</span><br><span class="line">setXxx()替换占位符？</span><br></pre></td></tr></table></figure><p>推荐使用PreparedStatement：原因如下：<br>（1）编码更加简便</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;zs&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">23</span>;</span><br></pre></td></tr></table></figure><p>stmt：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into student(stuno, stuname) values(&#x27;&quot;</span> + name + <span class="string">&quot;&#x27;, &quot;</span> + age +<span class="string">&quot;) &quot;</span> ;</span><br><span class="line">stmt.executeUpdate(sql);</span><br></pre></td></tr></table></figure><p>pstmt：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into student(stuno, stuname) values(?, ?)&quot;</span>;</span><br><span class="line">pstmt = connection.prepareStatement(sql);<span class="comment">//预编译</span></span><br><span class="line">pstmt.setString(<span class="number">1</span>, name);</span><br><span class="line">pstmt.setInt(<span class="number">2</span>, age);</span><br><span class="line">pstmt.excuteUpdate();</span><br></pre></td></tr></table></figure><p>（2）提高性能（因为有 预编译操作， 预编译只需执行一次）<br>需要重复增加100条数<br>stmt：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into student(stuno, stuname) values(&#x27;&quot;</span> + name + <span class="string">&quot;&#x27;, &quot;</span> + age +<span class="string">&quot;) &quot;</span> ;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++)</span><br><span class="line">stmt.executeUpdate(sql);</span><br></pre></td></tr></table></figure><p>pstmt：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into student(stuno, stuname) values(?, ?)&quot;</span>;</span><br><span class="line">pstmt = connection.prepareStatement(sql);<span class="comment">//预编译</span></span><br><span class="line">pstmt.setString(<span class="number">1</span>, name);</span><br><span class="line">pstmt.setInt(<span class="number">2</span>, age);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++)</span><br><span class="line">pstmt.excuteUpdate();</span><br></pre></td></tr></table></figure><p>（3）安全（可以有效防止sql注入）<br>sql注入：将客户端输入的内容 和 开发人员 的 SQL语句 混为一体<br>stmt：存在被sql注入的风险；<br>（例如输入 用户名：任意值 ‘ or 1=1 –<br>密码：任意值）<br>分析：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> login <span class="keyword">where</span> uanme <span class="operator">=</span> <span class="string">&#x27;任意值&#x27;</span> <span class="keyword">or</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span> <span class="comment">--&#x27; and upwd = &#x27;任意值&#x27;；</span></span><br><span class="line"><span class="keyword">select</span>  <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> login <span class="keyword">where</span> uname <span class="operator">=</span> <span class="string">&#x27;&quot;+name+&quot;&#x27;</span> <span class="keyword">and</span> upwd <span class="operator">=</span> <span class="string">&#x27;&quot;+pwd+&quot;&#x27;</span></span><br></pre></td></tr></table></figure><p>pstmt有效防止sql注入</p><h2 id="3-jdbc访问数据库的具体步骤："><a href="#3-jdbc访问数据库的具体步骤：" class="headerlink" title="3.jdbc访问数据库的具体步骤："></a>3.jdbc访问数据库的具体步骤：</h2><p>a.导入驱动，加载具体的驱动类<br>b.与数据库建立连接<br>c.发送sql，执行<br>d.处理结果集(查询)</p><h2 id="4-数据库驱动"><a href="#4-数据库驱动" class="headerlink" title="4.数据库驱动"></a>4.数据库驱动</h2><p>数据库名</p><p>驱动jar</p><p>具体驱动类</p><p>连接字符串</p><p>Oracle</p><p>ojdbc-x.jar</p><p>oracle.jdbc.OracleDriver</p><p>jdbc:oracle:this:@localhost:1521:ORCL</p><p>MySQL</p><p>Mysql-connector-java-x.jar</p><p>com.mysql.jdbc.Driver</p><p>jdbc:mysql://localhost:3306/数据库实例名</p><p>SqlServer</p><p>sqljdbc-x.jar</p><p>com.microsoft.sqlserver.jdbc.SQLServerDriver</p><p>jdbc:sqlserver://localhost:1433;DatabaseName=mydatabase</p><h1 id="二、操作篇"><a href="#二、操作篇" class="headerlink" title="二、操作篇"></a>二、操作篇</h1><h2 id="1-使用JDBC连接Oracle"><a href="#1-使用JDBC连接Oracle" class="headerlink" title="1.使用JDBC连接Oracle"></a>1.使用JDBC连接Oracle</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exp1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCDemo</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">URL</span> <span class="operator">=</span> <span class="string">&quot;jdbc:oracle:thin:@localhost:1521:ORCL&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">USERNAME</span> <span class="operator">=</span> <span class="string">&quot;system&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PWD</span> <span class="operator">=</span> <span class="string">&quot;FYp0103&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//a.导入驱动，加载具体的驱动类</span></span><br><span class="line">Class.forName(<span class="string">&quot;oracle.jdbc.OracleDriver&quot;</span>);</span><br><span class="line"><span class="comment">//b.与数据库建立连接</span></span><br><span class="line">connection =  DriverManager.getConnection(URL, USERNAME, PWD);</span><br><span class="line"><span class="comment">//c.发送sql，执行（增删查改）</span></span><br><span class="line">stmt = connection.createStatement();</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into student values(1, &#x27;zs&#x27;, 23, &#x27;s1&#x27;)&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> stmt.executeUpdate(sql);<span class="comment">//返回值表示增删改几条数据</span></span><br><span class="line"><span class="keyword">if</span>(count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;操作成功！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">catch</span>(ClassNotFoundException e)&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">catch</span>(SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(stmt !=<span class="literal">null</span>) stmt.close();</span><br><span class="line"><span class="keyword">if</span>(connection !=<span class="literal">null</span>) connection.close();</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">update();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-Statement增删改、查操作"><a href="#2-Statement增删改、查操作" class="headerlink" title="2.Statement增删改、查操作"></a>2.Statement增删改、查操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JDBC For Statement</span></span><br><span class="line"><span class="keyword">package</span> exp1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCDemo_Statement</span> &#123;</span><br><span class="line"><span class="comment">//private static final String URL = &quot;jdbc:oracle:thin:@localhost:1521:ORCL&quot;;</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">URL</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/MyDataBase&quot;</span>;</span><br><span class="line"> <span class="comment">//新版的 private static final String URL = &quot;jdbc:sqlserver://localhost:1433;DatabaseName=mydatabase&quot;;</span></span><br><span class="line"><span class="comment">//旧版的  private static final String URL = &quot;jdbc:microsoft:sqlserver:localhost:1433;database=MyDataBase&quot;;</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">USERNAME</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PWD</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//a.导入驱动，加载具体的驱动类</span></span><br><span class="line"><span class="comment">//Class.forName(&quot;oracle.jdbc.OracleDriver&quot;);</span></span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"><span class="comment">//       Class.forName(&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//b.与数据库建立连接</span></span><br><span class="line">connection =  DriverManager.getConnection(URL, USERNAME, PWD);</span><br><span class="line"><span class="comment">//c.发送sql，执行（增删改, 查）</span></span><br><span class="line"><span class="comment">/*//增    </span></span><br><span class="line"><span class="comment"> *         stmt = connection.createStatement();</span></span><br><span class="line"><span class="comment">String sql = &quot;insert into student values(1, 23, &#x27;zs&#x27;, &#x27;s1&#x27;)&quot;;</span></span><br><span class="line"><span class="comment">int count = stmt.executeUpdate(sql);//返回值表示增删改几条数据</span></span><br><span class="line"><span class="comment">if(count &gt; 0) &#123;</span></span><br><span class="line"><span class="comment">System.out.println(&quot;操作成功！&quot;);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*//删    </span></span><br><span class="line"><span class="comment">          stmt = connection.createStatement();</span></span><br><span class="line"><span class="comment">String sql = &quot;delete from student where stuno = 1&quot;;</span></span><br><span class="line"><span class="comment">int count = stmt.executeUpdate(sql);//返回值表示增删改几条数据</span></span><br><span class="line"><span class="comment">if(count &gt; 0) &#123;</span></span><br><span class="line"><span class="comment">System.out.println(&quot;操作成功！&quot;);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*//改   </span></span><br><span class="line"><span class="comment">          stmt = connection.createStatement();</span></span><br><span class="line"><span class="comment">String sql = &quot;update student set stuname = zs5 where stuno = 1&quot;;</span></span><br><span class="line"><span class="comment">int count = stmt.executeUpdate(sql);//返回值表示增删改几条数据</span></span><br><span class="line"><span class="comment">if(count &gt; 0) &#123;</span></span><br><span class="line"><span class="comment">System.out.println(&quot;操作成功！&quot;);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*//查    </span></span><br><span class="line"><span class="comment">          stmt = connection.createStatement();</span></span><br><span class="line"><span class="comment">String sql = &quot;select * from student&quot;;</span></span><br><span class="line"><span class="comment">rs = stmt.executeQuery(sql);//返回值表示增删改几条数据</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">while(rs.next()) &#123;</span></span><br><span class="line"><span class="comment">int Sno = rs.getInt(&quot;stuno&quot;);</span></span><br><span class="line"><span class="comment">int Sage = rs.getInt(&quot;stuage&quot;);</span></span><br><span class="line"><span class="comment">String Sname = rs.getString(&quot;stuname&quot;);</span></span><br><span class="line"><span class="comment">String Sclass = rs.getString(&quot;stuclass&quot;);</span></span><br><span class="line"><span class="comment">System.out.println(Sno + &quot;--&quot; + Sage + &quot;--&quot; + Sname + &quot;--&quot; + Sclass);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(ClassNotFoundException e)&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">catch</span>(SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(stmt !=<span class="literal">null</span>) stmt.close();</span><br><span class="line"><span class="keyword">if</span>(connection !=<span class="literal">null</span>) connection.close();</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">update();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-preparedStatement增删改、查操作"><a href="#3-preparedStatement增删改、查操作" class="headerlink" title="3.preparedStatement增删改、查操作"></a>3.preparedStatement增删改、查操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exp2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.sql.CallableStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCDemo_prepareStatement</span> &#123;</span><br><span class="line"><span class="comment">//private static final String URL = &quot;jdbc:oracle:thin:@localhost:1521:ORCL&quot;;</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">URL</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/MyDataBase&quot;</span>;</span><br><span class="line"><span class="comment">//private static final String URL = &quot;jdbc:microsofi:sqlserver:localhost:1433;database=MyDataBase&quot;;</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">USERNAME</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PWD</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//a.导入驱动，加载具体的驱动类</span></span><br><span class="line"><span class="comment">//Class.forName(&quot;oracle.jdbc.OracleDriver&quot;);</span></span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"><span class="comment">//Class.forName(&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;);</span></span><br><span class="line"><span class="comment">//b.与数据库建立连接</span></span><br><span class="line">connection =  DriverManager.getConnection(URL, USERNAME, PWD);</span><br><span class="line"><span class="comment">//c.发送sql，执行（增删查改）</span></span><br><span class="line"><span class="comment">//String sql = &quot;insert into student values(?, ?, ?, ?)&quot;;</span></span><br><span class="line"><span class="comment">//增    </span></span><br><span class="line"><span class="comment">/*          pstmt = connection.createStatement();</span></span><br><span class="line"><span class="comment">String sql = &quot;insert into student values(1, 23, &#x27;zs&#x27;, &#x27;s1&#x27;)&quot;;</span></span><br><span class="line"><span class="comment">int count = pstmt.executeUpdate(sql);//返回值表示增删改几条数据</span></span><br><span class="line"><span class="comment">if(count &gt; 0) &#123;</span></span><br><span class="line"><span class="comment">System.out.println(&quot;操作成功！&quot;);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*//删    </span></span><br><span class="line"><span class="comment">          pstmt = connection.createStatement();</span></span><br><span class="line"><span class="comment">String sql = &quot;delete from student where stuno = 1&quot;;</span></span><br><span class="line"><span class="comment">int count = pstmt.executeUpdate(sql);//返回值表示增删改几条数据</span></span><br><span class="line"><span class="comment">if(count &gt; 0) &#123;</span></span><br><span class="line"><span class="comment">System.out.println(&quot;操作成功！&quot;);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*//改   </span></span><br><span class="line"><span class="comment">          pstmt = connection.createStatement();</span></span><br><span class="line"><span class="comment">String sql = &quot;update student set stuname = zs5 where stuno = 1&quot;;</span></span><br><span class="line"><span class="comment">int count = pstmt.executeUpdate(sql);//返回值表示增删改几条数据</span></span><br><span class="line"><span class="comment">if(count &gt; 0) &#123;</span></span><br><span class="line"><span class="comment">System.out.println(&quot;操作成功！&quot;);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*//查    </span></span><br><span class="line"><span class="comment">          pstmt = connection.createStatement();</span></span><br><span class="line"><span class="comment">String sql = &quot;select * from student&quot;;</span></span><br><span class="line"><span class="comment">rs = pstmt.executeQuery(sql);//返回值表示增删改几条数据</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">while(rs.next()) &#123;</span></span><br><span class="line"><span class="comment">int Sno = rs.getInt(&quot;stuno&quot;);</span></span><br><span class="line"><span class="comment">int Sage = rs.getInt(&quot;stuage&quot;);</span></span><br><span class="line"><span class="comment">String Sname = rs.getString(&quot;stuname&quot;);</span></span><br><span class="line"><span class="comment">String Sclass = rs.getString(&quot;stuclass&quot;);</span></span><br><span class="line"><span class="comment">System.out.println(Sno + &quot;--&quot; + Sage + &quot;--&quot; + Sname + &quot;--&quot; + Sclass);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*//增</span></span><br><span class="line"><span class="comment">String sql = &quot;insert into student values(1, 23, &#x27;zs&#x27;, ?)&quot;;</span></span><br><span class="line"><span class="comment">pstmt = connection.prepareStatement(sql);</span></span><br><span class="line"><span class="comment">pstmt.setString(1, &quot;zs&quot;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int count = pstmt.executeUpdate();</span></span><br><span class="line"><span class="comment">if(count &gt; 0) &#123;</span></span><br><span class="line"><span class="comment">System.out.println(&quot;操作成功！&quot;);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*//删</span></span><br><span class="line"><span class="comment">String sql = &quot;delete from student where stuno = ?&quot;;</span></span><br><span class="line"><span class="comment">pstmt = connection.prepareStatement(sql);</span></span><br><span class="line"><span class="comment">pstmt.setString(1, &quot;1&quot;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int count = pstmt.executeUpdate();</span></span><br><span class="line"><span class="comment">if(count &gt; 0) &#123;</span></span><br><span class="line"><span class="comment">System.out.println(&quot;操作成功！&quot;);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*//改</span></span><br><span class="line"><span class="comment">String sql = &quot;update student set stuname = zs5 where stuno = ?&quot;;</span></span><br><span class="line"><span class="comment">pstmt = connection.prepareStatement(sql);</span></span><br><span class="line"><span class="comment">pstmt.setString(1, &quot;1&quot;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int count = pstmt.executeUpdate();</span></span><br><span class="line"><span class="comment">if(count &gt; 0) &#123;</span></span><br><span class="line"><span class="comment">System.out.println(&quot;操作成功！&quot;);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*//改</span></span><br><span class="line"><span class="comment">String sql = &quot;select * from student where stuno = ?&quot;;</span></span><br><span class="line"><span class="comment">pstmt = connection.prepareStatement(sql);</span></span><br><span class="line"><span class="comment">pstmt.setString(1, &quot;1&quot;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">rs = pstmt.executeQuery();</span></span><br><span class="line"><span class="comment">while(rs.next()) &#123;</span></span><br><span class="line"><span class="comment">int sno = rs.getInt(&quot;stuno&quot;);</span></span><br><span class="line"><span class="comment">int sage = rs.getInt(&quot;stuage&quot;);</span></span><br><span class="line"><span class="comment">String sname = rs.getString(&quot;stuname&quot;);</span></span><br><span class="line"><span class="comment">String sclass = rs.getString(&quot;stuclass&quot;);</span></span><br><span class="line"><span class="comment">System.out.println(sno + &quot;--&quot; + sage + &quot;--&quot; + sname + &quot;--&quot; + sclass);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(ClassNotFoundException e)&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">catch</span>(SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(pstmt !=<span class="literal">null</span>) pstmt.close();</span><br><span class="line"><span class="keyword">if</span>(connection !=<span class="literal">null</span>) connection.close();</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">update();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>模板、八股文：</p><p>a.导入驱动包、加载具体驱动类Class.forName(“具体驱动类”)；</p><p>b.与数据库建立连接connection = DriverManager.getConnection(…);</p><p>c.通过connection, 获取操作数据库的对象（Statement/preparedStatement/callablestatement）</p><p>stmt = connection.createStatement();</p><p>d.(查询)处理结果集 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">rs = pstmt.excuteQuery();</span><br><span class="line"><span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">  rs.getXxx(..);</span><br><span class="line">&#125;<span class="keyword">catch</span>(ClassNotFoundExceptione)&#123;</span><br><span class="line">...</span><br><span class="line">&#125;<span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">...</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">...</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">  <span class="comment">//打开顺序，与关闭顺序相反</span></span><br><span class="line">  <span class="keyword">if</span>(rs != <span class="literal">null</span>)rs.close();</span><br><span class="line">  <span class="keyword">if</span>(stmt != <span class="literal">null</span>)stmt.close();</span><br><span class="line">  <span class="keyword">if</span>(connection != <span class="literal">null</span>)connection.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--jdbc中， 除了Class.forName()抛出ClassNotFoundException, 其余方法全部抛出SQLEeception</span><br></pre></td></tr></table></figure><h2 id="5-JDBC调用存储过程和存储函数"><a href="#5-JDBC调用存储过程和存储函数" class="headerlink" title="5.JDBC调用存储过程和存储函数"></a>5.JDBC调用存储过程和存储函数</h2><p>1.CallableStatement：调用    存储过程、存储函数</p><p>connection.prepareCall(参数：存储过程胡哦存储函数名)</p><p>参数格式：</p><p>存储过程（无返回值return, 用Out参数替代）:</p><p>​            {call         存储过程名（参数列表）}</p><p>存储函数（有返回值return）:</p><p>​            {? = call 存储函数名（参数列表）}</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">procedure</span> addTwoNum(num1 <span class="keyword">in</span> number, num2 <span class="keyword">in</span> number, <span class="keyword">result</span> <span class="keyword">out</span> number)</span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">result</span> :<span class="operator">=</span> num1 <span class="operator">+</span> num2;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>如果通过sql plus 访问数据库，只需要开启：OracleServiceSID</p><p>通过其他程序访问数据（sqldevelop、navicate、JDBC）,需要开启OracleServiceSID、XxxListener</p><p>JDBC调用存储过程的步骤：</p><p>a.产生    调用存储过程的对象（CallableStatement） cstmt = connection.prepareCall（“….”）;</p><p>b.通过setXxx（）处理    输出参数值 cstmt.setInt（1，30）；</p><p>c.通过    registerOutParameter(…)处理输出参数类型</p><p>d.cstmt.execute（）执行</p><p>e.接受    输出值    （返回值）getXxx()</p><p>调用存储函数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">function</span>  addTwoNumfunction(num1 <span class="keyword">in</span> number, num2 <span class="keyword">in</span> number)</span><br><span class="line">    <span class="keyword">return</span> number</span><br><span class="line">    <span class="keyword">as</span></span><br><span class="line">    <span class="keyword">result</span> number;</span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">result</span> :<span class="operator">=</span> num1 <span class="operator">+</span> num2;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">result</span>;</span><br><span class="line">    <span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>JDBC调用存储函数：与存储过程的区别：</p><p>在调用时，注意参数：“{？ = call addTwoNumfunction(?, ?)}”</p><p>3.处理CLOB/BLOB类型</p><p>处理稍大型数据：</p><p>a.存储路径 E:/A.txt</p><p>​    通过JDBC存储文件路径，然后根据IO操作处理</p><p>​    例如：JDBC将E:/A.txt 文件 以字符串形式 “E：/A.txt”存储到数据库中</p><p>​            获取：1.获取该路径“E：/A.txt”2.IO</p><p>b.</p><p>​    CLOB：大文本数据（小说→ 数据）</p><p>​    BLOB：二进制</p><p>clob：</p><p>存：</p><p>1.先通过pstmt的    ？    代替小说内容    （占位符）</p><p>2.再通过pstmt.setCharacterStream(2, reader, (int)file.length());</p><p>将上一步的    ？    替换为小说流，注意第三个参数需要是Int类型</p><p>取：</p><p>1.通过Reader reader = rs.getCharacterStream(“NOVEL”);</p><p>将clob类型的数据    保存到    Reader    对象中</p><p>2.将Reader通过Writer输出即可。</p><p>blob：二进制    字节流 InputStream OutputStream</p><p>与CLOB步骤基本一致，区别：setBinaryStream(…)    getBinaryStream(…)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、原理篇&quot;&gt;&lt;a href=&quot;#一、原理篇&quot; class=&quot;headerlink&quot; title=&quot;一、原理篇&quot;&gt;&lt;/a&gt;一、原理篇&lt;/h1&gt;&lt;h2 id=&quot;1-JDBC：Java-DataBase-Connectivity&quot;&gt;&lt;a href=&quot;#1-JDBC：J</summary>
      
    
    
    
    <category term="Java笔记" scheme="http://fyupeng.github.io/categories/Java%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="JDBC" scheme="http://fyupeng.github.io/tags/JDBC/"/>
    
  </entry>
  
</feed>
